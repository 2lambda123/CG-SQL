(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{150:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return h}));var a=n(0),i=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=b(n),u=a,h=d["".concat(l,".").concat(u)]||d[u]||p[u]||o;return n?i.a.createElement(h,r(r({ref:t},c),{},{components:n})):i.a.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var c=2;c<o;c++)l[c]=n[c];return i.a.createElement.apply(null,l)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},60:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return r})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(6),o=(n(0),n(150)),l=["components"],r={id:"x8",title:"Appendix 8: CQL Best Practices",sidebar_label:"Appendix 8: CQL Best Practices"},s={unversionedId:"x8",id:"x8",isDocsHomePage:!1,title:"Appendix 8: CQL Best Practices",description:"\x3c!---",source:"@site/../CQL_Guide/x8.md",slug:"/x8",permalink:"/cql-guide/x8",version:"current",lastUpdatedBy:"Winnie Quinn",lastUpdatedAt:1640007729,sidebar_label:"Appendix 8: CQL Best Practices",sidebar:"someSidebar",previous:{title:"Appendix 7: CQL Anti-patterns",permalink:"/cql-guide/x7"},next:{title:"Appendix 9: Using the CQL Amalgam",permalink:"/cql-guide/x9"}},c=[{value:"Data Definition Language (DDL)",id:"data-definition-language-ddl",children:[]},{value:"Ad Hoc Migrations",id:"ad-hoc-migrations",children:[]},{value:"Transactions",id:"transactions",children:[]},{value:"Savepoints",id:"savepoints",children:[]},{value:"Compilation options",id:"compilation-options",children:[]},{value:"Previous Schema",id:"previous-schema",children:[]},{value:"Schema Regions",id:"schema-regions",children:[]},{value:"Schema Version",id:"schema-version",children:[]},{value:"C Text Echo",id:"c-text-echo",children:[]},{value:"Enumerations",id:"enumerations",children:[]},{value:"Cursor Lifetime",id:"cursor-lifetime",children:[]},{value:"Procedure Calls and Exceptions",id:"procedure-calls-and-exceptions",children:[]},{value:"Control Flow with &quot;Big Moves&quot;",id:"control-flow-with-big-moves",children:[]},{value:"Getting access to external code",id:"getting-access-to-external-code",children:[]},{value:"Regular Data Manipulation Language (DML)",id:"regular-data-manipulation-language-dml",children:[]},{value:"Variable and Cursor declarations",id:"variable-and-cursor-declarations",children:[]},{value:"Query Plans",id:"query-plans",children:[]},{value:"Fetching Data from a Cursor or from Loose Data",id:"fetching-data-from-a-cursor-or-from-loose-data",children:[]},{value:"Control Flow",id:"control-flow",children:[]},{value:"Manual Control of Results",id:"manual-control-of-results",children:[]},{value:"CTEs and Shared Fragments",id:"ctes-and-shared-fragments",children:[]}],b={rightToc:c};function d(e){var t=e.components,n=Object(i.a)(e,l);return Object(o.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"This is a brief discussion of every statement type and some general best practices for that statement.\nThe statements are in mostly alphabetical order except related statements were moved up in the order\nto make logical groups."),Object(o.b)("p",null,"Refer also to Appendix 7: CQL Anti-patterns."),Object(o.b)("h3",{id:"data-definition-language-ddl"},"Data Definition Language (DDL)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ALTER TABLE ADD COLUMN")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CREATE INDEX")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CREATE PROC")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CREATE TABLE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CREATE TRIGGER")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CREATE VIEW")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CREATE VIRTUAL TABLE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DROP INDEX")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DROP TABLE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DROP TRIGGER")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DROP VIEW"))),Object(o.b)("p",null,"These statements almost never appear in normal procedures and generally should be avoided.  The normal way of handling schema in CQL\nis to have one or more files declare all the schema you need and then let CQL create a schema upgrader for you.  This means you'll\nnever manually drop tables or indices etc.  The ",Object(o.b)("inlineCode",{parentName:"p"},"create")," declarations with their annotations will totally drive the schema."),Object(o.b)("p",null,"Any ad hoc DDL is usually a very bad sign.  Test code is an obvious exception to this as it often does setup and teardown\nof schema to set up things for the test."),Object(o.b)("h3",{id:"ad-hoc-migrations"},"Ad Hoc Migrations"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@SCHEMA_AD_HOC_MIGRATION"))),Object(o.b)("p",null,"This is a special upgrade step that should be taken at the version indicated in the statement.  These can be quite complex and even super important\nbut should not be used lightly.  Any migration procedure has to be highly tolerant of a variety of incoming schema versions and previous partial successes.\nIn any case this directive should not appear in normal code.  It should be part of the schema DDL declarations."),Object(o.b)("h3",{id:"transactions"},"Transactions"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"BEGIN TRANSACTION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"COMMIT TRANSACTION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ROLLBACK TRANSACTION"))),Object(o.b)("p",null,'Transactions do not nest and most procedures do not know the context in which they will be called, so the vast majority of\nprocedures will not and should not actually start transactions.  You can only do this if you know, somehow, for sure, that\nthe procedure in question is somehow a "top level" procedure.  So generally, don\'t use these statements.'),Object(o.b)("h3",{id:"savepoints"},"Savepoints"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"SAVEPOINT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ROLLBACK TO SAVEPOINT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"RELEASE SAVEPOINT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"PROC SAVEPOINT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"COMMIT RETURN")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"ROLLBACK RETURN"))),Object(o.b)("p",null,"Savepoints are the preferred tool for having interim state that can be rolled back if needed.  You can use ad hoc\nsavepoints, just give your save point and name then use ",Object(o.b)("inlineCode",{parentName:"p"},"RELEASE SAVEPOINT")," to commit it, or else ",Object(o.b)("inlineCode",{parentName:"p"},"ROLLBACK TO SAVEPOINT"),"\nfollowed by a ",Object(o.b)("inlineCode",{parentName:"p"},"RELEASE")," to abort it.  Note that you always ",Object(o.b)("inlineCode",{parentName:"p"},"RELEASE")," savepoints in both the rollback and the commit case."),Object(o.b)("p",null,"Managing savepoints can be tricky, especially given the various error cases.  They combine nicely with ",Object(o.b)("inlineCode",{parentName:"p"},"TRY CATCH")," to do\nthis job.  However, even that is a lot of boilerplate.  The best way to use savepoints is with ",Object(o.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT BEGIN")," .. ",Object(o.b)("inlineCode",{parentName:"p"},"END"),";"),Object(o.b)("p",null,"When you use ",Object(o.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT"),", a savepoint is created for you with the name of your procedure.  When the block exits\nthe savepoint is released (committed).  However you also get an automatically generated try/catch block which will\nrollback the savepoint if anything inside the block were to invoke ",Object(o.b)("inlineCode",{parentName:"p"},"THROW"),".  Also, you may not use a regular ",Object(o.b)("inlineCode",{parentName:"p"},"RETURN"),"\ninside this block, you must use either ",Object(o.b)("inlineCode",{parentName:"p"},"ROLLBACK RETURN")," or ",Object(o.b)("inlineCode",{parentName:"p"},"COMMIT RETURN"),".  Both of these directly indicate the fate\nof the automatically generated statement when they run.  This gives you useful options to early-out (with no error)\nwhile keeping or abandoning any work in progress.  Of course you can use ",Object(o.b)("inlineCode",{parentName:"p"},"THROW")," to return an error and\nabandon the work in progress."),Object(o.b)("h3",{id:"compilation-options"},"Compilation options"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@ENFORCE_NORMAL")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@ENFORCE_POP")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@ENFORCE_PUSH")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@ENFORCE_RESET")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@ENFORCE_STRICT"))),Object(o.b)("p",null,'CQL allows you to specify a number of useful options such as "do not allow Window Functions" or "all foreign keys must choose some update or delete strategy".\nThese additional enforcements are designed to prevent errors.  Because of this they should be established once, somewhere central and they should be rarely\nif ever overridden.  For instance ',Object(o.b)("inlineCode",{parentName:"p"},"@ENFORCE_NORMAL WINDOW FUNCTION")," would allow you to use window functions again, but this is probably a bad idea. If\nstrict mode is on, disallowing them, that probably means your project is expected to target versions of SQLite that do not have window functions.  Overriding\nthat setting is likely to lead to runtime errors."),Object(o.b)("p",null,"In general you don't want to see these options in most code."),Object(o.b)("h3",{id:"previous-schema"},"Previous Schema"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@PREVIOUS_SCHEMA"))),Object(o.b)("p",null,"CQL can ensure that the current schema is compatible with the previous schema, meaning that an upgrade script could reasonably be generated to go from the\nprevious to the current.  This directive demarks the start of the previous schema section when that validation happens.  This directive is useless except\nfor creating that schema validation so it should never appear in normal procedures."),Object(o.b)("h3",{id:"schema-regions"},"Schema Regions"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@BEGIN_SCHEMA_REGION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@DECLARE_DEPLOYABLE_REGION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@DECLARE_SCHEMA_REGION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@END_SCHEMA_REGION"))),Object(o.b)("p",null,"CQL allows you to declare arbitrary schema regions and limit what parts of the schema any given region may consume.  This helps you to prevent schema from getting\nentangled.  There is never a reason to use this directives inside normal procedures;  They should appear only in your schema declaration files."),Object(o.b)("h3",{id:"schema-version"},"Schema Version"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@SCHEMA_UPGRADE_SCRIPT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@SCHEMA_UPGRADE_VERSION"))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"@SCHEMA_UPGRADE_SCRIPT")," directive is only used by CQL itself to declare that the incoming file is an autogenerated schema upgrade script.\nThese scripts have slightly different rules for schema declaration that are not useful outside of such scripts.  So you should never use this."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"@SCHEMA_UPGRADE_VERSION")," on the other hand is used if you are creating a manual migration script.  You need this script to run in the context\nof the schema version that it affects.  Use this directive at the start of the file to do so.  Generally manual migration scripts are to be\navoided so hopefully this directive is rarely if ever used."),Object(o.b)("h3",{id:"c-text-echo"},"C Text Echo"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@ECHO"))),Object(o.b)("p",null,"This directive emits plain text directly into the compiler's output stream.  It can be invaluable for adding new runtime features and for ensuring that\n(e.g.) additional ",Object(o.b)("inlineCode",{parentName:"p"},"#include")," or ",Object(o.b)("inlineCode",{parentName:"p"},"#define")," directives are present in the output but you can really break things by over-using this feature.  Most parts\nof the CQL output are subject to change so any use of this should be super clean.  The intended use was, as mentioned, to allow an extra ",Object(o.b)("inlineCode",{parentName:"p"},"#include")," in your code\nso that CQL could call into some library.  Most uses of this combine with ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE FUNCTION")," or ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE")," to declare an external entity."),Object(o.b)("h3",{id:"enumerations"},"Enumerations"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DECLARE ENUM")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"@EMIT_ENUMS"))),Object(o.b)("p",null,"Avoid embedded constants whenever possible.  Instead declare a suitable enumeration.   Use ",Object(o.b)("inlineCode",{parentName:"p"},"@EMIT_ENUMS Some_Enum")," to get the enumeration\nconstants into the generated .h file for C. But be sure to do this only from one compiland.  You do not want the enumerations in every .h file.\nChoose a single .sql file (not included by lots of other things) to place the ",Object(o.b)("inlineCode",{parentName:"p"},"@EMIT_ENUMS")," directive. You can make a file specifically for this\npurpose if nothing else is serviceable."),Object(o.b)("h3",{id:"cursor-lifetime"},"Cursor Lifetime"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CLOSE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"OPEN"))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"OPEN")," statement is a no-op, SQLite has no such notion.  It was included because it is present in ",Object(o.b)("inlineCode",{parentName:"p"},"MYSQL")," and other variants and its inclusion can\nease readability sometimes.  But it does nothing.   The ",Object(o.b)("inlineCode",{parentName:"p"},"CLOSE")," statement is normally not necessary because all cursors are closed at the end of the\nprocedure they are declared in (unless they are boxed, see below).  You only need ",Object(o.b)("inlineCode",{parentName:"p"},"CLOSE"),' if you want to close a global cursor (which has no scope)\nor if you want to close a local cursor "sooner" because waiting to the end of the procedure might be a very long time.  Using close more than once\nis safe, the second and later close operations do nothing.'),Object(o.b)("h3",{id:"procedure-calls-and-exceptions"},"Procedure Calls and Exceptions"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CALL")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"THROW")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"TRY CATCH"))),Object(o.b)("p",null,"Remember that if you call a procedure and it uses ",Object(o.b)("inlineCode",{parentName:"p"},"THROW")," or else uses some SQL that failed, this return code will cause your\ncode to ",Object(o.b)("inlineCode",{parentName:"p"},"THROW")," when the procedure returns.  Normally that's exactly what you want, the error will ripple out and some top-level\n",Object(o.b)("inlineCode",{parentName:"p"},"CATCH")," will cause a ",Object(o.b)("inlineCode",{parentName:"p"},"ROLLBACK")," and the top level callers sees the error.  If you have your own rollback needs be sure to install\nyour own ",Object(o.b)("inlineCode",{parentName:"p"},"TRY"),"/",Object(o.b)("inlineCode",{parentName:"p"},"CATCH")," block or else use ",Object(o.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT")," as above to do it for you."),Object(o.b)("p",null,"Inside of a ",Object(o.b)("inlineCode",{parentName:"p"},"CATCH")," block you can use the special variable ",Object(o.b)("inlineCode",{parentName:"p"},"@RC")," to see the most recent return code from SQLite."),Object(o.b)("h3",{id:"control-flow-with-big-moves"},'Control Flow with "Big Moves"'),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"CONTINUE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"LEAVE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"RETURN"))),Object(o.b)("p",null,"These work as usual but beware, you can easily use any of these to accidentally leave a block with a savepoint or transaction\nand you might skip over the ",Object(o.b)("inlineCode",{parentName:"p"},"ROLLBACK")," or ",Object(o.b)("inlineCode",{parentName:"p"},"COMMIT")," portions of the logic.  Avoid this problem by using ",Object(o.b)("inlineCode",{parentName:"p"},"PROC SAVEPOINT"),"."),Object(o.b)("h3",{id:"getting-access-to-external-code"},"Getting access to external code"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DECLARE FUNCTION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DECLARE SELECT FUNCTION")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DECLARE PROCEDURE"))),Object(o.b)("p",null,"The best practice is to put any declarations into a shared header file which you can ",Object(o.b)("inlineCode",{parentName:"p"},"#include")," in all the places it is needed.\nThis is especially important should you have to forward declare a procedure.  CQL normally provides exports for all procedures\nso you basically get an automatically generated and certain-to-be-correct ",Object(o.b)("inlineCode",{parentName:"p"},"#include")," file.  But, if the procedures are being compiled\ntogether then an export file won't have been generated yet at the time you need it;  To work around this you use the ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE"),"\nform.  However, procedure declarations are tricky;  they include not just the type of the arguments but the types of any/all of the\ncolumns in any result set the procedure might have.  This must not be wrong or callers will get unpredictable failures."),Object(o.b)("p",null,"The easiest way to ensure it is correct is to use the same trick as you would in C -- make sure that you ",Object(o.b)("inlineCode",{parentName:"p"},"#include")," the declaration\nthe in the translation unit with the definition.  If they don't match there will be an error."),Object(o.b)("p",null,"A very useful trick: the error will include the exact text of the correct declaration.  So if you don't know it, or are too lazy to\nfigure it out; simply put ",Object(o.b)("inlineCode",{parentName:"p"},"ANY")," declaration in the shared header file and then paste in the correct declaration from the error.  should\nthe definition ever change you will get a compilation error which you can again harvest to get the correct declaration."),Object(o.b)("p",null,"In this way you can be sure the declarations are correct."),Object(o.b)("p",null,"Functions have no CQL equivalent, but they generally don't change very often.  Use ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE FUNCTION")," to allow access to some C code\nthat returns a result of some kind.   Be sure to add the ",Object(o.b)("inlineCode",{parentName:"p"},"CREATE")," option if the function returns a reference that the caller owns."),Object(o.b)("p",null,"Use ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE SELECT FUNCTION")," to tell CQL about any User Defined Functions you have added to SQLite so that it knows how to call them.\nNote that CQL does not register those UDFs, it couldn't make that call lacking the essential C information required to do so.  If you\nfind that you are getting errors when calling a UDF the most likely reason for the failure is that the UDF was declared but never\nregistered with SQLite at runtime.  This happens in test code a lot -- product code tends to have some central place to register the\nUDFs and it normally runs at startup, e.g. right after the schema is upgraded."),Object(o.b)("h3",{id:"regular-data-manipulation-language-dml"},"Regular Data Manipulation Language (DML)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DELETE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"INSERT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"SELECT")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"UPDATE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"UPSERT"))),Object(o.b)("p",null,"These statements are the most essential and they'll appear in almost every procedure. There are a few general best practices we can go over."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Try to do as much as you can in one batch rather than iterating;  e.g."),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},"don't write a loop with a ",Object(o.b)("inlineCode",{parentName:"li"},"DELETE")," statement that deletes one row if you can avoid it, write a delete statement that deletes all you need to delete"),Object(o.b)("li",{parentName:"ul"},"don't write a loop with of ",Object(o.b)("inlineCode",{parentName:"li"},"SELECT")," statement that fetches one row, try to fetch all the rows you need with one select"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Make sure ",Object(o.b)("inlineCode",{parentName:"p"},"UPSERT")," is supported on the SQLite system you are using, older versions do not support it")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Don't put unnecessary casts in your ",Object(o.b)("inlineCode",{parentName:"p"},"SELECT")," statements, they just add fat")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Don't use ",Object(o.b)("inlineCode",{parentName:"p"},"CASE"),"/",Object(o.b)("inlineCode",{parentName:"p"},"WHEN")," to compute a boolean, the boolean operations are more economical (e.g. use ",Object(o.b)("inlineCode",{parentName:"p"},"IS"),")")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Don't use ",Object(o.b)("inlineCode",{parentName:"p"},"COUNT")," if all you need to know is whether a row exists or not, use ",Object(o.b)("inlineCode",{parentName:"p"},"EXISTS"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Don't use ",Object(o.b)("inlineCode",{parentName:"p"},"GROUP BY"),", ",Object(o.b)("inlineCode",{parentName:"p"},"ORDER BY"),", or ",Object(o.b)("inlineCode",{parentName:"p"},"DISTINCT")," on large rowsets, the sort is expensive and it will make your ",Object(o.b)("inlineCode",{parentName:"p"},"SELECT")," statements write to disk rather than just read")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"Always use the ",Object(o.b)("inlineCode",{parentName:"p"},"INSERT INTO FOO USING")," form of the ",Object(o.b)("inlineCode",{parentName:"p"},"INSERT")," statement, it's much easier to read than the standard form and compiles to the same thing"))),Object(o.b)("h3",{id:"variable-and-cursor-declarations"},"Variable and Cursor declarations"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DECLARE OUT CALL")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"DECLARE")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"LET")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"SET"))),Object(o.b)("p",null,"These are likely to appear all over as well.  If you can avoid a variable declaration by using ",Object(o.b)("inlineCode",{parentName:"p"},"LET")," then do so;  The code will be more concise and you'll\nget the exact variable type you need.  This is the same as ",Object(o.b)("inlineCode",{parentName:"p"},"var x = foo();")," in other languages.  Once the variable is declared use ",Object(o.b)("inlineCode",{parentName:"p"},"SET"),"."),Object(o.b)("p",null,"You can save yourself a lot of declarations of ",Object(o.b)("inlineCode",{parentName:"p"},"OUT")," variables with ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE OUT CALL"),".  That declaration form automatically declares the ",Object(o.b)("inlineCode",{parentName:"p"},"OUT")," variables used\nin the call you are about to make with the correct type.  If the number of arguments changes you just have to add the args you don't have to also add\nnew declarations."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"LIKE")," construct can be used to let you declare things whose type is the same as another thing.  Patterns like ",Object(o.b)("inlineCode",{parentName:"p"},"DECLARE ARGS CURSOR LIKE FOO ARGUMENTS"),'\nsave you a lot of typing and also enhance correctness.  There\'s a whole chapter dedicated to "shapes" defined by ',Object(o.b)("inlineCode",{parentName:"p"},"LIKE"),"."),Object(o.b)("h3",{id:"query-plans"},"Query Plans"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"EXPLAIN"))),Object(o.b)("p",null,"Explain can be used in front of other queries to generate a plan.  The way SQLite handles this is that you fetch the rows of the plan as usual.  So basically\n",Object(o.b)("inlineCode",{parentName:"p"},"EXPLAIN")," is kind of like ",Object(o.b)("inlineCode",{parentName:"p"},"SELECT QUERY PLAN OF"),".  This hardly ever comes up in normal coding.  CQL has an output option where it will generate code that gives you\nthe query plan for a procedures queries rather than the normal body of the procedure."),Object(o.b)("h3",{id:"fetching-data-from-a-cursor-or-from-loose-data"},"Fetching Data from a Cursor or from Loose Data"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"FETCH")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"UPDATE CURSOR"))),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"FETCH")," statement has many variations, all are useful at some time or another. There are a few helpful guidelines."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"If fetching from loose values into a cursor use the ",Object(o.b)("inlineCode",{parentName:"li"},"FETCH USING")," form (as you would with ",Object(o.b)("inlineCode",{parentName:"li"},"INSERT INTO USING"),") because it is less error prone"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"FETCH INTO")," is generally a bad idea, you'll have to declare a lot of variables, instead just rely on automatic storage in the cursor e.g.\n",Object(o.b)("inlineCode",{parentName:"li"},"fetch my_cursor")," rather than ",Object(o.b)("inlineCode",{parentName:"li"},"fetch my_cursor into a, b, c")),Object(o.b)("li",{parentName:"ul"},"If you have data already in a cursor you can mutate some of the columns using ",Object(o.b)("inlineCode",{parentName:"li"},"UPDATE CURSOR"),", this can let you adjust values or apply defaults")),Object(o.b)("h3",{id:"control-flow"},"Control Flow"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"IF")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"LOOP")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"SWITCH")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"WHILE"))),Object(o.b)("p",null,"These are your bread and butter and they will appear all over.  One tip: Use the ",Object(o.b)("inlineCode",{parentName:"p"},"ALL VALUES")," variant of switch whenever possible to ensure that you haven't missed any cases."),Object(o.b)("h3",{id:"manual-control-of-results"},"Manual Control of Results"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"OUT"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("inlineCode",{parentName:"p"},"OUT UNION"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you know you are producing exactly one row ",Object(o.b)("inlineCode",{parentName:"p"},"OUT")," is more economical than ",Object(o.b)("inlineCode",{parentName:"p"},"SELECT"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If you need complete flexibility on what rows to produce (e.g. skip some, add extras, mutate some) then ",Object(o.b)("inlineCode",{parentName:"p"},"OUT UNION")," will give you that, use it only when needed, it's more expensive than just ",Object(o.b)("inlineCode",{parentName:"p"},"SELECT")))),Object(o.b)("h3",{id:"ctes-and-shared-fragments"},"CTEs and Shared Fragments"),Object(o.b)("p",null,"To understand what kinds of things you can reasonably do with fragments, really you\njust have to understand the things that you can do with common table expressions or\nCTEs.  For those who don't know, CTEs are the things you declare\nin the WITH clause of a SELECT statement.  They're kind of like local views.  Well,\nactually, they are exactly like local views."),Object(o.b)("p",null,"Query fragments help you to define useful CTEs so basically what you can do\neconomically in a CTE directly determines what you can do economically in a fragment."),Object(o.b)("p",null,"To demonstrate some things that happen with CTEs we're going to use these three\nboring tables."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"create table A\n(\n   id integer primary key,\n   this text not null\n);\n\ncreate table B\n(\n   id integer primary key,\n   that text not null\n);\n\ncreate table C\n(\n   id integer primary key,\n   other text not null\n);\n")),Object(o.b)("p",null,"Let's start with a very simple example, the first few examples are like control cases."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nselect * from A\ninner join B on B.id = A.id;\n\nQUERY PLAN\n|--SCAN TABLE A\n\\--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"OK as we can see ",Object(o.b)("inlineCode",{parentName:"p"},"A")," is not constrained so it has to be scanned but ",Object(o.b)("inlineCode",{parentName:"p"},"B")," isn't scanned,\nwe use its primary key for the join.  This is the most common kind of join: a search\nbased on a key of the table you are joining to."),Object(o.b)("p",null,"Let's make it a bit more realistic."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nselect * from A\ninner join B on B.id = A.id\nwhere A.id = 5;\n\nQUERY PLAN\n|--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n\\--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"Now ",Object(o.b)("inlineCode",{parentName:"p"},"A")," is constrained by the ",Object(o.b)("inlineCode",{parentName:"p"},"WHERE")," clause so we can use its index and then use the ",Object(o.b)("inlineCode",{parentName:"p"},"B")," index.\nSo we get a nice economical join from ",Object(o.b)("inlineCode",{parentName:"p"},"A")," to ",Object(o.b)("inlineCode",{parentName:"p"},"B")," and no scans at all."),Object(o.b)("p",null,"Now suppose we try this with some CTE replacements for ",Object(o.b)("inlineCode",{parentName:"p"},"A")," and ",Object(o.b)("inlineCode",{parentName:"p"},"B"),".  Does this make it worse?"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nwith\n  AA(id, this) as (select * from A),\n  BB(id, that) as (select * from B)\nselect * from AA\nleft join BB on BB.id = AA.id\nwhere AA.id = 5;\n\nQUERY PLAN\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n\\--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"The answer is a resounding no.  The CTE ",Object(o.b)("inlineCode",{parentName:"p"},"AA")," was not materialized it was expanded in place,\nas was the CTE ",Object(o.b)("inlineCode",{parentName:"p"},"BB"),".  We get ",Object(o.b)("em",{parentName:"p"},"exactly")," the same query plan.  Now this means that the\ninner expressions like ",Object(o.b)("inlineCode",{parentName:"p"},"select * from A")," could have been fragments such as:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"@attribute(cql:shared_fragment)\ncreate proc A_()\nbegin\n  select * from A;\nend;\n\n@attribute(cql:shared_fragment)\ncreate proc B_()\nbegin\n  select * from B;\nend;\n\nexplain query plan\nwith\n  (call A_()),    -- short for A_(*) AS (call A_())\n  (call B_())     -- short for B_(*) AS (call B_())\nselect * from A_\nleft join B_ on B_.id = A_.id\nwhere A_.id = 5;\n")),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"Note:")," I'll use the convention that ",Object(o.b)("inlineCode",{parentName:"p"},"A_")," is the fragment proc that could have generated the CTE ",Object(o.b)("inlineCode",{parentName:"p"},"AA"),",\nlikewise with ",Object(o.b)("inlineCode",{parentName:"p"},"B_")," and so forth."),Object(o.b)("p",null,"The above will expand into exactly what we had before and hence will have the exactly\nsame good query plan.  Of course this is totally goofy, why make a fragment like that --\nit's just more typing.  Well now lets generalize the fragments just a bit."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},'@attribute(cql:shared_fragment)\ncreate proc A_(experiment bool not null)\nbegin\n  -- data source might come from somewhere else due to an experiment\n  if not experiment then\n    select * from A;\n  else\n    select id, this from somewhere_else;\n  end if;\nend;\n\n@attribute(cql:shared_fragment)\ncreate proc B_()\nbegin\n  -- we don\'t actually refer to "B" if the filter is null\n  if b_filter is not null then\n    -- applies b_filter if specified\n    select * from B where B.other like b_filter;\n  else\n    -- generates the correct shape but zero rows of it\n    select null as id, null as that where false;\n  end if;\nend;\n\ncreate proc getAB(\n    id_ integer not null,\n    experiment bool not null,\n    b_filter text)\nbegin\n  with\n    (call A_(experiment)),\n    (call B_(b_filter))\n  select * from A_\n  left join B_ on B_.id = A_.id\n  where A_.id = id_;\nend;\n')),Object(o.b)("p",null,"The above now has 4 combos economically encoded and all of them have a good plan.\nImportantly though, if ",Object(o.b)("inlineCode",{parentName:"p"},"b_filter")," is not specified then we don't actually join to ",Object(o.b)("inlineCode",{parentName:"p"},"B"),".\nThe ",Object(o.b)("inlineCode",{parentName:"p"},"B_")," CTE will have no reference to ",Object(o.b)("inlineCode",{parentName:"p"},"B"),", it just has zero rows."),Object(o.b)("p",null,"Now lets look at some things you don't want to do."),Object(o.b)("p",null,"Consider this form:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nwith\n  AA(id, this) as (select * from A),\n  BB(id, that) as (select A.id, B.that from A left join B on B.id = A.id)\nselect * from AA\nleft join BB on BB.id = AA.id\nwhere AA.id = 5;\n\nQUERY PLAN\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n\\--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"Note that here we get 3 joins.  Now a pretty cool thing happened here -- even though the expression\nfor ",Object(o.b)("inlineCode",{parentName:"p"},"BB")," does not include a ",Object(o.b)("inlineCode",{parentName:"p"},"WHERE")," clause SQLite has figured out the ",Object(o.b)("inlineCode",{parentName:"p"},"AA.id")," being 5 forces ",Object(o.b)("inlineCode",{parentName:"p"},"A.id")," to be 5\nwhich in turn gives a constraint on ",Object(o.b)("inlineCode",{parentName:"p"},"BB"),". Nice job SQLite.  If it hadn't been able to figure that out\nthen the expansion of ",Object(o.b)("inlineCode",{parentName:"p"},"BB")," would have resulted in a table scan."),Object(o.b)("p",null,"Still, 3 joins is bad when we only need 2 joins to do the job.  What happened?  Well, when we did\nthe original fragments with extensions and stuff we saw this same pattern in fragment code.\nBasically the fragment for ",Object(o.b)("inlineCode",{parentName:"p"},"BB")," isn't just doing the ",Object(o.b)("inlineCode",{parentName:"p"},"B")," things it's restarting from ",Object(o.b)("inlineCode",{parentName:"p"},"A")," and doing its\nown join to get ",Object(o.b)("inlineCode",{parentName:"p"},"B"),". This results in a wasted join.  And it might result in a lot of work on the ",Object(o.b)("inlineCode",{parentName:"p"},"A")," table\nas well if the filtering was more complex and couldn't be perfectly inferred."),Object(o.b)("p",null,"You might think, \"oh, no problem, I can save this, I'll just refer to ",Object(o.b)("inlineCode",{parentName:"p"},"AA")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"A"),' in the second query."'),Object(o.b)("p",null,"This does not help (but it's going in the right direction):"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nwith\n  AA(id, this) as (select * from A),\n  BB(id, that) as (select AA.id, B.that from AA left join B on B.id = AA.id)\nselect * from AA\nleft join BB on BB.id = AA.id\nwhere AA.id = 5;\n\nQUERY PLAN\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n\\--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"In terms of fragments the anti-pattern is this."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"@attribute(cql:shared_fragment)\ncreate proc B_()\nbegin\n  select B.* from A left join B on B.id = A.id;\nend;\n")),Object(o.b)("p",null,"The above starts the query for ",Object(o.b)("inlineCode",{parentName:"p"},"B")," again from the root.  You can save this, the trick is to not\ntry to generate just the ",Object(o.b)("inlineCode",{parentName:"p"},"B")," columns and then join them later.  You can get a nice data\nflow going with chain of CTEs."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nwith\n  AA(id, this) as (select * from A),\n  AB(id, this, that) as (select AA.*, B.that from AA left join B on B.id = AA.id)\nselect * from AB\nwhere AB.id = 5;\n\nQUERY PLAN\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n\\--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"And we're right back to the perfect plan.  The good form creates a CTE chain\nwhere we only need the result of the final CTE.  A straight line of CTEs\neach depending on the previous one results in a excellent data flow."),Object(o.b)("p",null,"In terms of fragments this is now:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"@attribute(cql:shared_fragment)\ncreate proc A_()\nbegin\n  select * from A;\nend;\n\n@attribute(cql:shared_fragment)\ncreate proc AB_()\nbegin\n  with\n  (call A_)\n  select A_.*, B.that from A_ left join B on B.id = A_.id\nend;\n\nwith (call AB_())\nselect * from AB_ where AB_.id = 5;\n")),Object(o.b)("p",null,"For brevity I didn't include the possibility of using IF and such.  Another option\nthat makes the same good query plan.  We can generalize ",Object(o.b)("inlineCode",{parentName:"p"},"AB_")," so that it doesn't know\nwhere the base data is coming from and can be used in more cases."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"@attribute(cql:shared_fragment)\ncreate proc A_()\nbegin\n  select * from A;\nend;\n\n@attribute(cql:shared_fragment)\ncreate proc AB_()\nbegin\n  with\n  source(*) like A -- you must provide some source that is the same shape as A\n  select source.*, B.that from source left join B on B.id = source.id\nend;\n\nwith\n(call A_())\n(call AB_() using A_ as source)\nselect * from AB_ where AB_.id = 5;\n")),Object(o.b)("p",null,"Again this results in a nice straight chain of CTEs and even though the where\nclause is last the A table is constrained properly."),Object(o.b)("p",null,"It's important not to fork the chain... if you do that then whatever\ncame before the fork must be materialized for use in both branches.\nThat can be quite bad because then the filtering might come after the\nmaterialization.  This is an example that is quite bad."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nwith\n  AA(id, this) as (select * from A),\n  BB(id, that) as (select AA.id, B.that from AA left join B on B.id = AA.id),\n  CC(id, other) as (select AA.id, C.other from AA left join C on C.id = AA.id)\nselect * from AA\nleft join BB on BB.id = AA.id\nleft join CC on CC.id = AA.id\nwhere AA.id = 5;\n\nQUERY PLAN\n|--MATERIALIZE 2\n|  |--SCAN TABLE A\n|  \\--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n|--MATERIALIZE 3\n|  |--SCAN TABLE A\n|  \\--SEARCH TABLE C USING INTEGER PRIMARY KEY (rowid=?)\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n|--SCAN SUBQUERY 2\n\\--SEARCH SUBQUERY 3 USING AUTOMATIC COVERING INDEX (id=?)\n")),Object(o.b)("p",null,"Things have gone way of the rails here. As you can see ",Object(o.b)("inlineCode",{parentName:"p"},"A")," is now\nscanned twice. and there are many more joins.  We could make this\na lot better by moving the A condition all the way up into the first\nCTE.  With fragments that would just mean creating something like"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"@attribute(cql:shared_fragment)\ncreate proc A_(id_)\nbegin\n  select * from A where A.id = id_;\nend;\n")),Object(o.b)("p",null,"At least then if we have to materialize we'll get only one row.  This could be\na good thing to do universally, but it's especially important if you know that\nforking in the query shape is mandatory for some reason."),Object(o.b)("p",null,"A better pattern might be this:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sql"},"explain query plan\nwith\n  AA(id, this) as (select * from A),\n  AB(id, this, that) as (select AA.*, B.that from AA left join B on B.id = AA.id),\n  ABC(id, this, that, other) as (select AB.*, C.other from AB left join C on C.id = AB.id)\nselect * from ABC\nwhere ABC.id = 5;\n\nQUERY PLAN\n|--SEARCH TABLE A USING INTEGER PRIMARY KEY (rowid=?)\n|--SEARCH TABLE B USING INTEGER PRIMARY KEY (rowid=?)\n\\--SEARCH TABLE C USING INTEGER PRIMARY KEY (rowid=?)\n")),Object(o.b)("p",null,"Here we've just extended the chain.  With shared fragments you could easily build an\n",Object(o.b)("inlineCode",{parentName:"p"},"AB_")," proc as before and then build an ",Object(o.b)("inlineCode",{parentName:"p"},"ABC_")," proc either by calling ",Object(o.b)("inlineCode",{parentName:"p"},"AB_")," directly or by\nhaving a table parameter that is ",Object(o.b)("inlineCode",{parentName:"p"},"LIKE AB_"),"."),Object(o.b)("p",null,"Both cases will give you a great plan."),Object(o.b)("p",null,"So the most important things are:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Avoid forking the chain of CTEs/fragments, a straight chain works great."),Object(o.b)("li",{parentName:"ul"},"Avoid re-joining to tables, even unconstrained CTEs result in great plans if they don't have to be materialized."),Object(o.b)("li",{parentName:"ul"},"If you do need to fork in your CTE chain, because of your desired shape, be sure to move as many filters as you can further upstream so that by the time you materialize only a very small number of rows need to be materialiized.")),Object(o.b)("p",null,"These few rules will go far in helping you to create shapes."),Object(o.b)("p",null,"One last thing, without shared fragments, if you wanted to create a large 10 way join or something you had to type that\njoin into your file and it would be very much in your face.  Now that join might be hidden from you in a nice easy-to-use\nfragment.  Which you might then decide you want to use 3 times... And now with a tiny amount of code you have 30 joins."),Object(o.b)("p",null,"The thing is shared fragments make it easy to generate a lot of SQL.  It's not bad that shared fragments make things easy,\nbut with great power comes great responsibility, so give a care as to what it is you are assembling.  Understanding\nyour fragments, especially any big ones, will help you to create great code."))}d.isMDXComponent=!0}}]);