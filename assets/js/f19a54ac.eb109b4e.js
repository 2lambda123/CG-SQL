"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8476],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return p},MDXProvider:function(){return c},mdx:function(){return y},useMDXComponents:function(){return s},withMDXComponents:function(){return d}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(){return a=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e},a.apply(this,arguments)}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function u(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=r.createContext({}),d=function(e){return function(n){var t=s(n.components);return r.createElement(e,a({},n,{components:t}))}},s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),d=s(t),c=o,f=d["".concat(i,".").concat(c)]||d[c]||m[c]||a;return t?r.createElement(f,l(l({ref:n},p),{},{components:t})):r.createElement(f,l({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=f;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var p=2;p<a;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},12779:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return s}});var r=t(83117),o=t(80102),a=(t(67294),t(3905)),i=["components"],l={id:"playground",title:"CG/SQL Playground",sidebar_label:"Playground"},u=void 0,p={unversionedId:"playground",id:"playground",title:"CG/SQL Playground",description:"CQL Playground",source:"@site/../docs/playground.md",sourceDirName:".",slug:"/playground",permalink:"/docs/playground",draft:!1,tags:[],version:"current",frontMatter:{id:"playground",title:"CG/SQL Playground",sidebar_label:"Playground"},sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/docs/getting-started"},next:{title:"Developer Notes",permalink:"/docs/dev-notes"}},d={},s=[{value:"CQL Playground",id:"cql-playground",level:2},{value:"Query Plan Playground",id:"query-plan-playground",level:2}],c={toc:s};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,a.mdx)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.mdx)("h2",{id:"cql-playground"},"CQL Playground"),(0,a.mdx)("p",null,"While we do not offer an interactive REPL environment, we have bootstrapped an environment to run simple CQL programs in the ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/CG-SQL/tree/main/sources/repl"},(0,a.mdx)("inlineCode",{parentName:"a"},"repl")," folder of our repository"),". You can run it by doing this from the CQL repository:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-bash"},"$ cd repl\n$ ./go.sh\n")),(0,a.mdx)("p",null,"By default, you'll get this output:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"../out/cql ready\nCQL Mini App Thingy\nHello from CQL.\nEdit as you please\n")),(0,a.mdx)("p",null,(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/CG-SQL/tree/main/sources/repl/go.sh"},(0,a.mdx)("inlineCode",{parentName:"a"},"go.sh"))," runs the ",(0,a.mdx)("inlineCode",{parentName:"p"},"go()")," stored procedure defined in ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/CG-SQL/tree/main/sources/repl/go.sql"},(0,a.mdx)("inlineCode",{parentName:"a"},"go.sql")),". You can experiment with the CQL language by editing the ",(0,a.mdx)("inlineCode",{parentName:"p"},"go.sql")," file, as you please."),(0,a.mdx)("p",null,"The contents of ",(0,a.mdx)("inlineCode",{parentName:"p"},"go.sh")," also offers a basic demonstration of how CQL should be typically used to transpile files into a C executable."),(0,a.mdx)("h2",{id:"query-plan-playground"},"Query Plan Playground"),(0,a.mdx)("p",null,"Within the same ",(0,a.mdx)("inlineCode",{parentName:"p"},"repl")," directory, we have a script that demonstrates ",(0,a.mdx)("a",{parentName:"p",href:"/cql-guide/ch15"},"CQL's query plan generation feature")," with ",(0,a.mdx)("a",{parentName:"p",href:"https://github.com/facebookincubator/CG-SQL/tree/main/sources/repl/go.sql"},"go.sql"),"."),(0,a.mdx)("p",null,"Run this script in the ",(0,a.mdx)("inlineCode",{parentName:"p"},"/repl")," directory of the CQL repository:"),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-bash"},"$ cd repl\n$ ./go_query_plan.sh\n")),(0,a.mdx)("p",null,"The script will generate the output of ",(0,a.mdx)("inlineCode",{parentName:"p"},"EXPLAIN QUERY PLAN")," of the SQL statements used in ",(0,a.mdx)("inlineCode",{parentName:"p"},"go.sql"),"."),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre",className:"language-json"},'["Query", "Stat", "Graph"],\n[\n  "INSERT INTO my_table(str) VALUES(\\"Hello from CQL.\\"), (\\"Edit as you please.\\")",\n  [\n    [],\n    [{"value": "SCAN", "style": {"fontSize": 14, "color": "red", "fontWeight": "bold"}}, {"value": 1, "style": {"fontSize": 14, "color": "red", "fontWeight": "bold"}}],\n    []\n  ],\n  "\\n?\\n|...SCAN 2 CONSTANT ROWS"\n],\n[\n  "SELECT *\\n  FROM my_table",\n  [\n    [],\n    [{"value": "SCAN", "style": {"fontSize": 14, "color": "red", "fontWeight": "bold"}}, {"value": 1, "style": {"fontSize": 14, "color": "red", "fontWeight": "bold"}}],\n    []\n  ],\n  "\\n?\\n|...SCAN TABLE my_table"\n],\n')),(0,a.mdx)("admonition",{type:"info"},(0,a.mdx)("p",{parentName:"admonition"},"You might notice the above output has a lot of extraneous stuff, like what seems to be CSS styling in JSON format. This is something that will be addressed in the future. In the meantime, you can use ",(0,a.mdx)("a",{parentName:"p",href:"https://stedolan.github.io/jq/"},"something like ",(0,a.mdx)("inlineCode",{parentName:"a"},"jq"))," to filter stuff out. For example:"),(0,a.mdx)("pre",{parentName:"admonition"},(0,a.mdx)("code",{parentName:"pre",className:"language-bash"},'$ ./go_query_plan.sh | jq \'.[0][0][1:-1][] | {"query": .[0], "explain": .[2]}\'\n'))))}m.isMDXComponent=!0}}]);