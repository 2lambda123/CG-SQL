"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5249],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return h}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(r),h=o,m=d["".concat(c,".").concat(h)]||d[h]||p[h]||a;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},4696:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return p}});var n=r(3117),o=r(102),a=(r(7294),r(3905)),i=["components"],l={slug:"error-tracing-intro",title:"Introducing General Purpose Error Tracing",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql","errors"]},c=void 0,s={permalink:"/blog/error-tracing-intro",editUrl:"https://github.com/facebookincubator/CG-SQL/edit/master/website/blog/blog/2020-11-16-error-tracing.md",source:"@site/blog/2020-11-16-error-tracing.md",title:"Introducing General Purpose Error Tracing",description:"Today we made a couple of minor changes in the code generation to take care of some lingering issues.",date:"2020-11-16T00:00:00.000Z",formattedDate:"November 16, 2020",tags:[{label:"facebook",permalink:"/blog/tags/facebook"},{label:"cg-sql",permalink:"/blog/tags/cg-sql"},{label:"errors",permalink:"/blog/tags/errors"}],readingTime:2.87,hasTruncateMarker:!1,authors:[{name:"CG/SQL Team",title:"Maintainer of CG/SQL",url:"https://github.com/facebookincubator",imageURL:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4"}],frontMatter:{slug:"error-tracing-intro",title:"Introducing General Purpose Error Tracing",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql","errors"]},prevItem:{title:"Error Tracing Helper Macro",permalink:"/blog/error-tracing-macro"},nextItem:{title:'More Flexible Cursor Patterns Using "Boxing"',permalink:"/blog/boxed-cursors-intro"}},u={authorsImageUrls:[void 0]},p=[],d={toc:p};function h(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Today we made a couple of minor changes in the code generation to take care of some lingering issues."),(0,a.kt)("p",null,"The first is that when you did a ",(0,a.kt)("inlineCode",{parentName:"p"},"throw")," inside a ",(0,a.kt)("inlineCode",{parentName:"p"},"catch")," to basically rethrow the error, you would lose\nthe error code if something had succeeded within the catch handler."),(0,a.kt)("p",null,"The old codegen looked something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'  catch_start_1: {\n    printf("error\\n");\n    cql_best_error(&_rc_)\n    goto cql_cleanup;\n  }\n')),(0,a.kt)("p",null,"The problem being that while the ",(0,a.kt)("inlineCode",{parentName:"p"},"printf")," above is fine and well, if you did any SQL operation then ",(0,a.kt)("inlineCode",{parentName:"p"},"_rc_")," would be\nclobbered and you'd end up throwing an unrelated error code.   ",(0,a.kt)("inlineCode",{parentName:"p"},"cql_best_error")," would at least make sure it was\na failure code (",(0,a.kt)("inlineCode",{parentName:"p"},"SQLITE_ERROR"),") but the original error code was lost."),(0,a.kt)("p",null,"The new code looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'  catch_start_1: {\n    _rc_thrown_ = _rc_;\n    printf("error\\n");\n    _rc_ = cql_best_error(_rc_thrown_);\n    goto cql_cleanup;\n  }\n')),(0,a.kt)("p",null,"So now if there are db operations, the original return code is still preserved.  Note:  you still lose ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlite3_errmsg()")," because\nSQLite doesn't know that cleanup logic is running."),(0,a.kt)("p",null,"This brings us to the second new thing: general purpose error traces."),(0,a.kt)("p",null,"Error checking of result codes happens very consistently in CQL output.  The usual pattern looks something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'  _rc_ = cql_exec(_db_,\n    "SAVEPOINT base_proc_savepoint");\n  if (_rc_ != SQLITE_OK) goto cql_cleanup;\n')),(0,a.kt)("p",null,"or if it's inside a try block a little different... very little actually"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'  // try\n  {\n    _rc_ = cql_exec(_db_,\n      "RELEASE SAVEPOINT base_proc_savepoint");\n    if (_rc_ != SQLITE_OK) goto catch_start_8;\n    // ... the rest of the try block\n  }\n')),(0,a.kt)("p",null,"Basically if the local ",(0,a.kt)("inlineCode",{parentName:"p"},"_rc_")," doersn't match the necessary condition we ",(0,a.kt)("inlineCode",{parentName:"p"},"goto")," the appropriate error label... either the relevant\ncatch block or else the procedure's cleanup code."),(0,a.kt)("p",null,"We generalize this a bit now so that it looks like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},"  if (_rc_ != SQLITE_OK) { cql_error_trace(); goto cql_cleanup; }\n\n-- or, in a catch...\n\n  if (_rc_ != SQLITE_OK) { cql_error_trace(); goto catch_start_8; }\n")),(0,a.kt)("p",null,"Now the default implementation of ",(0,a.kt)("inlineCode",{parentName:"p"},"cql_error_trace()")," is in ",(0,a.kt)("inlineCode",{parentName:"p"},"cqlrt.h")," which you can and should customize. I'll be writing more\nabout that later but suffice to say you're supposed to replace ",(0,a.kt)("inlineCode",{parentName:"p"},"cqlrt.h")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cqlrt.c")," with suitable runtime helpers for your environment\nwhile keeping ",(0,a.kt)("inlineCode",{parentName:"p"},"cqlrt_common.h")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"cqlrt_common.c")," fixed."),(0,a.kt)("p",null,"So for instance, your ",(0,a.kt)("inlineCode",{parentName:"p"},"cqlrt.h")," could look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'#ifndef CQL_TRACING_ENABLED\n#define cql_error_trace()\n#else\n// whatever tracing you want, for example this might help in test code.\n#define cql_error_trace() \\\n  fprintf(stderr, "Error at %s:%d in %s: %d %s\\n", __FILE__, __LINE__, _PROC_, _rc_, sqlite3_errmsg(_db_))\n#endif\n')),(0,a.kt)("p",null,"So then when you need to debug problems involving lots of error recovery you can watch the entire chain of events easily."),(0,a.kt)("p",null,"Note that there are some useful variables there:"),(0,a.kt)("p",null,"In any procedure ",(0,a.kt)("inlineCode",{parentName:"p"},"_db_")," is the current database and ",(0,a.kt)("inlineCode",{parentName:"p"},"_rc_")," is the most recent return code from SQLite.  ",(0,a.kt)("inlineCode",{parentName:"p"},"__FILE__")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"__LINE__"),"\nof course come from the preprocessor.  and ",(0,a.kt)("inlineCode",{parentName:"p"},"_PROC_")," (one underscore) is now generated by the compiler.  Every procedure's\nbody now begins with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'#undef _PROC_\n#define _PROC_ "the_current_procedure"\n')),(0,a.kt)("p",null,"So by defining your own cql_error_trace macro you can cause whatever logging you need to happen.  Note this can be\nvery expensive indeed because this happens a lot and even the string literals needed are a significant cost. So generally\nthis should be off for production builds and enabled as needed for debug builds."),(0,a.kt)("p",null,"The default implementation is just an empty block"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"#define cql_error_trace()\n")),(0,a.kt)("p",null,"But the hook is enough to light up whatever logging you might need, and you can use ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlite3_errmsg()")," before that message is gone."),(0,a.kt)("p",null,"Good hunting."))}h.isMDXComponent=!0}}]);