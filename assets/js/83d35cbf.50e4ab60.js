"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7709],{3905:function(e,n,t){t.r(n),t.d(n,{MDXContext:function(){return u},MDXProvider:function(){return p},mdx:function(){return h},useMDXComponents:function(){return m},withMDXComponents:function(){return c}});var o=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(){return r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var o in t)Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o])}return e},r.apply(this,arguments)}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=o.createContext({}),c=function(e){return function(n){var t=m(n.components);return o.createElement(e,r({},n,{components:t}))}},m=function(e){var n=o.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=m(e.components);return o.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=m(t),p=a,f=c["".concat(l,".").concat(p)]||c[p]||d[p]||r;return t?o.createElement(f,s(s({ref:n},u),{},{components:t})):o.createElement(f,s({ref:n},u))}));function h(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var r=t.length,l=new Array(r);l[0]=f;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s.mdxType="string"==typeof e?e:a,l[1]=s;for(var u=2;u<r;u++)l[u]=t[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},93618:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return i},default:function(){return d},frontMatter:function(){return s},metadata:function(){return u},toc:function(){return m}});var o=t(83117),a=t(80102),r=(t(67294),t(3905)),l=["components"],s={slug:"columns-sugar",title:"Using the LIKE form in the SELECT statement",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql"]},i=void 0,u={permalink:"/blog/columns-sugar",editUrl:"https://github.com/facebookincubator/CG-SQL/edit/master/website/blog/blog/2022-02-03-columns-sugar.md",source:"@site/blog/2022-02-03-columns-sugar.md",title:"Using the LIKE form in the SELECT statement",description:'One of the signature features of the CQL language is the ability to use the "LIKE" form to',date:"2022-02-03T00:00:00.000Z",formattedDate:"February 3, 2022",tags:[{label:"facebook",permalink:"/blog/tags/facebook"},{label:"cg-sql",permalink:"/blog/tags/cg-sql"}],readingTime:3.68,hasTruncateMarker:!1,authors:[{name:"CG/SQL Team",title:"Maintainer of CG/SQL",url:"https://github.com/facebookincubator",imageURL:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4"}],frontMatter:{slug:"columns-sugar",title:"Using the LIKE form in the SELECT statement",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql"]},prevItem:{title:"Introducing Expression Fragments",permalink:"/blog/expression-frags"},nextItem:{title:"Control Flow Analysis in CQL",permalink:"/blog/flow-analysis"}},c={authorsImageUrls:[void 0]},m=[],p={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,l);return(0,r.mdx)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.mdx)("p",null,'One of the signature features of the CQL language is the ability to use the "LIKE" form to\nslice out columns that conform to a shape.  This notion appears in many places in the language.\nFor instance if I have a table ',(0,r.mdx)("inlineCode",{parentName:"p"},"Foo"),". I can make a cursor for that shape like so:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"declare C cursor like Foo;\n")),(0,r.mdx)("p",null,"Which says I want the columns of ",(0,r.mdx)("inlineCode",{parentName:"p"},"C")," to be like the columns of ",(0,r.mdx)("inlineCode",{parentName:"p"},"Foo"),"."),(0,r.mdx)("p",null,"If I have a cursor ",(0,r.mdx)("inlineCode",{parentName:"p"},"D")," that has the ",(0,r.mdx)("inlineCode",{parentName:"p"},"Foo")," columns but maybe more and maybe in a different order I can load ",(0,r.mdx)("inlineCode",{parentName:"p"},"C"),"\nas follows:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"fetch C from D(like Foo)\n")),(0,r.mdx)("p",null,"Which again saves me from having to list all the (potentially dozens) of Foo columns.  This construct is in many places:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"declare proc P(like Foo)\nbegin\n  insert into Foo from arguments;\nend;\n")),(0,r.mdx)("p",null,"even"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-sql"},"declare proc P(f like Foo, b like Bar)\nbegin\n  insert into Foo from f;\n  insert into Bar from b;\nend;\n")),(0,r.mdx)("p",null,"And other examples...  This is discussed more fully in\n",(0,r.mdx)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch05#reshaping-data-cursor-like-forms"},"Chapter 5")," of the Guide."),(0,r.mdx)("p",null,"However, one of the few places that shapes are interesting but not supported was in the select list.\nAnd so, just a couple of days ago, we added the ",(0,r.mdx)("inlineCode",{parentName:"p"},"COLUMNS")," construct to the language which allows for\na sugared syntax for extracting columns in bulk.  It's kind of a generalization of the ",(0,r.mdx)("inlineCode",{parentName:"p"},"select T.*"),"\npattern but with CQL-style slicing and type-checking."),(0,r.mdx)("p",null,"These forms are supported:"),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"columns from a join table or tables")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-- same as A.*\nselect columns(A) from ...;\n\n-- same as A.*, B.*\nselect columns(A, B) from ...;\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"columns from a particular join table that match a shape")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-- the columns of A that match the shape Foo\nselect columns(A like Foo) from ...;\n\n-- get the Foo shape from A and the Far shape from B\nselect columns(A like Foo, B like Bar) from ...;\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"columns from any join table that match a shape")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"--- get the Foo shape from anywhere in the join\nselect columns(like Foo) from ...;\n\n-- get the Foo and Bar shapes, from anywhere in the join\nselect columns(like Foo, like Bar) from ...;\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"specific columns")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-- x and y columns plus the foo shape\nselect columns(T1.x, T2.y, like Foo) from ...;\n")),(0,r.mdx)("ul",null,(0,r.mdx)("li",{parentName:"ul"},"distinct columns from the above (not distinct values!)")),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-- removes duplicate column names\n-- e.g. there will be one copy of 'pk'\nselect columns(distinct A, B) from A join B using(pk);\n\n-- if both Foo and Bar have an (e.g.) 'id' field you only get one copy\nselect columns(distinct like Foo, like Bar) from ...;\n\n-- if a specific column is mentioned it is always included\n-- but later clauses that are not a specific column will avoid it\n-- if F or B has an x it won't appear again, just T.x\nselect columns(distinct T.x, F like Foo, B like Bar) from F, B ..;\n")),(0,r.mdx)("p",null,"Of course this is all just sugar, so it all ends up being a column list with table\nqualifications -- but the syntax is very powerful.  For instance, for narrowing a\nwide table, or for fusing joins that share common keys"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"-- just the Foo columns\nselect columns(like Foo) from Superset_Of_Foo_From_Many_Joins_Even;\n\n-- only one copy of 'pk'\nselect columns(distinct A,B,C) from\n  A join B using (pk) join C using (pk);\n")),(0,r.mdx)("p",null,"And of course you can define shapes however you like and then use them\nto slice off column chucks of your choice.  There are many ways to build\nup shapes from other shapes.  Probably the easiest is to declare procedures\nthat return the shape you want and never actual create them.  E.g."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre"},"declare proc shape1() (x integer, y real, z text);\ndeclare proc shape2() (like shape1, u bool, v bool);\n")),(0,r.mdx)("p",null,"With this combination you can easily define common column shapes and slice them\nout of complex queries without having to type the columns names over and over..."),(0,r.mdx)("p",null,"Note that the ",(0,r.mdx)("inlineCode",{parentName:"p"},"COLUMNS(...)")," form is not a general replacement for the select list.\nFor instance, general expressions are not allowed inside of ",(0,r.mdx)("inlineCode",{parentName:"p"},"COLUMNS(...)")," but,\nwhere extraction of lots of columns is needed, or even re-ordering of colummns,\nit's a very good option indeed and it composes well with the other ",(0,r.mdx)("inlineCode",{parentName:"p"},"select")," features."),(0,r.mdx)("p",null,"This was the last significant area where shapes are useful but totally absent."))}d.isMDXComponent=!0}}]);