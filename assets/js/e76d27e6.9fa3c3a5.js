"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5127],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},c=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=u(r),m=o,b=h["".concat(i,".").concat(m)]||h[m]||p[m]||a;return r?n.createElement(b,s(s({ref:t},c),{},{components:r})):n.createElement(b,s({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=h;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var u=2;u<a;u++)s[u]=r[u];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}h.displayName="MDXCreateElement"},8702:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return p}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),s=["components"],l={slug:"boxed-cursors-intro",title:'More Flexible Cursor Patterns Using "Boxing"',author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql","cursors"]},i=void 0,u={permalink:"/blog/boxed-cursors-intro",editUrl:"https://github.com/facebookincubator/CG-SQL/edit/master/website/blog/blog/2020-11-15-boxed-cursors.md",source:"@site/blog/2020-11-15-boxed-cursors.md",title:'More Flexible Cursor Patterns Using "Boxing"',description:"I was reviewing the update posting that just went out and I realized I'd forgotten to mention another big ticket item. So",date:"2020-11-15T00:00:00.000Z",formattedDate:"November 15, 2020",tags:[{label:"facebook",permalink:"/blog/tags/facebook"},{label:"cg-sql",permalink:"/blog/tags/cg-sql"},{label:"cursors",permalink:"/blog/tags/cursors"}],readingTime:3.66,truncated:!1,authors:[{name:"CG/SQL Team",title:"Maintainer of CG/SQL",url:"https://github.com/facebookincubator",imageURL:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4"}],frontMatter:{slug:"boxed-cursors-intro",title:'More Flexible Cursor Patterns Using "Boxing"',author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql","cursors"]},prevItem:{title:"Introducing General Purpose Error Tracing",permalink:"/blog/error-tracing-intro"},nextItem:{title:"One Month Update",permalink:"/blog/update"}},c={authorsImageUrls:[void 0]},p=[],h={toc:p};function m(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},h,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"I was reviewing the update posting that just went out and I realized I'd forgotten to mention another big ticket item. So\nconsider this an appendix to the update."),(0,a.kt)("p",null,'In some cases we started seeing a need to "ship cursors around" a little bit more flexibly.\nNote shipping values around is already doable so this new work is largely about being able to create a "statement cursor"\nin one procedure and consume it safely elsewhere.  The general pattern looks like this:'),(0,a.kt)("p",null,"Declare a statement cursor as usual, maybe something like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"declare C cursor for select * from shape_source;\n\n-- or\n\ndeclare C cursor for call proc_that_returns_a_shape();\n")),(0,a.kt)("p",null,"Make an object that can hold a cursor:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"declare obj object<T cursor>;\n")),(0,a.kt)("p",null,"Where ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," is the name of a shape. It can be a table name, or a view name, or it can be the name of the canonical procedure that returns the result.  You really want this to be  some kind of global name though.  Something you can get with a ",(0,a.kt)("inlineCode",{parentName:"p"},"#include")," in various places. In this case choices for ",(0,a.kt)("inlineCode",{parentName:"p"},"T")," might be ",(0,a.kt)("inlineCode",{parentName:"p"},"shape_source")," the table or ",(0,a.kt)("inlineCode",{parentName:"p"},"proc_that_returns_a_shape")," the procedure."),(0,a.kt)("p",null,"Remember you can always make a fake procedure that returns a result to sort of typedef a shape name.  e.g."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"declare proc my_shape() (id integer not null, name text);\n")),(0,a.kt)("p",null,"The procedure here ",(0,a.kt)("inlineCode",{parentName:"p"},"my_shape")," doesn\u2019t have to actually ever be created, in fact it\u2019s probably better if it doesn\u2019t.  You won\u2019t call it, you\u2019re just using its hypothetical result as a shape.  This could be useful if you have several procedures like ",(0,a.kt)("inlineCode",{parentName:"p"},"proc_that_returns_a_shape")," that all return ",(0,a.kt)("inlineCode",{parentName:"p"},"my_shape"),"."),(0,a.kt)("p",null,"At this point you could use the cursor maybe something like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"loop fetch C\nbegin\n  -- do stuff with C\nend;\n")),(0,a.kt)("p",null,"Those are the usual patterns and they let you consume statement cursors sort of \u201cup\u201d from where it was created, but what if you want some worker procedures that consume a cursor there is no good way to pass your cursor down again.  Well, there wasn't. Now there is.  Let's go back to that box object creation and use it"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- recap: declare the box that holds the cursor (T changed to my_shape for this example)\ndeclare obj object<my_shape cursor>;\n\n-- box the cursor into the object (the cursor shape must match the box shape)\nset obj from cursor C;\n")),(0,a.kt)("p",null,"The variable ",(0,a.kt)("inlineCode",{parentName:"p"},"obj"),' can now be passed around as usual.  Then, later, you can "unbox" it to get a cursor back. Like so'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- unboxing a cursor from an object\ndeclare D cursor for obj;\n")),(0,a.kt)("p",null,"These primitives will allow cursors to be passed around with managed lifetime.\nExample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- consumes a cursor\ncreate proc cursor_user(box object<my_shape cursor>)\nbegin\n   declare C cursor for box;  -- the cursors shape will be my_shape matching box\n   loop fetch C\n   begin\n      -- do something with C\n   end;\nend;\n\n-- captures a cursor and passes it on\ncreate proc cursor_boxer()\nbegin\n   declare C cursor for select * from something_like_my_shape;\n   declare box object<my_shape cursor>\n   set box from cursor C; -- produces error if shape doesn't match\n   call cursor_user(box);\nend;\n")),(0,a.kt)("p",null,"Importantly, once you box a cursor the underlying SQLite statement\u2019s lifetime is managed by the box object with normal\nretain/release semantics so timely release becomes imperative."),(0,a.kt)("p",null,"With this pattern it's possible to, for instance, consume some of the rows in one procedure and the rest in another procedure."),(0,a.kt)("p",null,"Now, the main reason for doing this is if you have some standard helper methods that can get a cursor from a variety of places and process it.\nBut remember, that boxing isn\u2019t the usual pattern at all and returning cursors in a box, while possible, should be avoided in favor of the simpler\npattern of doing your ",(0,a.kt)("inlineCode",{parentName:"p"},"select")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"call")," at the end to compute the result as we do now, if only because then then lifetime is very simple in all those cases.\nDurably storing a boxed cursor could lead to all manner of problems -- it's just like holding on to a ",(0,a.kt)("inlineCode",{parentName:"p"},"sqlite3_stmt *"),' for a long time.\nActually "just like" is an understatement, it\'s ',(0,a.kt)("em",{parentName:"p"},"exactly")," the same as holding on to a statement for a long time with all the same problems because that\nis exactly what's going on here."),(0,a.kt)("p",null,"So, good generalization, but possibly less Pit of Success, especially with complex box patterns.  So watch the sharp edges."))}m.isMDXComponent=!0}}]);