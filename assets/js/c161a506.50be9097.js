"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[221],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return c}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),h=u(n),c=i,d=h["".concat(s,".").concat(c)]||h[c]||m[c]||l;return n?a.createElement(d,r(r({ref:t},p),{},{components:n})):a.createElement(d,r({ref:t},p))}));function c(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=h;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=n[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},2133:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return m}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),r=["components"],o={id:"ch13",title:"Chapter 13: JSON Output",sidebar_label:"Chapter 13: JSON Output"},s=void 0,u={unversionedId:"ch13",id:"ch13",title:"Chapter 13: JSON Output",description:"\x3c!---",source:"@site/../CQL_Guide/ch13.md",sourceDirName:".",slug:"/ch13",permalink:"/cql-guide/ch13",draft:!1,tags:[],version:"current",lastUpdatedBy:"Tim Cheung",lastUpdatedAt:1655502374,formattedLastUpdatedAt:"6/17/2022",frontMatter:{id:"ch13",title:"Chapter 13: JSON Output",sidebar_label:"Chapter 13: JSON Output"},sidebar:"someSidebar",previous:{title:"Chapter 12: Testability Features",permalink:"/cql-guide/ch12"},next:{title:"Chapter 14: CQL Query Fragments",permalink:"/cql-guide/ch14"}},p={},m=[{value:"Tables",id:"tables",level:4},{value:"Region Information",id:"region-information",level:4},{value:"Attributes",id:"attributes",level:4},{value:"Foreign Keys",id:"foreign-keys",level:4},{value:"Unique Keys",id:"unique-keys",level:4},{value:"Check Expressions",id:"check-expressions",level:4},{value:"Columns",id:"columns",level:4},{value:"Virtual Tables",id:"virtual-tables",level:4},{value:"Views",id:"views",level:4},{value:"Projections",id:"projections",level:4},{value:"Dependencies",id:"dependencies",level:4},{value:"Indices",id:"indices",level:4},{value:"Procedures",id:"procedures",level:4},{value:"Queries",id:"queries",level:4},{value:"Procedure Arguments",id:"procedure-arguments",level:4},{value:"General Inserts",id:"general-inserts",level:4},{value:"Simple Inserts",id:"simple-inserts",level:4},{value:"Updates",id:"updates",level:4},{value:"Deletes",id:"deletes",level:4},{value:"General",id:"general",level:4},{value:"Complex Procedure Arguments",id:"complex-procedure-arguments",level:4},{value:"Regions",id:"regions",level:4},{value:"Ad Hoc Migrations",id:"ad-hoc-migrations",level:4},{value:"Enums",id:"enums",level:4},{value:"Constant Groups",id:"constant-groups",level:4},{value:"Subscriptions",id:"subscriptions",level:4},{value:"Summary",id:"summary",level:4}],h={toc:m};function c(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'To help facilitate additional tools that might want to depend on CQL input files further down the toolchain, CQL includes a JSON output format for SQL DDL as well as stored procedure information, including special information for a single-statement DML.  "Single-statement DML" refers to those stored procedures that consist of a single ',(0,l.kt)("inlineCode",{parentName:"p"},"insert"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"select"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"update"),", or ",(0,l.kt)("inlineCode",{parentName:"p"},"delete"),".   Even though such procedures comprise just one statement, good argument binding can create very powerful DML fragments that are re-usable.  Many CQL stored procedures are of this form (in practice maybe 95% are just one statement.)"),(0,l.kt)("p",null,"To use CQL in this fashion, the sequence will be something like the below.  See Appendix 1 for command line details."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"cql --in input.sql --rt json_schema --cg out.json\n")),(0,l.kt)("p",null,"The output contains many different sections for the various types of entities that CQL can process.  There is a full description of\nthe possible outputs available at ",(0,l.kt)("a",{parentName:"p",href:"https://cgsql.dev/json-diagram"},"https://cgsql.dev/json-diagram"),"."),(0,l.kt)("p",null,"In the balance of this chapter we'll deal with the contents of the sections and their meaning rather than the specifics of the format,\nwhich are better described with the grammar above."),(0,l.kt)("h4",{id:"tables"},"Tables"),(0,l.kt)("p",null,'The "tables" section has zero or more tables, each table is comprised of these fields:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the table name"),(0,l.kt)("li",{parentName:"ul"},"crc : the schema CRC for the entire table definition, including columns and constraints"),(0,l.kt)("li",{parentName:"ul"},"isTemp : true if this is a temporary table"),(0,l.kt)("li",{parentName:"ul"},'ifNotExists : true if the table was created with "if not exists"'),(0,l.kt)("li",{parentName:"ul"},'withoutRowid : true if the table was created using "without rowid"'),(0,l.kt)("li",{parentName:"ul"},"isAdded : true if the table has an @create directive",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"addedVersion : optional, the schema version number in the @create directive"))),(0,l.kt)("li",{parentName:"ul"},"isDeleted : true if the table was marked with @delete or is currently ",(0,l.kt)("em",{parentName:"li"},"unsubscribed"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"deletedVersion : optional, the schema version number in the @delete directive"))),(0,l.kt)("li",{parentName:"ul"},"isRecreated : true if the table is marked with @recreate",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"recreateGroupName : optional, if the @recreate attribute specifies a group name, it is present here"))),(0,l.kt)("li",{parentName:"ul"},"unsubscribedVersion : optional, if the table was last unsubscribed, the version number when this happened"),(0,l.kt)("li",{parentName:"ul"},"resubscribedVersion : optional, if the table was last resubscribed, the version number when this happened"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},"indices : optional, a list of the names of the indices on this table, see the indices section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"columns")," : an array of column definitions, see the section on columns"),(0,l.kt)("li",{parentName:"ul"},"primaryKey : a list of column names, possibly empty if no primary key"),(0,l.kt)("li",{parentName:"ul"},"primaryKeySortOrders : a list of corresponding sort orders, possibly empty, for each column of the primary key if specified"),(0,l.kt)("li",{parentName:"ul"},"primaryKeyName : optional, the name of the primary key, if it has one"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"foreignKeys")," : a list of foreign keys for this table, possibly empty, see the foreign keys section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"uniqueKeys")," : a list of unique keys for this table, possibly empty, see the unique keys section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"checkExpressions")," : a list of check expressions for this table, possibly empty, see the check expression section")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"@attribute(an_attribute=(1,('foo', 'bar')))\nCREATE TABLE foo(\n  id INTEGER,\n  name TEXT\n);\n")),(0,l.kt)("p",null,"generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "foo",\n      "CRC" : "-1869326768060696459",\n      "isTemp" : 0,\n      "ifNotExists" : 0,\n      "withoutRowid" : 0,\n      "isAdded" : 0,\n      "isDeleted" : 0,\n      "isRecreated": 0,\n      "indices" : [ "foo_name" ],\n      "attributes" : [\n        {\n          "name" : "an_attribute",\n          "value" : [1, ["foo", "bar"]]\n        }\n      ],\n      "columns" : [\n        {\n          "name" : "id",\n          "type" : "integer",\n          "isNotNull" : 0,\n          "isAdded" : 0,\n          "isDeleted" : 0,\n          "isPrimaryKey" : 0,\n          "isUniqueKey" : 0,\n          "isAutoIncrement" : 0\n        },\n        {\n          "name" : "name",\n          "type" : "text",\n          "isNotNull" : 0,\n          "isAdded" : 0,\n          "isDeleted" : 0,\n          "isPrimaryKey" : 0,\n          "isUniqueKey" : 0,\n          "isAutoIncrement" : 0\n        }\n      ],\n      "primaryKey" : [  ],\n      "primaryKeySortOrders" : [  ],\n      "foreignKeys" : [\n      ],\n      "uniqueKeys" : [\n      ],\n      "checkExpressions" : [\n      ]\n    }\n')),(0,l.kt)("h4",{id:"region-information"},"Region Information"),(0,l.kt)("p",null,"Region Information can appear on many entities, it consists of two optional elements:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"region : optional, the name of the region in which the entity was defined"),(0,l.kt)("li",{parentName:"ul"},"deployedInRegion : optional, the deployment region in which that region is located")),(0,l.kt)("h4",{id:"attributes"},"Attributes"),(0,l.kt)("p",null,"Miscelleaneous attributes can be present on virtual every kind of entity.  They are optional.  The root node\nintroduces the attributes:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"attributes : a list at least one attribute")),(0,l.kt)("p",null,"Each attribute is a name and value pair:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : any string",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},'attribute names are often compound like "cql:shared_fragment"'),(0,l.kt)("li",{parentName:"ul"},"they are otherwise simple identifiers"))),(0,l.kt)("li",{parentName:"ul"},"value : any ",(0,l.kt)("em",{parentName:"li"},"attribute value"))),(0,l.kt)("p",null,"Each ",(0,l.kt)("em",{parentName:"p"},"attribute value")," can be:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"any literal"),(0,l.kt)("li",{parentName:"ul"},"an array of ",(0,l.kt)("em",{parentName:"li"},"attribute values"))),(0,l.kt)("p",null,"Since the ",(0,l.kt)("em",{parentName:"p"},"attribute values")," can nest its possible to represent arbitrarily complex data types in an attribute.  You can even represent a LISP program."),(0,l.kt)("h4",{id:"foreign-keys"},"Foreign Keys"),(0,l.kt)("p",null,"Foreign keys appear only in tables, the list of keys contains zero or more entries of this form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : optional, the name of the foreign key if specified"),(0,l.kt)("li",{parentName:"ul"},'columns : the names of the constrained columns in the current table (the "child" table)'),(0,l.kt)("li",{parentName:"ul"},"referenceTable : the name of the table that came after REFERENCES in the foreign key"),(0,l.kt)("li",{parentName:"ul"},"referenceColumns : the constraining columns in the referenced table"),(0,l.kt)("li",{parentName:"ul"},'onUpdate : the ON UPDATE action (e.g. "CASCADE", "NO ACTION", etc.)'),(0,l.kt)("li",{parentName:"ul"},'onDelete : the ON DELETE action (e.g. "CASCADE", "NO ACTION", etc.)'),(0,l.kt)("li",{parentName:"ul"},"isDeferred : boolean, indicating the deferred or not deferred setting for this foreign key")),(0,l.kt)("h4",{id:"unique-keys"},"Unique Keys"),(0,l.kt)("p",null,"Unique keys appear only in tables, the list of keys contains zero or more entries of this form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : optional, the name of the unique key if specified"),(0,l.kt)("li",{parentName:"ul"},"columns: a list of 1 or more contrained column names"),(0,l.kt)("li",{parentName:"ul"},"sortOrders: a list of corresponding sort orders for the columns")),(0,l.kt)("h4",{id:"check-expressions"},"Check Expressions"),(0,l.kt)("p",null,"Check Expressions appear only in tables, the list of keys contains zero or more entries of this form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : optional, the name of the unique key if specified"),(0,l.kt)("li",{parentName:"ul"},"checkExpr : the check expression in plain text"),(0,l.kt)("li",{parentName:"ul"},"checkExprArgs: an array of zero or more local variables that should be bound to the ",(0,l.kt)("inlineCode",{parentName:"li"},"?")," items in the check expression")),(0,l.kt)("p",null,"The checkExprArgs will almost certainly be the empty list ",(0,l.kt)("inlineCode",{parentName:"p"},"[]"),".  In the exceedingly rare situation that the table\nin question was defined in a procedure and some of parts of the check expression were arguments to that procedure\nthen the check expression is not fully known until that procedure runs and some of its literals will be decided\nat run time.  This is an extraordinary choice but technically possible."),(0,l.kt)("h4",{id:"columns"},"Columns"),(0,l.kt)("p",null,"Columns are themselves rather complex, there are 1 or more of them in each table.  The table will have\na list of records of this form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the columns"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},"type : the column type (e.g. bool, real, text, etc.)"),(0,l.kt)("li",{parentName:"ul"},"kind : optional, if the type is qualified by a discriminator such as int<task_id> it appears here"),(0,l.kt)("li",{parentName:"ul"},"isSensitive : optional, indicates a column that holds sensitive information such as PII"),(0,l.kt)("li",{parentName:"ul"},"isNotNull : true if the column is not null"),(0,l.kt)("li",{parentName:"ul"},"isAdded : true if the column has an @create directive",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"addedVersion : optional, the schema version number in the @create directive"))),(0,l.kt)("li",{parentName:"ul"},"isDeleted : true if the column was marked with @delete",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"deletedVersion : optional, the schema version number in the @delete directive"))),(0,l.kt)("li",{parentName:"ul"},"defaultValue : optional, can be any literal, the default value of the column"),(0,l.kt)("li",{parentName:"ul"},"collate : optional, the collation string (e.g. nocase)"),(0,l.kt)("li",{parentName:"ul"},"checkExpr : optional, the ",(0,l.kt)("em",{parentName:"li"},"check expression")," for this column (see the related section)"),(0,l.kt)("li",{parentName:"ul"},"isPrimaryKey : true if the column was marked with PRIMARY KEY"),(0,l.kt)("li",{parentName:"ul"},"isUniqueKey : true if the column was marked with UNIQUE"),(0,l.kt)("li",{parentName:"ul"},"isAutoIncrement : true if the column was marked with AUTOINCREMENT")),(0,l.kt)("h4",{id:"virtual-tables"},"Virtual Tables"),(0,l.kt)("p",null,'The "virtualTables" section is very similar to the "tables" section with zero or more virtual table entries.\nVirtual table entries are the same as table entries with the following additions:'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"module : the name of the module that manages this virtual table"),(0,l.kt)("li",{parentName:"ul"},"isEponymous : true if the virtual table was declared eponymous"),(0,l.kt)("li",{parentName:"ul"},"isVirtual : always true for virtual tables")),(0,l.kt)("p",null,"The JSON schema for these items was designed to be as similar as possible so that typically the same code can handle both\nwith possibly a few extra tests of the isVirtual field."),(0,l.kt)("h4",{id:"views"},"Views"),(0,l.kt)("p",null,"The views section contains the list of all views in the schema, it is zero or more view entires of this form."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the view name"),(0,l.kt)("li",{parentName:"ul"},"crc : the schema CRC for the entire view definition"),(0,l.kt)("li",{parentName:"ul"},"isTemp : true if this is a temporary view"),(0,l.kt)("li",{parentName:"ul"},"isDeleted : true if the view was marked with @delete",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"deletedVersion : optional, the schema version number in the @delete directive"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"columns")," : an array of column definitions, see the section on columns"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"projection")," : an array of projected columns from the view, the view result if you will, see the section on projections"),(0,l.kt)("li",{parentName:"ul"},"select : the text of the select statement that defined the view"),(0,l.kt)("li",{parentName:"ul"},'selectArgs : the names of arguments any unbound expressions ("?") in the view'),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"dependencies")," : several lists of tables and how they are used in the view, see the section on dependencies")),(0,l.kt)("p",null,"Note that the use of unbound expressions in a view truly extraordinary so selectArgs is essentially always going to be an empty list."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE VIEW MyView AS\nSELECT *\n  FROM foo\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "MyView",\n      "CRC" : "5545408966671198580",\n      "isTemp" : 0,\n      "isDeleted" : 0,\n      "projection" : [\n        {\n          "name" : "id",\n          "type" : "integer",\n          "isNotNull" : 0\n        },\n        {\n          "name" : "name",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "select" : "SELECT id, name FROM foo",\n      "selectArgs" : [  ],\n      "fromTables" : [ "foo" ],\n      "usesTables" : [ "foo" ]\n    }\n')),(0,l.kt)("h4",{id:"projections"},"Projections"),(0,l.kt)("p",null,"A projection defines the output shape of something that can return a table-like value such as a view or a procedure."),(0,l.kt)("p",null,"The projection consists of a list of one or more ",(0,l.kt)("em",{parentName:"p"},"projected columns"),", each of which is:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'name : the name of the result column  (e.g. in select 2 as foo) the name is "foo"'),(0,l.kt)("li",{parentName:"ul"},"type : the type of the column (e.g. text, real, etc.)"),(0,l.kt)("li",{parentName:"ul"},"kind : optional, the discriminator of the type if it has one (e.g. if the result is an ",(0,l.kt)("inlineCode",{parentName:"li"},"int<job_id>"),' the kind is "job_id")'),(0,l.kt)("li",{parentName:"ul"},"isSensitive : optional, true if the result is sensitive (e.g. PII or something like that)"),(0,l.kt)("li",{parentName:"ul"},"isNotNull : true if the result is known to be not null")),(0,l.kt)("h4",{id:"dependencies"},"Dependencies"),(0,l.kt)("p",null,"The dependencies section appears in many entities, it indicates things that were used by the object and how they were used.\nMost of the fields are optional, some fields are impossible in some contexts (e.g. inserts can happen inside of views)."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"insertTables : optional, a list of tables into which values were inserted"),(0,l.kt)("li",{parentName:"ul"},"updateTables : optional, a list of tables whose values were updated"),(0,l.kt)("li",{parentName:"ul"},"deleteTables : optional, a list of tables which had rows deleted"),(0,l.kt)("li",{parentName:"ul"},"fromTables : optional, a list of tables that appeared in a FROM clause (maybe indirectly inside a VIEW or CTE)"),(0,l.kt)("li",{parentName:"ul"},"usesProcedures : optional, a list of procedures that were accessed via CALL (not shared fragments, those are inlined)"),(0,l.kt)("li",{parentName:"ul"},"usesViews : optional, a list of views which were accessed (these are recursively visited to get to tables)"),(0,l.kt)("li",{parentName:"ul"},"usesTables : the list of tables that were used in any way at all by the current entity (i.e. the union of the previous table sections)")),(0,l.kt)("h4",{id:"indices"},"Indices"),(0,l.kt)("p",null,"The indices section contains the list of all indices in the schema, it is zero or more view entires of this form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the index name"),(0,l.kt)("li",{parentName:"ul"},"crc : the schema CRC for the entire index definition"),(0,l.kt)("li",{parentName:"ul"},"table : the name of the table with this index"),(0,l.kt)("li",{parentName:"ul"},"isUnique : true if this is a unique index"),(0,l.kt)("li",{parentName:"ul"},"ifNotExists : true if this index was created with IF NOT EXISTS"),(0,l.kt)("li",{parentName:"ul"},"isDeleted : true if the view was marked with @delete",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"deletedVersion : optional, the schema version number in the @delete directive"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},"where : optional, if this is partial index then this has the partial index where expression"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},"columns : the list of column names in the index"),(0,l.kt)("li",{parentName:"ul"},"sortOrders : the list of corresponding sort orders")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create index foo_name on foo(name);\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "foo_name",\n      "CRC" : "6055860615770061843",\n      "table" : "foo",\n      "isUnique" : 0,\n      "ifNotExists" : 0,\n      "isDeleted" : 0,\n      "columns" : [ "name" ],\n      "sortOrders" : [ "" ]\n    }\n\n')),(0,l.kt)("h4",{id:"procedures"},"Procedures"),(0,l.kt)("p",null,"The next several sections:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Queries"),(0,l.kt)("li",{parentName:"ul"},"Inserts"),(0,l.kt)("li",{parentName:"ul"},"General Inserts"),(0,l.kt)("li",{parentName:"ul"},"Updates"),(0,l.kt)("li",{parentName:"ul"},"Deletes"),(0,l.kt)("li",{parentName:"ul"},"General")),(0,l.kt)("p",null,'All provide information about various types of procedures.  Some "simple" procedures that consist only of the type of statement\ncorresond to their section (and some other rules) present additional information about their contents.  This can sometimes\nbe useful.  All the sections define certain common things about procedures so that basic information is available about\nall procedures.  This is is basically the contents of the "general" section which deals with procedures that have a complex\nbody of which little can be said.'),(0,l.kt)("h4",{id:"queries"},"Queries"),(0,l.kt)("p",null,"The queries section corresponds to the stored procedures that are a single SELECT statement with no fragments."),(0,l.kt)("p",null,"The fields of a query record are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the procedure"),(0,l.kt)("li",{parentName:"ul"},"definedInFile : the file that contains the procedure (the path is as it was specified to CQL so it might be relative or absolute)"),(0,l.kt)("li",{parentName:"ul"},"args : ",(0,l.kt)("em",{parentName:"li"},"procedure arguments")," see the relevant section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"dependencies")," : several lists of tables and how they are used in the view, see the section on dependencies"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"projection")," : an array of projected columns from the procedure, the view if you will, see the section on projections"),(0,l.kt)("li",{parentName:"ul"},"statement : the text of the select statement that is the body of the procedure"),(0,l.kt)("li",{parentName:"ul"},'statementArgs : a list of procedure arguments (possibly empty) that should be used to replace the corresonding "?" parameters in the statement')),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create proc p(name_ text)\nbegin\n  select * from foo where name = name_;\nend;\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "p",\n      "definedInFile" : "x",\n      "args" : [\n        {\n          "name" : "name_",\n          "argOrigin" : "name_",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "fromTables" : [ "foo" ],\n      "usesTables" : [ "foo" ],\n      "projection" : [\n        {\n          "name" : "id",\n          "type" : "integer",\n          "isNotNull" : 0\n        },\n        {\n          "name" : "name",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "statement" : "SELECT id, name FROM foo WHERE name = ?",\n      "statementArgs" : [ "name_" ]\n    }\n')),(0,l.kt)("h4",{id:"procedure-arguments"},"Procedure Arguments"),(0,l.kt)("p",null,"Procedure arguments have several generalities that don't come up very often but are important to describe.  The argument list\nof a procedure is 0 or more arguments of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the argument name, any valid identifier"),(0,l.kt)("li",{parentName:"ul"},"argOrigin : either the name repeated if it's just a name or a 3 part string if it came from a bundle, see below"),(0,l.kt)("li",{parentName:"ul"},"type : the type of the argument (e.g. text, real, etc.)"),(0,l.kt)("li",{parentName:"ul"},"kind : optional, the descriminated type if any e.g. in ",(0,l.kt)("inlineCode",{parentName:"li"},"int<job_id>"),' it\'s "job_id"'),(0,l.kt)("li",{parentName:"ul"},"isSensitive : optional, true if the argument is marked with @sensitive (e.g. it has PII etc.)"),(0,l.kt)("li",{parentName:"ul"},"isNotNull : true if the argument is declared not null")),(0,l.kt)("p",null,"An example of a simple argumenmt was shown above, if we change the example a little bit to use the argument bundle syntax\n(even though it's overkill) we can see the general form of argOrigin."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create proc p(a_foo like foo)\nbegin\n  select * from foo where name = a_foo.name or id = a_foo.id;\nend;\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "p",\n      "definedInFile" : "x",\n      "args" : [\n        {\n          "name" : "a_foo_id",\n          "argOrigin" : "a_foo foo id",\n          "type" : "integer",\n          "isNotNull" : 0\n        },\n        {\n          "name" : "a_foo_name",\n          "argOrigin" : "a_foo foo name",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "fromTables" : [ "foo" ],\n      "usesTables" : [ "foo" ],\n      "projection" : [\n        {\n          "name" : "id",\n          "type" : "integer",\n          "isNotNull" : 0\n        },\n        {\n          "name" : "name",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "statement" : "SELECT id, name FROM foo WHERE name = ? OR id = ?",\n      "statementArgs" : [ "a_foo_name", "a_foo_id" ]\n    }\n')),(0,l.kt)("p",null,"Note the synthetic names ",(0,l.kt)("inlineCode",{parentName:"p"},"a_foo_id")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"a_foo_name")," the argOrigin indicates that the bundle name is ",(0,l.kt)("inlineCode",{parentName:"p"},"a_foo"),"\nwhich could have been anything, the shape was ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," and the column in ",(0,l.kt)("inlineCode",{parentName:"p"},"foo")," was ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"name")," as appropriate."),(0,l.kt)("p",null,"The JSON is often used to generate glue code to call procedures from different languages.  The argOrigin can be useful if\nyou want to codegen something other normal arguments in your code."),(0,l.kt)("h4",{id:"general-inserts"},"General Inserts"),(0,l.kt)("p",null,"The general insert section corresponds to the stored procedures that are a single INSERT statement with no fragments.\nThe fields of a general insert record are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the procedure"),(0,l.kt)("li",{parentName:"ul"},"definedInFile : the file that contains the procedure (the path is as it was specified to CQL so it might be relative or absolute)"),(0,l.kt)("li",{parentName:"ul"},"args : ",(0,l.kt)("em",{parentName:"li"},"procedure arguments")," see the relevant section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"dependencies")," : several lists of tables and how they are used in the view, see the section on dependencies"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},"table : the name of the table the procedure inserts into"),(0,l.kt)("li",{parentName:"ul"},"statement : the text of the select statement that is the body of the procedure"),(0,l.kt)("li",{parentName:"ul"},'statementArgs : a list of procedure arguments (possibly empty) that should be used to replace the corresonding "?" parameters in the statement'),(0,l.kt)("li",{parentName:"ul"},'statementType : there are several insert forms such as "INSERT", "INSERT OR REPLACE", "REPLACE", etc.  the type is encoded here')),(0,l.kt)("p",null,"General inserts does not include the inserted values because they are not directly extractable in general.  This form is used if one of\nthese is true:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"insert from multiple value rows"),(0,l.kt)("li",{parentName:"ul"},"insert from a select statement"),(0,l.kt)("li",{parentName:"ul"},"insert using a ",(0,l.kt)("inlineCode",{parentName:"li"},"WITH")," clause"),(0,l.kt)("li",{parentName:"ul"},"insert using the upsert clause")),(0,l.kt)("p",null,'If fragments are in use then even "generalInsert" cannot capture everything and "general" must be used (see below).'),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},'create proc p()\nbegin\n  insert into foo values (1, "foo"), (2, "bar");\nend;\n')),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "p",\n      "definedInFile" : "x",\n      "args" : [\n      ],\n      "insertTables" : [ "foo" ],\n      "usesTables" : [ "foo" ],\n      "table" : "foo",\n      "statement" : "INSERT INTO foo(id, name) VALUES(1, \'foo\'), (2, \'bar\')",\n      "statementArgs" : [  ],\n      "statementType" : "INSERT",\n      "columns" : [ "id", "name" ]\n    }\n')),(0,l.kt)("h4",{id:"simple-inserts"},"Simple Inserts"),(0,l.kt)("p",null,'The vanilla inserts section can be used for procedures that just insert a single row.  This is a\nvery common case and if the JSON is being used to drive custom code generation it is useful\nto provide the extra information.  The data in this section is exactly the same as the General Inserts\nsection except that includes the inserted values.  The "values" property has this extra information.'),(0,l.kt)("p",null,"Each value in the values list corresponds 1:1 with a column and has this form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"value : the expression for this value"),(0,l.kt)("li",{parentName:"ul"},'valueArgs: the array of procedure arguments that should replace the "?" entries in the value')),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create proc p(like foo)\nbegin\n  insert into foo from arguments;\nend;\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "p",\n      "definedInFile" : "x",\n      "args" : [\n        {\n          "name" : "id_",\n          "argOrigin" : "foo id",\n          "type" : "integer",\n          "isNotNull" : 0\n        },\n        {\n          "name" : "name_",\n          "argOrigin" : "foo name",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "insertTables" : [ "foo" ],\n      "usesTables" : [ "foo" ],\n      "table" : "foo",\n      "statement" : "INSERT INTO foo(id, name) VALUES(?, ?)",\n      "statementArgs" : [ "id_", "name_" ],\n      "statementType" : "INSERT",\n      "columns" : [ "id", "name" ],\n      "values" : [\n        {\n          "value" : "?",\n          "valueArgs" : [ "id_" ]\n        },\n        {\n          "value" : "?",\n          "valueArgs" : [ "name_" ]\n        }\n      ]\n    }\n')),(0,l.kt)("h4",{id:"updates"},"Updates"),(0,l.kt)("p",null,"The updates section corresponds to the stored procedures that are a single UPDATE statement with no fragments. The\nfields of an update record are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the procedure"),(0,l.kt)("li",{parentName:"ul"},"definedInFile : the file that contains the procedure (the path is as it was specified to CQL so it might be relative or absolute)"),(0,l.kt)("li",{parentName:"ul"},"args : ",(0,l.kt)("em",{parentName:"li"},"procedure arguments")," see the relevant section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"dependencies")," : several lists of tables and how they are used in the view, see the section on dependencies"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},"table : the name of the table the procedure inserts into"),(0,l.kt)("li",{parentName:"ul"},"statement : the text of the update statement that is the body of the procedure"),(0,l.kt)("li",{parentName:"ul"},'statementArgs : a list of procedure arguments (possibly empty) that should be used to replace the corresonding "?" parameters in the statement')),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create proc p(like foo)\nbegin\n  update foo set name = name_ where id = id_;\nend;\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "p",\n      "definedInFile" : "x",\n      "args" : [\n        {\n          "name" : "id_",\n          "argOrigin" : "foo id",\n          "type" : "integer",\n          "isNotNull" : 0\n        },\n        {\n          "name" : "name_",\n          "argOrigin" : "foo name",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "updateTables" : [ "foo" ],\n      "usesTables" : [ "foo" ],\n      "table" : "foo",\n      "statement" : "UPDATE foo SET name = ? WHERE id = ?",\n      "statementArgs" : [ "name_", "id_" ]\n    }\n')),(0,l.kt)("h4",{id:"deletes"},"Deletes"),(0,l.kt)("p",null,"The deletes section corresponds to the stored procedures that are a single DELETE statement with no fragments. The\nfields of a delete record are exactly the same as those of update.  Those are the basic fields needed to bind any\nstatement."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create proc delete_proc (name_ text)\nbegin\n  delete from foo where name like name_;\nend;\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "delete_proc",\n      "definedInFile" : "x",\n      "args" : [\n        {\n          "name" : "name_",\n          "argOrigin" : "name_",\n          "type" : "text",\n          "isNotNull" : 0\n        }\n      ],\n      "deleteTables" : [ "foo" ],\n      "usesTables" : [ "foo" ],\n      "table" : "foo",\n      "statement" : "DELETE FROM foo WHERE name LIKE ?",\n      "statementArgs" : [ "name_" ]\n    }\n')),(0,l.kt)("h4",{id:"general"},"General"),(0,l.kt)("p",null,"And finally the section for procedures that were encountered that are not one of the simple prepared statement forms.  The principle reasons for being in this category are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the procedure has out arguments"),(0,l.kt)("li",{parentName:"ul"},"the procedure uses something other than a single DML statement"),(0,l.kt)("li",{parentName:"ul"},"the procedure has no projection (no result of any type)"),(0,l.kt)("li",{parentName:"ul"},"the procedure uses shared fragments and hence has complex argument binding")),(0,l.kt)("p",null,"The fields of a general procedure are something like a union of update and delete and query but with no statement info.  The are\nas follows:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the procedure"),(0,l.kt)("li",{parentName:"ul"},"definedInFile : the file that contains the procedure (the path is as it was specified to CQL so it might be relative or absolute)"),(0,l.kt)("li",{parentName:"ul"},"args : ",(0,l.kt)("em",{parentName:"li"},"complex procedure arguments")," see the relevant section"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"dependencies")," : several lists of tables and how they are used in the view, see the section on dependencies"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"region information")," : optional, see the section on Region Info"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"projection")," : optional, an array of projected columns from the procedure, the view if you will, see the section on projections"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"result_contract")," : optional,"),(0,l.kt)("li",{parentName:"ul"},"table : the name of the table the procedure inserts into"),(0,l.kt)("li",{parentName:"ul"},"statement : the text of the update statement that is the body of the procedure"),(0,l.kt)("li",{parentName:"ul"},'statementArgs : a list of procedure arguments (possibly empty) that should be used to replace the corresonding "?" parameters in the statement'),(0,l.kt)("li",{parentName:"ul"},"usesDatabase : true if the procedure requires you to pass in a sqlite connection to call it")),(0,l.kt)("p",null,"The result contract is at most one of these:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"hasSelectResult : true if the procedure generates its projection using SELECT"),(0,l.kt)("li",{parentName:"ul"},"hasOutResult: true if the procedure generates its projection using OUT"),(0,l.kt)("li",{parentName:"ul"},"hasOutUnionResult: true if the procedure generates its projection using OUT UNION")),(0,l.kt)("p",null,"A procedure that does not produce a result set in any way will set none of these and have no projection entry."),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'create proc with_complex_args (inout arg real)\nbegin\n  set arg := (select arg+1 as a);\n  select "foo" bar;\nend;\n')),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'      "name" : "with_complex_args",\n      "definedInFile" : "x",\n      "args" : [\n        {\n          "binding" : "inout",\n          "name" : "arg",\n          "argOrigin" : "arg",\n          "type" : "real",\n          "isNotNull" : 0\n        }\n      ],\n      "usesTables" : [  ],\n      "projection" : [\n        {\n          "name" : "bar",\n          "type" : "text",\n          "isNotNull" : 1\n        }\n      ],\n      "hasSelectResult" : 1,\n      "usesDatabase" : 1\n    }\n')),(0,l.kt)("h4",{id:"complex-procedure-arguments"},"Complex Procedure Arguments"),(0,l.kt)("p",null,'The complex form of the arguments allows for an optional "binding"'),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'binding : optional, if present it can take the value "out" or "inout"'),(0,l.kt)("li",{parentName:"ul"},'if absent then binding is the usual "in"')),(0,l.kt)("p",null,'Note that atypical binding forces procedures into the "general" section.'),(0,l.kt)("h4",{id:"regions"},"Regions"),(0,l.kt)("p",null,"The regions section contains a list of all the region definitions.  Each region is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the region"),(0,l.kt)("li",{parentName:"ul"},"isDeployableRoot : is this region itself a deployment region (declared with @declare_deployable_region)"),(0,l.kt)("li",{parentName:"ul"},'deployedInRegion : name, the deployment region that contains this region or "(orphan)" if none',(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"note that deploymentRegions form a forest"))),(0,l.kt)("li",{parentName:"ul"},"using : a list of zero or more parent regions"),(0,l.kt)("li",{parentName:"ul"},"usingPrivately: a list of zero more more booleans, one corresponding to each region",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the boolean is true if the inheritance is private, meaning that sub-regions cannot see the contents of the inherited region")))),(0,l.kt)("p",null,"There are more details on regions and the meaning of these terms in Chapter 10."),(0,l.kt)("h4",{id:"ad-hoc-migrations"},"Ad Hoc Migrations"),(0,l.kt)("p",null,"This section lists all of the declared ad hoc migrations.  Each entry is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the procedure to be called for the migration step"),(0,l.kt)("li",{parentName:"ul"},"crc : the CRC of this migration step, a hash of the call"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"attributes")," : optional, see the section on attributes, they appear in many places")),(0,l.kt)("p",null,"Exactly one of:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"version: optional, any positive integer, the version at which the migration runs, OR"),(0,l.kt)("li",{parentName:"ul"},"onRecreateOf: optional, if present indicates that the migration runs when the indicated group is recreated")),(0,l.kt)("p",null,"There are more details on ad hoc migrations in Chapter 10."),(0,l.kt)("h4",{id:"enums"},"Enums"),(0,l.kt)("p",null,"This section list all the enumeration types and values.  Each entry is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the enumeration"),(0,l.kt)("li",{parentName:"ul"},"type : the base type of the enumeration (e.g. INT, LONG)"),(0,l.kt)("li",{parentName:"ul"},'isNotNull: always true, all enum values are not null (here for symmetry with other uses of "type")'),(0,l.kt)("li",{parentName:"ul"},"values: a list of legal enumeration values")),(0,l.kt)("p",null,"Each enumeration value is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the value"),(0,l.kt)("li",{parentName:"ul"},"value : a numeric literal")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"declare enum an_enumeration integer ( x = 5, y = 12 );\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "an_enumeration",\n      "type" : "integer",\n      "isNotNull" : 1,\n      "values" : [\n        {\n          "name" : "x",\n          "value" : 5\n        },\n        {\n          "name" : "y",\n          "value" : 12\n        }\n      ]\n    }\n')),(0,l.kt)("h4",{id:"constant-groups"},"Constant Groups"),(0,l.kt)("p",null,"This section list all the constant groups and values.  Each entry is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the constant group"),(0,l.kt)("li",{parentName:"ul"},"values: a list of declared constant values, this can be of mixed type")),(0,l.kt)("p",null,"Each constant value is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"name : the name of the constant"),(0,l.kt)("li",{parentName:"ul"},"type : the base type of the constant (e.g. LONG, REAL, etc.)"),(0,l.kt)("li",{parentName:"ul"},"kind : optional, the type kind of the constant (this can be set with a CAST on a literal, e.g. CAST(1 as int<job_id>))"),(0,l.kt)("li",{parentName:"ul"},"isNotNull : true if the constant type is not null (which is anything but the NULL literal)"),(0,l.kt)("li",{parentName:"ul"},"value : the numeric or string literal value of the constant")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"declare const group some_constants (\n  x = cast(5 as integer<job_id>),\n  y = 12.0,\n  z = 'foo'\n);\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "name" : "some_constants",\n      "values" : [\n        {\n          "name" : "x",\n          "type" : "integer",\n          "kind" : "job_id",\n          "isNotNull" : 1,\n          "value" : 5\n        },\n        {\n          "name" : "y",\n          "type" : "real",\n          "isNotNull" : 1,\n          "value" : 1.200000e+01\n        },\n        {\n          "name" : "z",\n          "type" : "text",\n          "isNotNull" : 1,\n          "value" : "foo"\n        }\n      ]\n    }\n')),(0,l.kt)("h4",{id:"subscriptions"},"Subscriptions"),(0,l.kt)("p",null,"This section list all the schema subscriptions in non-decreasing order by version.  Each entry is of the form:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'type : either "unsub" or "resub"'),(0,l.kt)("li",{parentName:"ul"},"table : the target of the subscription directive"),(0,l.kt)("li",{parentName:"ul"},"version : the version at which this operation is to happen")),(0,l.kt)("p",null,"Example:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"@unsub(10, foo);\n@resub(15, foo);\n")),(0,l.kt)("p",null,"Generates:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'    {\n      "type" : "unsub",\n      "table" : "foo",\n      "version" : 10\n    },\n    {\n      "type" : "resub",\n      "table" : "foo",\n      "version" : 15\n    }\n')),(0,l.kt)("h4",{id:"summary"},"Summary"),(0,l.kt)("p",null,"These sections general provide all the information about everything that was declared in a translation unit.  Typically\nnot the full body of what was declared but its interface.  The schema information provide the core type and context\nwhile the procedure information illuminates the code that was generated and how you might call it."))}c.isMDXComponent=!0}}]);