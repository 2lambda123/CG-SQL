"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3098],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),h=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=h(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=h(n),d=i,p=c["".concat(s,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(p,o(o({ref:t},u),{},{components:n})):a.createElement(p,o({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,o=new Array(l);o[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:i,o[1]=r;for(var h=2;h<l;h++)o[h]=n[h];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7795:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return r},metadata:function(){return h},toc:function(){return m}});var a=n(7462),i=n(3366),l=(n(7294),n(3905)),o=["components"],r={id:"ch09",title:"Chapter 9: Statements Summary and Error Checking",sidebar_label:"Chapter 9: Statements Summary and Error Checking"},s=void 0,h={unversionedId:"ch09",id:"ch09",title:"Chapter 9: Statements Summary and Error Checking",description:"\x3c!---",source:"@site/../CQL_Guide/ch09.md",sourceDirName:".",slug:"/ch09",permalink:"/cql-guide/ch09",draft:!1,tags:[],version:"current",lastUpdatedBy:"Elena Luo",lastUpdatedAt:1661199662,formattedLastUpdatedAt:"8/22/2022",frontMatter:{id:"ch09",title:"Chapter 9: Statements Summary and Error Checking",sidebar_label:"Chapter 9: Statements Summary and Error Checking"},sidebar:"someSidebar",previous:{title:"Chapter 8: Functions",permalink:"/cql-guide/ch08"},next:{title:"Chapter 10: Schema Management Features",permalink:"/cql-guide/ch10"}},u={},m=[{value:"The Primary SQL Statements",id:"the-primary-sql-statements",level:3},{value:"The <code>SELECT</code> Statement",id:"the-select-statement",level:4},{value:"The <code>SELECT *</code> Statement",id:"the-select--statement",level:4},{value:"The <code>CREATE TABLE</code> Statement",id:"the-create-table-statement",level:4},{value:"The <code>UNIQUE KEY</code> Clause",id:"the-unique-key-clause",level:5},{value:"The <code>FOREIGN KEY</code> Clause",id:"the-foreign-key-clause",level:5},{value:"The <code>PRIMARY KEY</code> Clause",id:"the-primary-key-clause",level:5},{value:"The <code>CHECK</code> Clause",id:"the-check-clause",level:5},{value:"The <code>CREATE INDEX</code> Statement",id:"the-create-index-statement",level:4},{value:"The <code>CREATE VIEW</code> Statement",id:"the-create-view-statement",level:4},{value:"The <code>CREATE TRIGGER</code> Statement",id:"the-create-trigger-statement",level:4},{value:"The <code>DROP TABLE</code> Statement",id:"the-drop-table-statement",level:4},{value:"The <code>DROP VIEW</code> Statement",id:"the-drop-view-statement",level:4},{value:"The <code>DROP INDEX</code> Statement",id:"the-drop-index-statement",level:4},{value:"The <code>DROP TRIGGER</code> Statement",id:"the-drop-trigger-statement",level:4},{value:"The <code>RAISE</code> Statement",id:"the-raise-statement",level:4},{value:"The <code>ALTER TABLE ADD COLUMN</code> Statement",id:"the-alter-table-add-column-statement",level:4},{value:"The <code>DELETE</code> Statement",id:"the-delete-statement",level:4},{value:"The <code>UPDATE</code> Statement",id:"the-update-statement",level:4},{value:"The <code>INSERT</code> Statement",id:"the-insert-statement",level:4},{value:"The <code>THROW</code> Statement",id:"the-throw-statement",level:4},{value:"The <code>BEGIN TRANSACTION</code> Statement",id:"the-begin-transaction-statement",level:4},{value:"The <code>COMMIT TRANSACTION</code> Statement",id:"the-commit-transaction-statement",level:4},{value:"The <code>ROLLBACK TRANSACTION</code> Statement",id:"the-rollback-transaction-statement",level:4},{value:"The <code>SAVEPOINT</code> Statement",id:"the-savepoint-statement",level:4},{value:"The <code>RELEASE SAVEPOINT</code> Statement",id:"the-release-savepoint-statement",level:4},{value:"The <code>PROCEDURE SAVEPOINT</code> Statement",id:"the-procedure-savepoint-statement",level:4},{value:"The <code>ROLLBACK RETURN</code> Statement",id:"the-rollback-return-statement",level:4},{value:"The <code>COMMIT RETURN</code> Statement",id:"the-commit-return-statement",level:4},{value:"The <code>CREATE VIRTUAL TABLE</code> Statement",id:"the-create-virtual-table-statement",level:4},{value:"Case 1 Example",id:"case-1-example",level:5},{value:"Case 2 Example",id:"case-2-example",level:5},{value:"Case 3 Example",id:"case-3-example",level:5},{value:"Other details",id:"other-details",level:5},{value:"The Primary Procedure Statements",id:"the-primary-procedure-statements",level:3},{value:"The <code>CREATE PROCEDURE</code> Statement",id:"the-create-procedure-statement",level:4},{value:"The <code>IF</code> Statement",id:"the-if-statement",level:4},{value:"The <code>SET</code> Statement",id:"the-set-statement",level:4},{value:"The <code>LET</code> Statement",id:"the-let-statement",level:4},{value:"The <code>SWITCH</code> Statement",id:"the-switch-statement",level:4},{value:"The <code>DECLARE PROCEDURE</code> Statement",id:"the-declare-procedure-statement",level:4},{value:"The <code>DECLARE FUNCTION</code> Statement",id:"the-declare-function-statement",level:4},{value:"The <code>DECLARE</code> Variable Statement",id:"the-declare-variable-statement",level:4},{value:"The <code>DECLARE</code> Cursor Statement",id:"the-declare-cursor-statement",level:4},{value:"The <code>DECLARE</code> Value Cursor Statement",id:"the-declare-value-cursor-statement",level:4},{value:"The <code>WHILE</code> Statement",id:"the-while-statement",level:4},{value:"The <code>LOOP</code> Statement",id:"the-loop-statement",level:4},{value:"The <code>CALL</code> Statement",id:"the-call-statement",level:4},{value:"The <code>DECLARE OUT CALL</code> Statement",id:"the-declare-out-call-statement",level:4},{value:"The <code>FETCH</code> Statement",id:"the-fetch-statement",level:4},{value:"The <code>CONTINUE</code> Statement",id:"the-continue-statement",level:4},{value:"The <code>LEAVE</code> Statement",id:"the-leave-statement",level:4},{value:"The <code>TRY/CATCH</code> Statements",id:"the-trycatch-statements",level:4},{value:"The <code>CLOSE</code> CURSOR Statement",id:"the-close-cursor-statement",level:4},{value:"The <code>OUT</code> CURSOR Statement",id:"the-out-cursor-statement",level:4},{value:"The &quot;Meta&quot; Statements",id:"the-meta-statements",level:3},{value:"The <code>@ECHO</code> Statement",id:"the-echo-statement",level:4},{value:"The <code>@PREVIOUS SCHEMA</code> Statement",id:"the-previous-schema-statement",level:4},{value:"The <code>@SCHEMA_UPGRADE_SCRIPT</code> Statement",id:"the-schema_upgrade_script-statement",level:4},{value:"The <code>@SCHEMA_UPGRADE_VERSION</code> Statement",id:"the-schema_upgrade_version-statement",level:4},{value:"The <code>@ENFORCE_STRICT</code> Statement",id:"the-enforce_strict-statement",level:4},{value:"The <code>@ENFORCE_NORMAL</code> Statement",id:"the-enforce_normal-statement",level:4},{value:"The <code>@ENFORCE_PUSH</code> Statement",id:"the-enforce_push-statement",level:4},{value:"The <code>@ENFORCE_POP</code> Statement",id:"the-enforce_pop-statement",level:4},{value:"The <code>@ENFORCE_RESET</code> Statement",id:"the-enforce_reset-statement",level:4},{value:"The <code>@DECLARE_SCHEMA_REGION</code> Statement",id:"the-declare_schema_region-statement",level:4},{value:"The <code>@BEGIN_SCHEMA_REGION</code> Statement",id:"the-begin_schema_region-statement",level:4},{value:"The <code>@END_SCHEMA_REGION</code> Statement",id:"the-end_schema_region-statement",level:4},{value:"The <code>@EMIT_ENUMS</code> Statement",id:"the-emit_enums-statement",level:4},{value:"The <code>@EMIT_CONSTANTS</code> Statement",id:"the-emit_constants-statement",level:4},{value:"Important Program Fragments",id:"important-program-fragments",level:3},{value:"Argument Lists",id:"argument-lists",level:4},{value:"Procedures that return a Result Set",id:"procedures-that-return-a-result-set",level:4},{value:"General Name Lookups",id:"general-name-lookups",level:4},{value:"Data Types with a Discriminator",id:"data-types-with-a-discriminator",level:4},{value:"The <code>CASE</code> Expression",id:"the-case-expression",level:4},{value:"The <code>BETWEEN</code> EXPRESSIONS",id:"the-between-expressions",level:4},{value:"The <code>CAST</code> Expression",id:"the-cast-expression",level:4},{value:"The <code>COALESCE</code> Function",id:"the-coalesce-function",level:4},{value:"The <code>IN</code> AND <code>NOT IN</code> Expressions",id:"the-in-and-not-in-expressions",level:4},{value:"Aggregate Functions",id:"aggregate-functions",level:4},{value:"User Defined Functions",id:"user-defined-functions",level:4},{value:"Calling a procedure as a function",id:"calling-a-procedure-as-a-function",level:4},{value:"Root Expressions",id:"root-expressions",level:4},{value:"Table Factors",id:"table-factors",level:4},{value:"Joining with the <code>USING</code> Clause",id:"joining-with-the-using-clause",level:4},{value:"JOIN WITH THE <code>ON</code> Clause",id:"join-with-the-on-clause",level:4},{value:"TABLE VALUED FUNCTIONS",id:"table-valued-functions",level:4},{value:"Special Note on the JOIN...USING form",id:"special-note-on-the-joinusing-form",level:3}],c={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,'The following is a brief discussion of the major statement types and the semantic rules that CQL enforces for each of the statements.  A detailed discussion of SQL statements (the bulk of these) is beyond the scope of this document and you should refer to the SQLite documentation for most details.  However, in many cases CQL does provide additional enforcement and it is helpful to describe the basic checking that happens for each fragment of CQL.  A much\nmore authoritative list of the things CQL checks for can be inferred from the error documentation.  "Tricky" errors have examples and suggested remediation.'),(0,l.kt)("h3",{id:"the-primary-sql-statements"},"The Primary SQL Statements"),(0,l.kt)("p",null,"These are, roughly, the statements that involve the database."),(0,l.kt)("h4",{id:"the-select-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"SELECT")," Statement"),(0,l.kt)("p",null,"Top level statement list processing for select.  This is easily the hardest\nstatement to process. Each clause has its own set of complex rules and\nthe result of previous clauses constrains the next in a complex fashion.\nAmong the things that are verified:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the mentioned tables exist and have the mentioned columns"),(0,l.kt)("li",{parentName:"ul"},"the columns are type compatible in their context"),(0,l.kt)("li",{parentName:"ul"},"any variables in the expressions are compatible"),(0,l.kt)("li",{parentName:"ul"},"aggregate functions are used only in places where aggregation makes sense"),(0,l.kt)("li",{parentName:"ul"},"column and table names are unambiguous, especially when self-joins are involved"),(0,l.kt)("li",{parentName:"ul"},"compound selects (e.g. with UNION) are type-consistent in all the fragments"),(0,l.kt)("li",{parentName:"ul"},"the projection of a select has unique column labels if they are used")),(0,l.kt)("h4",{id:"the-select--statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"SELECT *")," Statement"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"SELECT *")," is special in that it creates its own struct type by assembling\nall the columns of all the tables in the select's join result.  CQL rewrites these\ncolumn names into a new ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT")," with the specific columns explicitly listed.\nWhile this makes the program slightly bigger it means that logically deleted columns\nare never present in results because ",(0,l.kt)("inlineCode",{parentName:"p"},"SELECT *")," won't select them and attempting\nto use a logically deleted column results in an error."),(0,l.kt)("h4",{id:"the-create-table-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CREATE TABLE")," Statement"),(0,l.kt)("p",null,"Unlike the other parts of DDL we actually deeply care about the tables.\nWe have to grab all the columns and column types out of it and create\nthe appropriate structure type for the table.\nAlong the way we validate a bunch of stuff like:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"verify unique table name"),(0,l.kt)("li",{parentName:"ul"},"no duplicate column names"),(0,l.kt)("li",{parentName:"ul"},"recursive correctness of constraints (see constraints discussion below)")),(0,l.kt)("h5",{id:"the-unique-key-clause"},"The ",(0,l.kt)("inlineCode",{parentName:"h5"},"UNIQUE KEY")," Clause"),(0,l.kt)("p",null,"Similar to other constraints, we don't actually do anything with this\nother than offer some validation.  Again, we use the usual helpers\nfor name lookup within the context of the table that contains the constraint."),(0,l.kt)("h5",{id:"the-foreign-key-clause"},"The ",(0,l.kt)("inlineCode",{parentName:"h5"},"FOREIGN KEY")," Clause"),(0,l.kt)("p",null,"Similar to other constraints, we don't actually do anything with this\nother than offer some validation.  Again, we use the usual helpers\nfor name lookup within the context of the table with the foreign key.\nNote that the foreign key has to be validated against two tables to fully validate it."),(0,l.kt)("h5",{id:"the-primary-key-clause"},"The ",(0,l.kt)("inlineCode",{parentName:"h5"},"PRIMARY KEY")," Clause"),(0,l.kt)("p",null,"Similar to other constraints, we don't actually do anything with this\nother than offer some validation.  Again, we use the usual helpers\nfor name lookup within the context of the table with the primary key."),(0,l.kt)("h5",{id:"the-check-clause"},"The ",(0,l.kt)("inlineCode",{parentName:"h5"},"CHECK")," Clause"),(0,l.kt)("p",null,"Similar to other constraints, we don't actually do anything with this\nother than offer some validation.  The ",(0,l.kt)("inlineCode",{parentName:"p"},"CHECK")," clause is validated\nafter the entire table has been processed so that even if it appears\nearly in the table, the clause can use any columns defined later in the\ntable."),(0,l.kt)("h4",{id:"the-create-index-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CREATE INDEX")," Statement"),(0,l.kt)("p",null,"CQL doesn't really do anything with indices but we do validate that they make sense (so we lookup all the names of all the columns and so forth.)"),(0,l.kt)("h4",{id:"the-create-view-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CREATE VIEW")," Statement"),(0,l.kt)("p",null,"Create view analysis is very simple because the ",(0,l.kt)("inlineCode",{parentName:"p"},"select")," analysis does the heavy lifting.  All we\nhave to do is validate that the view is unique, then validate the select statement."),(0,l.kt)("p",null,"Additionally, views must not be allowed to have any NULL type columns; all nulls must be converted to\nsome type with a CAST.   e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"create view foo as select NULL n")," is not valid.  NULL is not a real storage type."),(0,l.kt)("h4",{id:"the-create-trigger-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CREATE TRIGGER")," Statement"),(0,l.kt)("p",null,"The create trigger statement is quite a beast, and validations include:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The trigger name must be unique"),(0,l.kt)("li",{parentName:"ul"},"For ",(0,l.kt)("inlineCode",{parentName:"li"},"insert"),' the "new.*" table is available in expressions/statement'),(0,l.kt)("li",{parentName:"ul"},"For ",(0,l.kt)("inlineCode",{parentName:"li"},"delete"),' the "old.*" table is available in expressions/statements'),(0,l.kt)("li",{parentName:"ul"},"For ",(0,l.kt)("inlineCode",{parentName:"li"},"update")," both are available",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"If optional columns present in the ",(0,l.kt)("inlineCode",{parentName:"li"},"update"),", they must be unique/valid"))),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"when")," expression must evaluate to a numeric"),(0,l.kt)("li",{parentName:"ul"},"The statement list must be error free with the usual rules plus new/old"),(0,l.kt)("li",{parentName:"ul"},"The ",(0,l.kt)("inlineCode",{parentName:"li"},"raise")," function may be used inside a trigger (NYI)"),(0,l.kt)("li",{parentName:"ul"},"The table name must be a table (not a view) UNLESS the trigger type is ",(0,l.kt)("inlineCode",{parentName:"li"},"INSTEAD OF")),(0,l.kt)("li",{parentName:"ul"},"Select statements inside the statement block do not count as returns for the procedure and that includes the create trigger")),(0,l.kt)("h4",{id:"the-drop-table-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DROP TABLE")," Statement"),(0,l.kt)("p",null,"This is the basic checking for the drop table statement:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the table must exist in some version"),(0,l.kt)("li",{parentName:"ul"},"it has to be a table and not a view")),(0,l.kt)("h4",{id:"the-drop-view-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DROP VIEW")," Statement"),(0,l.kt)("p",null,"This is the basic checking for the drop view statement:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the view must exist in some version"),(0,l.kt)("li",{parentName:"ul"},"it has to be a view and not a table")),(0,l.kt)("h4",{id:"the-drop-index-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DROP INDEX")," Statement"),(0,l.kt)("p",null,"This is the basic checking for the drop index statement:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the index must exist in some version"),(0,l.kt)("li",{parentName:"ul"},"it could be deleted now, that's ok, but the name has to be valid")),(0,l.kt)("h4",{id:"the-drop-trigger-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DROP TRIGGER")," Statement"),(0,l.kt)("p",null,"This is the basic checking for the drop trigger statement"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the trigger  must exist in some version"),(0,l.kt)("li",{parentName:"ul"},"it could be deleted now, that's ok, but the name has to be valid")),(0,l.kt)("h4",{id:"the-raise-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"RAISE")," Statement"),(0,l.kt)("p",null,"CQL validates that ",(0,l.kt)("inlineCode",{parentName:"p"},"RAISE")," is being used in the context of a trigger and that\nit has the correct arguments"),(0,l.kt)("h4",{id:"the-alter-table-add-column-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"ALTER TABLE ADD COLUMN")," Statement"),(0,l.kt)("p",null,"To validate ",(0,l.kt)("inlineCode",{parentName:"p"},"alter table add column")," we check the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the table must exist and not be a view (in any version)"),(0,l.kt)("li",{parentName:"ul"},"the column definition of the new column must be self-consistent"),(0,l.kt)("li",{parentName:"ul"},"no auto-increment columns may be added"),(0,l.kt)("li",{parentName:"ul"},"added columns must be either nullable or have a default value")),(0,l.kt)("p",null,'Note: Alter statements are typically used in the context of migration, so it\'s\npossible the table that is mentioned is condemned in a future version.  We still have to run\nthe intervening upgrade steps so basically DDL gets to ignore the current deadness\nof the table as in context it might be "not dead yet".  This will be more obvious\nin the context of the schema maintenance features. (q.v.)'),(0,l.kt)("h4",{id:"the-delete-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DELETE")," Statement"),(0,l.kt)("p",null,"The delete analyzer sets up a scope for the table being\ndeleted and then validates the WHERE clause, if present, against that scope.\nAdditionally, we verify that the table actually was defined and is not a view."),(0,l.kt)("h4",{id:"the-update-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"UPDATE")," Statement"),(0,l.kt)("p",null,"The update analyzer sets up the scope for the table(s) being updated.  If there are\noptional clauses (e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"LIMIT"),"), they are evaluated just like in a select statement\nwith those same helper methods.  Expression fragments are evaluated similarly as\nin a select statement."),(0,l.kt)("h4",{id:"the-insert-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"INSERT")," Statement"),(0,l.kt)("p",null,"We check that the table exists and then we walk the columns and the value list\nto make sure they are valid for the table. Also, we cannot insert into a view."),(0,l.kt)("p",null,"Details:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The column list specifies the columns we will provide; they must exist and be unique."),(0,l.kt)("li",{parentName:"ul"},"The columns specified must suffice to insert a row (all not nulls and not default present.)"),(0,l.kt)("li",{parentName:"ul"},"The insert list specifies the values that are to be inserted."),(0,l.kt)("li",{parentName:"ul"},"The type of each value must match the type of the column."),(0,l.kt)("li",{parentName:"ul"},"Auto-increment columns may be specified as NULL."),(0,l.kt)("li",{parentName:"ul"},"If there are too many or too few columns, that is considered an error."),(0,l.kt)("li",{parentName:"ul"},"If no columns are specified, that is the same as if all columns had been specified, in table order.")),(0,l.kt)("h4",{id:"the-throw-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"THROW")," Statement"),(0,l.kt)("p",null,"Throw can literally go anywhere, so it's always ok."),(0,l.kt)("h4",{id:"the-begin-transaction-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"BEGIN TRANSACTION")," Statement"),(0,l.kt)("p",null,"Begin transaction can go anywhere, so it's always ok."),(0,l.kt)("p",null,"The sqlite documentation can be helpful here (CQL syntax is a subset).  See: ",(0,l.kt)("a",{parentName:"p",href:"https://www.sqlite.org/lang_transaction.html"},"https://www.sqlite.org/lang_transaction.html")),(0,l.kt)("h4",{id:"the-commit-transaction-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"COMMIT TRANSACTION")," Statement"),(0,l.kt)("p",null,"Commit transaction can go anywhere, so it's always ok."),(0,l.kt)("p",null,"The sqlite documentation can be helpful here (CQL syntax is a subset).  See: ",(0,l.kt)("a",{parentName:"p",href:"https://www.sqlite.org/lang_transaction.html"},"https://www.sqlite.org/lang_transaction.html")),(0,l.kt)("h4",{id:"the-rollback-transaction-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"ROLLBACK TRANSACTION")," Statement"),(0,l.kt)("p",null,"Rollback transaction can go anywhere but if you're using the format\nwhere you rollback to a particular save point, then we must have\nseen that name in a ",(0,l.kt)("inlineCode",{parentName:"p"},"savepoint")," statement previously. Otherwise, it's an error."),(0,l.kt)("p",null,"The sqlite documentation can be helpful here again (CQL syntax is a subset).  See: ",(0,l.kt)("a",{parentName:"p",href:"https://www.sqlite.org/lang_transaction.html"},"https://www.sqlite.org/lang_transaction.html")),(0,l.kt)("h4",{id:"the-savepoint-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"SAVEPOINT")," Statement"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"savepoint")," statement can go anywhere but we do record this savepoint name\nas having been seen, so that we can verify it in rollback.  So this is sort of a weak declaration of the savepoint name."),(0,l.kt)("p",null,"The sqlite documentation can be helpful here (CQL syntax is a subset).  ",(0,l.kt)("a",{parentName:"p",href:"https://www.sqlite.org/lang_savepoint.html"},"https://www.sqlite.org/lang_savepoint.html")),(0,l.kt)("h4",{id:"the-release-savepoint-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"RELEASE SAVEPOINT")," Statement"),(0,l.kt)("p",null,"Release savepoint can go anywhere but we must have\nseen that name in a previous ",(0,l.kt)("inlineCode",{parentName:"p"},"savepoint")," statement, otherwise it's an error."),(0,l.kt)("p",null,"The sqlite documentation can be helpful here (CQL syntax is a subset). ",(0,l.kt)("a",{parentName:"p",href:"https://www.sqlite.org/lang_savepoint.html"},"https://www.sqlite.org/lang_savepoint.html")),(0,l.kt)("h4",{id:"the-procedure-savepoint-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"PROCEDURE SAVEPOINT")," Statement"),(0,l.kt)("p",null,"A common pattern is to have a savepoint associated with a particular procedure. The savepoint's scope is the same\nas the procedure's scope.  More precisely"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create procedure foo()\nbegin\n  proc savepoint\n  begin\n   -- your code\n  end;\nend;\n")),(0,l.kt)("p",null,"becomes:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create procedure foo()\nbegin\n  savepoint @proc;  -- @proc is always the name of the current procedure\n  begin try\n    -- your code\n    release savepoint @proc;\n  end try;\n  begin catch\n    rollback transaction to savepoint @proc;\n    release savepoint @proc;\n    throw;\n  end catch;\nend;\n")),(0,l.kt)("p",null,"This form is not quite syntactic sugar because there are some interesting rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"proc savepoint")," form must be used at the top level of the procedure, hence no ",(0,l.kt)("inlineCode",{parentName:"li"},"leave")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"continue")," may escape it"),(0,l.kt)("li",{parentName:"ul"},"within ",(0,l.kt)("inlineCode",{parentName:"li"},"begin"),"/",(0,l.kt)("inlineCode",{parentName:"li"},"end")," the ",(0,l.kt)("inlineCode",{parentName:"li"},"return")," form may not be used; you must use ",(0,l.kt)("inlineCode",{parentName:"li"},"rollback return")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"commit return")," (see below)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"throw")," may be used to return an error as usual"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"proc savepoint")," may be used again, at the top level, in the same procedure, if there are, for instance, several sequential stages"),(0,l.kt)("li",{parentName:"ul"},"a procedure using ",(0,l.kt)("inlineCode",{parentName:"li"},"proc savepoint")," could call another such procedure, or a procedure that manipulates savepoints in some other way")),(0,l.kt)("h4",{id:"the-rollback-return-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"ROLLBACK RETURN")," Statement"),(0,l.kt)("p",null,"This form may be used only inside of  a ",(0,l.kt)("inlineCode",{parentName:"p"},"proc savepoint")," block.  It indicates that the savepoint should be rolled back and then the procedure\nshould return.  It is exactly equivalent to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"  rollback transaction to savepoint @proc;\n  release savepoint @proc;\n  return; -- wouldn't actually be allowed inside of proc savepoint; see note below\n")),(0,l.kt)("p",null,"Note: to avoid errors, the loose ",(0,l.kt)("inlineCode",{parentName:"p"},"return")," above is not actually allowed inside of ",(0,l.kt)("inlineCode",{parentName:"p"},"proc savepoint")," -- you must use ",(0,l.kt)("inlineCode",{parentName:"p"},"rollback return")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"commit return"),"."),(0,l.kt)("h4",{id:"the-commit-return-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"COMMIT RETURN")," Statement"),(0,l.kt)("p",null,"This form may be used only inside of  a ",(0,l.kt)("inlineCode",{parentName:"p"},"proc savepoint")," block.  It indicates that the savepoint should be released and then the procedure\nshould return.  It is exactly equivalent to:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"  release savepoint @proc;\n  return; -- wouldn't actually be allowed inside of proc savepoint; see note below\n")),(0,l.kt)("p",null,"Of course this isn't exactly a commit, in that there might be an outer savepoint or outer transaction that might\nstill be rolled back, but it is commited at its level of nesting, if you will.  Or, equivalently, you can think of\nit as merging the savepoint into the transaction in flight."),(0,l.kt)("p",null,"Note: to avoid errors, the loose ",(0,l.kt)("inlineCode",{parentName:"p"},"return")," above is not actually allowed inside of ",(0,l.kt)("inlineCode",{parentName:"p"},"proc savepoint")," and you must use ",(0,l.kt)("inlineCode",{parentName:"p"},"rollback return")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"commit return"),"."),(0,l.kt)("h4",{id:"the-create-virtual-table-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CREATE VIRTUAL TABLE")," Statement"),(0,l.kt)("p",null,"The SQLite ",(0,l.kt)("inlineCode",{parentName:"p"},"CREATE VIRTUAL TABLE")," form (",(0,l.kt)("a",{parentName:"p",href:"https://sqlite.org/lang_createvtab.html"},"https://sqlite.org/lang_createvtab.html"),") is problematic from CQL because:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"it is not parseable, because the module arguments can be literally anything (or nothing), even a letter to your grandma"),(0,l.kt)("li",{parentName:"ul"},"the arguments do not necessarily say anything about the table's schema at all")),(0,l.kt)("p",null,"So the CQL form departs from the standard syntax to this form:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create virtual table virt_table using my_module [(module arguments)]  as (\n  id integer not null,\n  name text\n);\n")),(0,l.kt)("p",null,"The part after the ",(0,l.kt)("inlineCode",{parentName:"p"},"AS")," is used by CQL as a table declaration for the virtual table.  The grammar for that\nis exactly the same as a normal ",(0,l.kt)("inlineCode",{parentName:"p"},"CREATE TABLE")," statement.  However, that part is not transmitted to\nSQLite; when the table is created, SQLite sees only the part it cares about, which is the part before the ",(0,l.kt)("inlineCode",{parentName:"p"},"AS"),"."),(0,l.kt)("p",null,"In order to have strict parsing rules, the module arguments follow one of these forms:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"no arguments at all"),(0,l.kt)("li",{parentName:"ol"},"a list of identifiers, constants, and parenthesized sublists, just like in the ",(0,l.kt)("inlineCode",{parentName:"li"},"@attribute")," form"),(0,l.kt)("li",{parentName:"ol"},"the words ",(0,l.kt)("inlineCode",{parentName:"li"},"arguments following"))),(0,l.kt)("h5",{id:"case-1-example"},"Case 1 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"create virtual table virt_table using my_module as (\n  id integer not null,\n  name text\n);\n")),(0,l.kt)("p",null,"becomes (to SQLite)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE VIRTUAL TABLE virt_table USING my_module;\n")),(0,l.kt)("p",null,"Note: empty arguments ",(0,l.kt)("inlineCode",{parentName:"p"},"USING my_module()")," are not allowed in the SQLite docs but do seem to work in SQLite.\nWe take the position that no args should be formatted with no parentheses, at least for now."),(0,l.kt)("h5",{id:"case-2-example"},"Case 2 Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"create virtual table virt_table using my_module(foo, 'goo', (1.5, (bar, baz))) as (\n  id integer not null,\n  name text\n);\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'CREATE VIRTUAL TABLE virt_table USING my_module(foo, "goo", (1.5, (bar, baz)));\n')),(0,l.kt)("p",null,"This form allows for very flexible arguments but not totally arbitrary arguments, so it can still be\nparsed and validated."),(0,l.kt)("h5",{id:"case-3-example"},"Case 3 Example"),(0,l.kt)("p",null,"This case recognizes the popular choice that the arguments are often the actual schema declaration\nfor the table in question. So:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"create virtual table virt_table using my_module(arguments following) as (\n  id integer not null,\n  name text\n);\n")),(0,l.kt)("p",null,"becomes"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"CREATE VIRTUAL TABLE virt_table USING my_module(\n  id INTEGER NOT NULL,\n  name TEXT\n);\n")),(0,l.kt)("p",null,"The normalized text (keywords capitalized, whitespace normalized) of the table declaration in the ",(0,l.kt)("inlineCode",{parentName:"p"},"as")," clause is used as the arguments."),(0,l.kt)("h5",{id:"other-details"},"Other details"),(0,l.kt)("p",null,"Virtual tables go into their own section in the JSON and they include the ",(0,l.kt)("inlineCode",{parentName:"p"},"module")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"moduleArgs")," entries; they are additionally\nmarked ",(0,l.kt)("inlineCode",{parentName:"p"},"isVirtual")," in case you want to use the same processing code for virtual tables as normal tables.  The JSON format is otherwise\nthe same, although some things can't happen in virtual tables (e.g. there is no ",(0,l.kt)("inlineCode",{parentName:"p"},"TEMP")," option so ",(0,l.kt)("inlineCode",{parentName:"p"},'"isTemp"')," must be false in the JSON.)"),(0,l.kt)("p",null,"For purposes of schema processing, virtual tables are on the ",(0,l.kt)("inlineCode",{parentName:"p"},"@recreate")," plan, just like indices, triggers, etc.  This is the only option since\nthe ",(0,l.kt)("inlineCode",{parentName:"p"},"alter table")," form is not allowed on a virtual table."),(0,l.kt)("p",null,'Semantic validation enforces "no alter statements on virtual tables" as well as other things like no indices, and no triggers, since SQLite\ndoes not support any of those things.'),(0,l.kt)("p",null,"CQL supports the notion of ",(0,l.kt)("a",{parentName:"p",href:"https://www.sqlite.org/vtab.html#epovtab"},"eponymous virtual tables"),".  If you intend to register the virtual\ntable's module in this fashion, you can use ",(0,l.kt)("inlineCode",{parentName:"p"},"create virtual table @eponymous ...")," to declare this to CQL.  The only effect this has\nis to ensure that CQL will not try to drop this table during schema maintenance as dropping such a table is an invalid operation.  In\nall other ways, the fact that the table is eponymous makes no difference."),(0,l.kt)("p",null,"Finally, because virtual tables are on the ",(0,l.kt)("inlineCode",{parentName:"p"},"@recreate")," plan, you may not have foreign keys that reference virtual tables. Such keys seem\nlike a bad idea in any case."),(0,l.kt)("h3",{id:"the-primary-procedure-statements"},"The Primary Procedure Statements"),(0,l.kt)("p",null,"These are the statements which form the language of procedures, and do not involve the database."),(0,l.kt)("h4",{id:"the-create-procedure-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CREATE PROCEDURE")," Statement"),(0,l.kt)("p",null,"Semantic analysis of stored procedures is fairly easy at the core:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"check for duplicate names"),(0,l.kt)("li",{parentName:"ul"},"validate the parameters are well formed"),(0,l.kt)("li",{parentName:"ul"},"set the current proc in flight (this not allowed to nest)"),(0,l.kt)("li",{parentName:"ul"},"recurse on the statement list and prop errors"),(0,l.kt)("li",{parentName:"ul"},"record the name of the procedure for callers\nIn addition, while processing the statement:"),(0,l.kt)("li",{parentName:"ul"},"we determine if it uses the database; this will change the emitted signature of the proc to include a ",(0,l.kt)("inlineCode",{parentName:"li"},"sqlite3 *db"),"\ninput argument and it will return a sqlite error code (e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"SQLITE_OK"),")"),(0,l.kt)("li",{parentName:"ul"},'select statements that are loose in the proc represent the "return" of that\nselect;  this changes the signature to include a ',(0,l.kt)("inlineCode",{parentName:"li"},"sqlite3_stmt **pstmt")," parameter corresponding to the returned statement")),(0,l.kt)("h4",{id:"the-if-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"IF")," Statement"),(0,l.kt)("p",null,"The top level if node links the initial condition with a possible\nseries of else_if nodes and then the else node.  Each condition is\nchecked for validity. The conditions must be valid expressions that\ncan each be converted to a boolean."),(0,l.kt)("h4",{id:"the-set-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"SET")," Statement"),(0,l.kt)("p",null,"The set statement is for variable assignment.  We just validate\nthat the target exists and is compatible with the source.\nCursor variables cannot be set with simple assignment and CQL generates\nerrors if you attempt to do so."),(0,l.kt)("h4",{id:"the-let-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"LET")," Statement"),(0,l.kt)("p",null,"Let combines a ",(0,l.kt)("inlineCode",{parentName:"p"},"DECLARE")," and a ",(0,l.kt)("inlineCode",{parentName:"p"},"SET"),".  The variable is declared to be\nthe exact type of the right hand side.  All the validations for ",(0,l.kt)("inlineCode",{parentName:"p"},"DECLARE"),"\nand ",(0,l.kt)("inlineCode",{parentName:"p"},"SET")," are applicable, but there is no chance that the variable will\nnot be compatible with the expression.  The expression could still be\nerroneous in the first place.  The variable could be a duplicate."),(0,l.kt)("h4",{id:"the-switch-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"SWITCH")," Statement"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"SWITCH")," form requires a number of conditions to successfully map\ndown to a ",(0,l.kt)("inlineCode",{parentName:"p"},"C")," ",(0,l.kt)("inlineCode",{parentName:"p"},"switch")," statement.  These are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the switch-expression must be a not-null integral type (",(0,l.kt)("inlineCode",{parentName:"li"},"integer not null")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"long integer not null"),")",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," expressions must be losslessly promotable to the type of the switch-expression"))),(0,l.kt)("li",{parentName:"ul"},"the values in the ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," clauses must be unique"),(0,l.kt)("li",{parentName:"ul"},"If ",(0,l.kt)("inlineCode",{parentName:"li"},"ALL VALUES")," is present then:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the switch-expression must be of an enum type"),(0,l.kt)("li",{parentName:"ul"},"the ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," values must cover every value of the enum except those beginning with '_'"),(0,l.kt)("li",{parentName:"ul"},"there can be no extra ",(0,l.kt)("inlineCode",{parentName:"li"},"WHEN")," values not in the enum"),(0,l.kt)("li",{parentName:"ul"},"there can be no ",(0,l.kt)("inlineCode",{parentName:"li"},"ELSE")," clause")))),(0,l.kt)("h4",{id:"the-declare-procedure-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DECLARE PROCEDURE")," Statement"),(0,l.kt)("p",null,"There are three forms of this declaration:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a regular procedure with no DML",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"declare proc X(id integer);")))),(0,l.kt)("li",{parentName:"ul"},"a regular procedure that uses DML (it will need a db parameter and returns a result code)",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"declare proc X(id integer) using transaction;")))),(0,l.kt)("li",{parentName:"ul"},"a procedure that returns a result set, and you provide the result columns",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. ",(0,l.kt)("inlineCode",{parentName:"li"},"declare proc X(id integer) : (A bool not null, B text);"),"\nThe main validations here are that there are no duplicate parameter names, or return value columns.")))),(0,l.kt)("h4",{id:"the-declare-function-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DECLARE FUNCTION")," Statement"),(0,l.kt)("p",null,"Function declarations are similar to procedures; there must be a return type\n(use proc if there is none).  The ",(0,l.kt)("inlineCode",{parentName:"p"},"DECLARE SELECT FUNCTION")," form indicates a function\nvisible to SQLite; other functions are usable in the ",(0,l.kt)("inlineCode",{parentName:"p"},"call")," statement."),(0,l.kt)("h4",{id:"the-declare-variable-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DECLARE")," Variable Statement"),(0,l.kt)("p",null,"This declares a new local or global variable that is not a cursor.\nThe type is computed with the same helper that is used for analyzing\ncolumn definitions.  Once we have the type we walk the list of variable\nnames, check them for duplicates and such (see above) and assign their type.  The canonical\nname of the variable is defined here. If it is later used with a different casing the output\nwill always be as declared.   e.g. ",(0,l.kt)("inlineCode",{parentName:"p"},"declare Foo integer;  set foo = 1;")," is legal but the output\nwill always contain the variable written as ",(0,l.kt)("inlineCode",{parentName:"p"},"Foo"),"."),(0,l.kt)("h4",{id:"the-declare-cursor-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DECLARE")," Cursor Statement"),(0,l.kt)("p",null,"There are two forms of the declare cursor, both of which allow CQL to infer the exact type of the cursor."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"declare foo cursor for select etc."),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the type of the cursor is the net struct type of the select list"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"declare foo cursor for call proc();"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"proc must be statement that produces a result set via select (see above)"),(0,l.kt)("li",{parentName:"ul"},"the type of the cursor is the struct of the select returned by the proc"),(0,l.kt)("li",{parentName:"ul"},"note if there is more than one loose select in the proc they must match exactly"))),(0,l.kt)("li",{parentName:"ul"},"cursor names have the same rules regarding duplicates as other variables\nWith this in mind, both cases simply recurse on either the select or the call\nand then pull out the structure type of that thing and use it for the cursor's shape.  If the\n",(0,l.kt)("inlineCode",{parentName:"li"},"call")," is not semantically valid according to the rules for calls or the ",(0,l.kt)("inlineCode",{parentName:"li"},"select")," is not semantically valid,\nthen of course this declaration will generate errors.")),(0,l.kt)("h4",{id:"the-declare-value-cursor-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DECLARE")," Value Cursor Statement"),(0,l.kt)("p",null,"This statement declares a cursor that will be based on the return type of a procedure.\nWhen using this form the cursor is also fetched, hence the name.  The fetch result of\nthe stored proc will be used for the value.  At this point, we use its type only."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the call must be semantically valid"),(0,l.kt)("li",{parentName:"ul"},"the procedure must return an OUT parameter (not a result set)"),(0,l.kt)("li",{parentName:"ul"},"the cursor name must be unique")),(0,l.kt)("h4",{id:"the-while-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"WHILE")," Statement"),(0,l.kt)("p",null,"While semantic analysis is super simple."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the condition must be numeric"),(0,l.kt)("li",{parentName:"ul"},"the statement list must be error-free"),(0,l.kt)("li",{parentName:"ul"},"loop_depth is increased allowing the use of interior leave/continue")),(0,l.kt)("h4",{id:"the-loop-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"LOOP")," Statement"),(0,l.kt)("p",null,'Loop analysis is just as simple as "while" -- because the loop_stmt\nliterally has an embedded fetch, you simply use the fetch helper to\nvalidate that the fetch is good and then visit the statement list.\nLoop depth is increased as it is with while.'),(0,l.kt)("h4",{id:"the-call-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CALL")," Statement"),(0,l.kt)("p",null,"There are three ways that a call can happen:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"signatures of procedures that we know in full:",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"call foo();"),(0,l.kt)("li",{parentName:"ul"},"declare cursor for call foo();"))),(0,l.kt)("li",{parentName:"ul"},"some external call to some outside function we don't know",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"e.g. call printf('hello, world\\n');")))),(0,l.kt)("p",null,'The cursor form can be used if and only if the procedure has a loose select\nor a call to a procedure with a loose select. In that case, the procedure will\nhave a structure type, rather than just "ok" (the normal signature for a proc).\nIf the user is attempting to do the second case, cursor_name will be set and\nthe appropriate verification happens here.'),(0,l.kt)("p",null,"Note:  Recursively calling fetch cursor is not really doable in general\nbecause at the point in the call we might not yet know that the method\ndoes in fact return a select.  You could make it work if you put the select\nbefore the recursive call."),(0,l.kt)("p",null,"Semantic rules:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"for all cases each argument must be error-free (no internal type conflicts)"),(0,l.kt)("li",{parentName:"ul"},"for known procs",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the call has to have the correct number of arguments"),(0,l.kt)("li",{parentName:"ul"},"if the formal is an out parameter the argument must be a variable",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"the type of the variable must be an exact type match for the formal"))),(0,l.kt)("li",{parentName:"ul"},"non-out parameters must be type-compatible, but exact match is not required")))),(0,l.kt)("h4",{id:"the-declare-out-call-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"DECLARE OUT CALL")," Statement"),(0,l.kt)("p",null,"This form is syntactic sugar and corresponds to declaring any ",(0,l.kt)("inlineCode",{parentName:"p"},"OUT")," parameters\nof the ",(0,l.kt)("inlineCode",{parentName:"p"},"CALL")," portion that are not already declared as the exact type of the\n",(0,l.kt)("inlineCode",{parentName:"p"},"OUT")," parameter.  This is intended to save you from declaring a lot of variables\njust so that you can use them as ",(0,l.kt)("inlineCode",{parentName:"p"},"OUT")," arguments."),(0,l.kt)("p",null,"Since any variables that already exist are not re-declared, there are no\nadditional semantic rules beyond the normal call except that it is an error\nto use this form if no ",(0,l.kt)("inlineCode",{parentName:"p"},"OUT")," variables needed to be declared."),(0,l.kt)("h4",{id:"the-fetch-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"FETCH")," Statement"),(0,l.kt)("p",null,"The fetch statement has two forms:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"fetch C into var1, var2, var3 etc."),(0,l.kt)("li",{parentName:"ul"},'fetch C;\nThe second form is called the auto_cursor.\nIn the first form the variables of the cursor must be assignment compatible\nwith declared structure type of the cursor and the count must be correct.\nIn the second form, the codegen will implicitly create local variables that\nare exactly the correct type, but we\'ll cover that later.  Since no semantic error is\npossible in that case, we simply record that this is an auto_cursor and then\nlater we will allow the use of C.field during analysis.\nOf course "C" must be a valid cursor.')),(0,l.kt)("h4",{id:"the-continue-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CONTINUE")," Statement"),(0,l.kt)("p",null,"We just need to ensure that ",(0,l.kt)("inlineCode",{parentName:"p"},"continue")," is inside a ",(0,l.kt)("inlineCode",{parentName:"p"},"loop")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"while"),"."),(0,l.kt)("h4",{id:"the-leave-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"LEAVE")," Statement"),(0,l.kt)("p",null,"We only need to ensure that ",(0,l.kt)("inlineCode",{parentName:"p"},"leave")," is inside a ",(0,l.kt)("inlineCode",{parentName:"p"},"loop"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"while")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"switch"),"."),(0,l.kt)("h4",{id:"the-trycatch-statements"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"TRY/CATCH")," Statements"),(0,l.kt)("p",null,"No analysis needed here other than that the two statement lists are ok."),(0,l.kt)("h4",{id:"the-close-cursor-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CLOSE")," CURSOR Statement"),(0,l.kt)("p",null,"For close ","[cursor]",", we just validate that the name is in fact a cursor\nand it is not a boxed cursor.  Boxed cursor lifetime is managed by the\nbox object so manually closing it is not allowed.  Instead, the usual\nreference-counting semantics apply; the boxed cursor variable typically falls out of\nscope and is released, or is perhaps set to NULL to release its reference early."),(0,l.kt)("h4",{id:"the-out-cursor-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"OUT")," CURSOR Statement"),(0,l.kt)("p",null,"For out ","[cursor]",", we first validate that the name is a cursor\nthen we set the output type of the procedure we're in accordingly."),(0,l.kt)("h3",{id:"the-meta-statements"},'The "Meta" Statements'),(0,l.kt)("p",null,"The program's control/ the overall meaning of the program / or may give the compiler specific directives\nas to how the program should be compiled."),(0,l.kt)("h4",{id:"the-echo-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@ECHO")," Statement"),(0,l.kt)("p",null,"Echo is valid in any top level contexts."),(0,l.kt)("h4",{id:"the-previous-schema-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@PREVIOUS SCHEMA")," Statement"),(0,l.kt)("p",null,"Begins the region where previous schema will be compared against what has been\ndeclared before this directive for alterations that could not be upgraded."),(0,l.kt)("h4",{id:"the-schema_upgrade_script-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@SCHEMA_UPGRADE_SCRIPT")," Statement"),(0,l.kt)("p",null,'When upgrading the DDL, it\'s necessary to emit create table statements\nfor the original version of the schema.  These create statements may conflict\nwith the current version of the schema.  This attribute tells CQL to\n1) ignore DDL in stored procedures for declaration purposes; only DDL outside of a proc counts\n2) do not make any columns "hidden" thereby allowing all annotations to be present\nso they can be used to validate other aspects of the migration script.'),(0,l.kt)("h4",{id:"the-schema_upgrade_version-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@SCHEMA_UPGRADE_VERSION")," Statement"),(0,l.kt)("p",null,"For sql stored procedures that are supposed to update previous schema versions\nyou can use this attribute to put CQL into that mindset.  This will make\nthe columns hidden for the version in question rather than the current version.\nThis is important because older schema migration procedures might still refer to\nold columns.  Those columns truly exist at that schema version."),(0,l.kt)("h4",{id:"the-enforce_strict-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@ENFORCE_STRICT")," Statement"),(0,l.kt)("p",null,"Switch to strict mode for the indicated item.  The choices and their meanings are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},'"FOREIGN KEY ON DELETE" indicates there must be some ',(0,l.kt)("inlineCode",{parentName:"li"},"ON DELETE")," action in every FK"),(0,l.kt)("li",{parentName:"ul"},'"FOREIGN KEY ON UPDATE" indicates there must be some ',(0,l.kt)("inlineCode",{parentName:"li"},"ON UPDATE")," action in every FK"),(0,l.kt)("li",{parentName:"ul"},'"INSERT SELECT" indicates that insert with ',(0,l.kt)("inlineCode",{parentName:"li"},"SELECT")," for values may not include top level joins (avoiding a SQLite bug)"),(0,l.kt)("li",{parentName:"ul"},'"IS TRUE" indicates that ',(0,l.kt)("inlineCode",{parentName:"li"},"IS TRUE")," ",(0,l.kt)("inlineCode",{parentName:"li"},"IS FALSE")," ",(0,l.kt)("inlineCode",{parentName:"li"},"IS NOT TRUE")," ",(0,l.kt)("inlineCode",{parentName:"li"},"IS NOT FALSE")," may not be used (*)"),(0,l.kt)("li",{parentName:"ul"},'"JOIN" indicates only ANSI style joins may be used, and "from A,B" is rejected'),(0,l.kt)("li",{parentName:"ul"},'"PROCEDURE" indicates no calls to undeclared procedures (like loose printf calls)'),(0,l.kt)("li",{parentName:"ul"},'"SELECT IF NOTHING" indicates ',(0,l.kt)("inlineCode",{parentName:"li"},"(select ...)")," expressions must include an ",(0,l.kt)("inlineCode",{parentName:"li"},"IF NOTHING")," clause if they have a ",(0,l.kt)("inlineCode",{parentName:"li"},"FROM")," part"),(0,l.kt)("li",{parentName:"ul"},'"TABLE FUNCTIONS" indicates table valued functions cannot be used on left/right joins (avoiding a SQLite bug)'),(0,l.kt)("li",{parentName:"ul"},'"TRANSACTION" indicates no transactions may be started, committed, or aborted'),(0,l.kt)("li",{parentName:"ul"},'"UPSERT" indicates no upsert statement may be used (*)'),(0,l.kt)("li",{parentName:"ul"},'"WINDOW FUNCTION" indicates no window functions may be used (*)'),(0,l.kt)("li",{parentName:"ul"},'"WITHOUT ROWID" indicates ',(0,l.kt)("inlineCode",{parentName:"li"},"WITHOUT ROWID")," may not be used")),(0,l.kt)("p",null,"The items marked with * are present so that features can be disabled to target downlevel versions of SQLite\nthat may not have those features."),(0,l.kt)("p",null,"See the grammar details for exact syntax."),(0,l.kt)("h4",{id:"the-enforce_normal-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@ENFORCE_NORMAL")," Statement"),(0,l.kt)("p",null,"Turn off strict enforcement for the indicated item."),(0,l.kt)("h4",{id:"the-enforce_push-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@ENFORCE_PUSH")," Statement"),(0,l.kt)("p",null,"Push the current strict settings onto the enforcement stack.  This does not change the current settings."),(0,l.kt)("h4",{id:"the-enforce_pop-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@ENFORCE_POP")," Statement"),(0,l.kt)("p",null,"Pop the previous current strict settings from the enforcement stack."),(0,l.kt)("h4",{id:"the-enforce_reset-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@ENFORCE_RESET")," Statement"),(0,l.kt)("p",null,"Turns off all the strict modes.  Best used immediately after ",(0,l.kt)("inlineCode",{parentName:"p"},"@ENFORCE_PUSH"),"."),(0,l.kt)("h4",{id:"the-declare_schema_region-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@DECLARE_SCHEMA_REGION")," Statement"),(0,l.kt)("p",null,"A schema region is a partitioning of the schema such that it\nonly uses objects in the same partition or one of its declared\ndependencies.  One schema region may be upgraded independently\nfrom any others (assuming they happen such that dependents are done first.)\nHere we validate:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"the region name is unique"),(0,l.kt)("li",{parentName:"ul"},"the dependencies (if any) are unique and exist"),(0,l.kt)("li",{parentName:"ul"},"the directive is not inside a procedure")),(0,l.kt)("h4",{id:"the-begin_schema_region-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@BEGIN_SCHEMA_REGION")," Statement"),(0,l.kt)("p",null,"Entering a schema region makes all the objects that follow part of that\nregion.  It also means that all the contained objects must refer to\nonly pieces of schema that are in the same region or a dependent region.\nHere we validate that region we are entering is in fact a valid region\nand that there isn't already a schema region."),(0,l.kt)("h4",{id:"the-end_schema_region-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@END_SCHEMA_REGION")," Statement"),(0,l.kt)("p",null,"Leaving a schema region puts you back in the default region.\nHere we check that we are in a schema region."),(0,l.kt)("h4",{id:"the-emit_enums-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@EMIT_ENUMS")," Statement"),(0,l.kt)("p",null,"Declared enumarations can be voluminous and it is undesirable for every\nemitted ",(0,l.kt)("inlineCode",{parentName:"p"},".h")," file to contain every enumeration.  To avoid this problem\nyou can emit enumeration values of your choice using ",(0,l.kt)("inlineCode",{parentName:"p"},"@emit_enums x, y, z"),"\nwhich places the named enumerations into the ",(0,l.kt)("inlineCode",{parentName:"p"},".h")," file associated with\nthe current translation unit. If no enumerations are listed, all enums\nare emitted."),(0,l.kt)("p",null,"Note: generated enum definitions are protected by ",(0,l.kt)("inlineCode",{parentName:"p"},"#ifndef X ... #endif")," so multiple\ndefinitions are harmless and hence you can afford to use ",(0,l.kt)("inlineCode",{parentName:"p"},"@emit_enums"),"\nfor the same enum in several translations units, if desired."),(0,l.kt)("p",null,"Note: Enumeration values also appear in the JSON output in their own section."),(0,l.kt)("h4",{id:"the-emit_constants-statement"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"@EMIT_CONSTANTS")," Statement"),(0,l.kt)("p",null,"This statement is entirely analogous to the the ",(0,l.kt)("inlineCode",{parentName:"p"},"@EMIT_ENUMS")," except that\nthe parameters are one or more constant groups.  In fact constants are put\ninto groups precisely so that they can be emitted in logical bundles (and\nto encourage keeping related constants together).  Placing ",(0,l.kt)("inlineCode",{parentName:"p"},"@EMIT_CONSTANTS"),"\ncauses the C version of the named groups to go into the current ",(0,l.kt)("inlineCode",{parentName:"p"},".h")," file."),(0,l.kt)("p",null,"Note: Global constants also appear in the JSON output in their own section."),(0,l.kt)("h3",{id:"important-program-fragments"},"Important Program Fragments"),(0,l.kt)("p",null,"These items appear in a variety of places and are worthy of discussion.  They are generally handled uniformly."),(0,l.kt)("h4",{id:"argument-lists"},"Argument Lists"),(0,l.kt)("p",null,"In each case we walk the entire list and do the type inference on each argument.\nNote that this happens in the context of a function call, and depending\non what the function is, there may be additional rules for compatibility of the\narguments with the function.  The generic code doesn't do those checks, there\nis per-function code that handles that sort of thing."),(0,l.kt)("p",null,"At this stage the compiler computes the type of each argument and makes sure\nthat, independently, they are not bogus."),(0,l.kt)("h4",{id:"procedures-that-return-a-result-set"},"Procedures that return a Result Set"),(0,l.kt)("p",null,"If a procedure is returning a select statement then we need to attach a\nresult type to the procedure's semantic info.  We have to do some extra validation\nat this point, especially if the procedure already has some other select that\nmight be returned.  The compiler ensures that all the possible select results are\nare 100% compatible."),(0,l.kt)("h4",{id:"general-name-lookups"},"General Name Lookups"),(0,l.kt)("p",null,"Every name is checked in a series of locations.  If the name is known to be\na table, view, cursor, or some other specific type of object then only those\nname are considered.  If the name is more general a wider search is used."),(0,l.kt)("p",null,"Among the places that are considered:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"columns in the current join if any (this must not conflict with #2)"),(0,l.kt)("li",{parentName:"ul"},"local or global variables"),(0,l.kt)("li",{parentName:"ul"},"fields in an open cursor"),(0,l.kt)("li",{parentName:"ul"},"fields in enumerations and global constants")),(0,l.kt)("h4",{id:"data-types-with-a-discriminator"},"Data Types with a Discriminator"),(0,l.kt)("p",null,"Discriminators can appear on any type, ",(0,l.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"real"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),", etc."),(0,l.kt)("p",null,"Where there is a discriminator the compiler checks that (e.g.) ",(0,l.kt)("inlineCode",{parentName:"p"},"object<Foo>")," only combines\nwith ",(0,l.kt)("inlineCode",{parentName:"p"},"object<Foo>")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"object"),".  ",(0,l.kt)("inlineCode",{parentName:"p"},"real<meters>")," only combines with ",(0,l.kt)("inlineCode",{parentName:"p"},"real<meters>")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"real"),".\nIn this way its not possible to accidentally add ",(0,l.kt)("inlineCode",{parentName:"p"},"meters")," to ",(0,l.kt)("inlineCode",{parentName:"p"},"kilograms")," or to store\nan ",(0,l.kt)("inlineCode",{parentName:"p"},"int<task_id>")," where an ",(0,l.kt)("inlineCode",{parentName:"p"},"int<person_id>")," is required."),(0,l.kt)("h4",{id:"the-case-expression"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CASE")," Expression"),(0,l.kt)("p",null,'There are two parts to this: the "when" expression and the "then" expression.\nWe compute the aggregate type of the "when" expressions as we go, promoting it\nup to a larger type if needed (e.g. if one "when" is an int and the other is\na real, then the result is a real).  Likewise, nullability is computed as\nthe aggregate.  Note that if nothing matches, the result is null, so we always\nget a nullable resultm unless there is an "else" expression.\nIf we started with case expression, then each "when" expression must be comparable\nto the case expression.  If we started with case when xx then yy;  then\neach case expression must be numeric (typically boolean).'),(0,l.kt)("h4",{id:"the-between-expressions"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"BETWEEN")," EXPRESSIONS"),(0,l.kt)("p",null,"Between requires type compatibility between all three of its arguments.\nNullability follows the usual rules: if any might be null then the result\ntype might be null.  In any case, the result's core type is BOOL."),(0,l.kt)("h4",{id:"the-cast-expression"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"CAST")," Expression"),(0,l.kt)("p",null,"For cast expressions we use the provided semantic type;\nthe only trick is that we preserve the extra properties of the input argument.\ne.g. CAST does not remove ",(0,l.kt)("inlineCode",{parentName:"p"},"NOT NULL"),"."),(0,l.kt)("h4",{id:"the-coalesce-function"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"COALESCE")," Function"),(0,l.kt)("p",null,"Coalesce requires type compatibility between all of its arguments.  The result\nis a not null type if we find a not null item in the list.  There should be\nnothing after that item.  Note that ifnull and coalesce are really the same thing\nexcept ifnull must have exactly two arguments."),(0,l.kt)("h4",{id:"the-in-and-not-in-expressions"},"The ",(0,l.kt)("inlineCode",{parentName:"h4"},"IN")," AND ",(0,l.kt)("inlineCode",{parentName:"h4"},"NOT IN")," Expressions"),(0,l.kt)("p",null,"The in predicate is like many of the other multi-argument operators.  All the\nitems must be type compatible.  Note that in this case the nullablity of\nthe items does not matter, only the nullability of the item being tested.\nNote that null in (null) is null, not true."),(0,l.kt)("h4",{id:"aggregate-functions"},"Aggregate Functions"),(0,l.kt)("p",null,"Aggregate functions can only be used in certain places.  For instance\nthey may not appear in a ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause."),(0,l.kt)("h4",{id:"user-defined-functions"},"User Defined Functions"),(0,l.kt)("p",null,"User defined function - this is an external function.\nThere are a few things to check:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"If this is declared without the select keyword then",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"we can't use these in SQL, so this has to be a loose expression"))),(0,l.kt)("li",{parentName:"ul"},"If this is declared with the select keyword then",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"we can ONLY use these in SQL, not in a loose expression"))),(0,l.kt)("li",{parentName:"ul"},"args have to be compatible with formals")),(0,l.kt)("h4",{id:"calling-a-procedure-as-a-function"},"Calling a procedure as a function"),(0,l.kt)("p",null,"There are a few things to check:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"we can't use these in SQL, so this has to be a loose expression"),(0,l.kt)("li",{parentName:"ul"},"args have to be compatible with formals, except"),(0,l.kt)("li",{parentName:"ul"},"the last formal must be an OUT arg and it must be a scalar type"),(0,l.kt)("li",{parentName:"ul"},'that out arg will be treated as the return value of the "function"'),(0,l.kt)("li",{parentName:"ul"},"in code-gen we will create a temporary for it; semantic analysis doesn't care")),(0,l.kt)("h4",{id:"root-expressions"},"Root Expressions"),(0,l.kt)("p",null,"A top level expression defines the context for that evaluation.  Different expressions\ncan have constraints.  e.g. aggregate functions may not appear in the ",(0,l.kt)("inlineCode",{parentName:"p"},"WHERE")," clause of a statement.  There are cases where expression nesting can happen. This nesting changes the evaluation context accordingly, e.g. you can put a nested select in a where clause and that\nnested select could legally have aggregates.  Root expressions keep a stack of nested contexts to facilitate the changes."),(0,l.kt)("h4",{id:"table-factors"},"Table Factors"),(0,l.kt)("p",null,"A table factor is one of three things:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"a table name (a string)  select * from X"),(0,l.kt)("li",{parentName:"ul"},"a select subquery (select X,Y from..) as T2"),(0,l.kt)("li",{parentName:"ul"},"a list of table references select * from (X, Y, Z)\nHere we dispatch to the appropriate helper for each case.")),(0,l.kt)("h4",{id:"joining-with-the-using-clause"},"Joining with the ",(0,l.kt)("inlineCode",{parentName:"h4"},"USING")," Clause"),(0,l.kt)("p",null,"When specifying joins, one of the alternatives is to give the shared\ncolumns in the join e.g. select * from X inner join Y using (a,b).\nThis method validates that all the columns are present on both sides of the\njoin, that they are unique, and they are comparable.\nThe return code tells us if any columns had SENSITIVE data.   See Special Note on JOIN...USING below"),(0,l.kt)("h4",{id:"join-with-the-on-clause"},"JOIN WITH THE ",(0,l.kt)("inlineCode",{parentName:"h4"},"ON")," Clause"),(0,l.kt)("p",null,"The most explicit join condition is a full expression in an ON clause\nthis is like ",(0,l.kt)("inlineCode",{parentName:"p"},"select a,b from X inner join Y on X.id = Y.id;"),"\nThe on expression should be something that can be used as a bool,\nso any numeric will do.\nThe return code tells us if the ON condition used SENSITIVE data."),(0,l.kt)("h4",{id:"table-valued-functions"},"TABLE VALUED FUNCTIONS"),(0,l.kt)("p",null,"Table valued functions can appear anywhere a table is allowed.\nThe validation rules are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"must be a valid function")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"must return a struct type (i.e. a table-valued-function)")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"must have valid arg expressions")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"arg expressions must match formal parameters\nThe name of the resulting table is the name of the function")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},'but it can be aliased later with "AS"'),(0,l.kt)("h3",{parentName:"li",id:"special-note-on-the-select--and-select-t-forms"},"Special Note on the ",(0,l.kt)("inlineCode",{parentName:"h3"},"select *")," and ",(0,l.kt)("inlineCode",{parentName:"h3"},"select T.*")," forms"),(0,l.kt)("p",{parentName:"li"},"The ",(0,l.kt)("inlineCode",{parentName:"p"},"select *")," construct is very popular in many codebases but it can be unsafe to use in production code because, if the schema changes, the code might get columns it does not expect.  Note the extra columns could have appeared anywhere in the result set because the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," applies to the entire result of the ",(0,l.kt)("inlineCode",{parentName:"p"},"FROM")," clause, joins and all, so extra columns are not necessarily at the end and column ordinals are not preserved.  CQL mitigates this situation somewhat with some useful constraints/features:")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"in a ",(0,l.kt)("inlineCode",{parentName:"p"},"select *"),", and indeed in any query, the column names of the select must be unique, this is because:"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"they could form the field names of an automatically generated cursor (see the section on cursors)"),(0,l.kt)("li",{parentName:"ul"},"they could form the field names in a CQL result set (see section on result sets)"),(0,l.kt)("li",{parentName:"ul"},"it's weird/confusing to not have unique names generally"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},"when issuing a ",(0,l.kt)("inlineCode",{parentName:"p"},"select *")," or a ",(0,l.kt)("inlineCode",{parentName:"p"},"select T.*")," CQL will automatically expand the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," into the actual logical columns that exist in the schema at the time the code was compiled"),(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"this is important because if a column had been logically deleted from a table it would be unexpected in the result set even though it is still present in the database and would throw everything off"),(0,l.kt)("li",{parentName:"ul"},"likewise if the schema were to change without updating the code, the code will still get the columns it was compiled with, not new columns")))),(0,l.kt)("p",null,"Expanding the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," at compile time means Sqlite cannot see anything that might tempt it to include different columns in the result."),(0,l.kt)("p",null,"With this done we just have to look at the places a ",(0,l.kt)("inlineCode",{parentName:"p"},"select *")," might appear so we can see if it is safe (or at least reasonably safe) to use ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," and, by extension of the same argument, ",(0,l.kt)("inlineCode",{parentName:"p"},"T.*"),"."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"In an ",(0,l.kt)("inlineCode",{parentName:"em"},"EXISTS")," or ",(0,l.kt)("inlineCode",{parentName:"em"},"NOT EXISTS")," clause like `where not exists (select ")," from x)`*"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"this is perfectly safe; the particular columns do not matter; ",(0,l.kt)("inlineCode",{parentName:"li"},"select *")," is not even expanded in this case.")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"In a statement that produces a result set like `select ")," from table_or_view`*"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"binding to a CQL result set is done by column name and we know those names are unique"),(0,l.kt)("li",{parentName:"ul"},"we won't include any columns that are logically deleted, so if you try to use a deleted column you'll get a compile time error")),(0,l.kt)("p",null,"In a cursor statement like ",(0,l.kt)("inlineCode",{parentName:"p"},"declare C cursor for select * from table_or_view")," there are two cases here:"),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Automatic Fetch  ",(0,l.kt)("inlineCode",{parentName:"em"},"fetch C;"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"in this case you don't specify the column names yourself;2 they are inferred"),(0,l.kt)("li",{parentName:"ul"},"you are therefore binding to the columns by name, so new columns in the cursor would be unused (until you choose to start using them)"),(0,l.kt)("li",{parentName:"ul"},"if you try to access a deleted column you get a compile-time error")),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"Manual Fetch:  ",(0,l.kt)("inlineCode",{parentName:"em"},"fetch C into a, b, c;"))),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"In this case the number and type of the columns must match exactly with the specified variables"),(0,l.kt)("li",{parentName:"ul"},"If new columns are added, deleted, or changed, the above code will not compile")),(0,l.kt)("p",null,"So considering the cases above we can conclude that auto expanding the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," into the exact columns present in the compile-time schema version ensures that any incompatible changes result in compile time errors. Adding columns to tables does not cause problems even if the code is not recompiled. This makes the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," construct much safer, if not perfect, but no semantic would be safe from arbitrary schema changes without recompilation.  At the very least here we can expect a meaningful runtime error rather than silently fetching the wrong columns."),(0,l.kt)("h3",{id:"special-note-on-the-joinusing-form"},"Special Note on the JOIN...USING form"),(0,l.kt)("p",null,"CQL varies slightly from SQLite in terms of the expected results for joins if the USING syntax is employed.  This is not the most common syntax (typically an ON clause is used) but Sqlite has special rules for this kind of join."),(0,l.kt)("p",null,"Let's take a quick look.  First some sample data:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"create table A( id integer, a text, b text);\ncreate table B( id integer, c text, d text);\n\ninsert into A values(1, 'a1', 'b1');\ninsert into B values(1, 'c1', 'd1');\ninsert into A values(2, 'a2', 'b2');\ninsert into B values(2, 'c2', 'd2');\n")),(0,l.kt)("p",null,"Now let's look at the normal join; this is our reference:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"select * from A T1 inner join B T2 on T1.id = T2.id;\n\nresult:\n\n1|a1|b1|1|c1|d1\n2|a2|b2|2|c2|d2\n")),(0,l.kt)("p",null,"As expected, you get all the columns of A, and all the columns of B.  The 'id' column appears twice."),(0,l.kt)("p",null,"However, with the ",(0,l.kt)("inlineCode",{parentName:"p"},"USING")," syntax:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"select * T1 inner join B T2 using (id);\n\nresult:\n\n1|a1|b1|c1|d1\n2|a2|b2|c2|d2\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," column is now appearing exactly once.  However, the situation is not so simple as that.  It seems that what hapened was that the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," expansion has not included two copies of the ",(0,l.kt)("inlineCode",{parentName:"p"},"id"),".  The following cases show that both copies of ",(0,l.kt)("inlineCode",{parentName:"p"},"id")," are still logically in the join."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"select T1.*, 'xxx', T2.* from A T1 inner join B T2 using (id);\n\nresult:\n\n1|a1|b1|xxx|1|c1|d1\n2|a2|b2|xxx|2|c2|d2\n")),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"T2.id")," column is part of the join, it just wasn't part of the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")),(0,l.kt)("p",null,"In fact, looking further:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},"select T1.id, T1.a, T1.b, 'xxx', T2.id, T2.c, T2.d from A T1 inner join B T2 using (id);\n\nresult:\n\n1|a1|b1|xxx|1|c1|d1\n2|a2|b2|xxx|2|c2|d2\n")),(0,l.kt)("p",null,"There is no doubt, ",(0,l.kt)("inlineCode",{parentName:"p"},"T2.id")," is a valid column and can be used in expressions freely. That means the column cannot be removed from the type calculus."),(0,l.kt)("p",null,"Now in CQL, the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"T.*")," forms are automatically expanded; SQLite doesn't see the ",(0,l.kt)("inlineCode",{parentName:"p"},"*"),".  This is done so that if any columns have been logically deleted they can be elided from the result set.  Given that this happens, the ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," operator will expand to ALL the columns.  Just the same as if you did ",(0,l.kt)("inlineCode",{parentName:"p"},"T1.*")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"T2.*"),"."),(0,l.kt)("p",null,(0,l.kt)("em",{parentName:"p"},"As a result, in CQL, there is no difference between  the ",(0,l.kt)("inlineCode",{parentName:"em"},"USING")," form of a join and the ",(0,l.kt)("inlineCode",{parentName:"em"},"ON")," form of a join.")),(0,l.kt)("p",null,"In fact, only the ",(0,l.kt)("inlineCode",{parentName:"p"},"select *")," form could possibly be different, so in most cases this ends up being moot anyway.  Typically, you don't need to use ",(0,l.kt)("inlineCode",{parentName:"p"},"*")," in the presence of joins because of name duplication and ambiguity of the column names of the result set.  CQL's automatic expansion means you have a much better idea exactly what columns you will get - those that were present in the schema you declared."))}d.isMDXComponent=!0}}]);