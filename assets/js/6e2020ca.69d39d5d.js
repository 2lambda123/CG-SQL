"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7586],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=u(e,["components","mdxType","originalType","parentName"]),f=c(n),m=o,g=f["".concat(l,".").concat(m)]||f[m]||p[m]||a;return n?r.createElement(g,i(i({ref:t},s),{},{components:n})):r.createElement(g,i({ref:t},s))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var u={};for(var l in t)hasOwnProperty.call(t,l)&&(u[l]=t[l]);u.originalType=e,u.mdxType="string"==typeof e?e:o,i[1]=u;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9426:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return p}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],u={slug:"free-empty-results",title:"Change in No-Result Semantics",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql"]},l=void 0,c={permalink:"/blog/free-empty-results",editUrl:"https://github.com/facebookincubator/CG-SQL/edit/master/website/blog/blog/2021-02-10-free-empty-results.md",source:"@site/blog/2021-02-10-free-empty-results.md",title:"Change in No-Result Semantics",description:"Important change in CQL semantics.",date:"2021-02-10T00:00:00.000Z",formattedDate:"February 10, 2021",tags:[{label:"facebook",permalink:"/blog/tags/facebook"},{label:"cg-sql",permalink:"/blog/tags/cg-sql"}],readingTime:.915,truncated:!1,authors:[{name:"CG/SQL Team",title:"Maintainer of CG/SQL",url:"https://github.com/facebookincubator",imageURL:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4"}],frontMatter:{slug:"free-empty-results",title:"Change in No-Result Semantics",author:"CG/SQL Team",author_title:"Maintainer of CG/SQL",author_url:"https://github.com/facebookincubator",author_image_url:"https://avatars2.githubusercontent.com/u/69631?s=200&v=4",tags:["facebook","cg-sql"]},prevItem:{title:"Introducing Select .. If Nothing",permalink:"/blog/select-if-nothing"},nextItem:{title:'Introducing Type "Kinds"',permalink:"/blog/type-kinds-intro"}},s={authorsImageUrls:[void 0]},p=[],f={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Important change in CQL semantics."),(0,a.kt)("p",null,'Previously if you did an early return, or fall through the end, from a procedure that is supposed to return a result set\nbut did not in fact provide one, you would get a fake SQLITE_ERROR.  Now you get an empty result set for "free".'),(0,a.kt)("p",null,"This interpretation seems much more natural and avoids a lot of really annoying stub selects to comply with the contract."),(0,a.kt)("p",null,"This also works for the ",(0,a.kt)("inlineCode",{parentName:"p"},"out")," statement in the same fashion."),(0,a.kt)("p",null,"If you want to return an error, use ",(0,a.kt)("inlineCode",{parentName:"p"},"throw"),". This is a lot more natural..."),(0,a.kt)("p",null,"examples:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sql"},"-- this gives you an empty result set if x <= 0\ncreate proc maybe_return(x integer)\nbegin\n   if x > 0 then\n     select * from foo where foo.y > x;\n   end if;\nend;\n\n-- so does this\ncreate proc maybe_return(x integer)\nbegin\n  if x <= 0 then\n     return;\n  end if;\n  select * from foo where foo.y > x;\nend;\n\n-- so does this\ncreate proc maybe_out(x integer)\nbegin\n  if x <= 0 then\n    declare C cursor for select etc.\n    out C;\n  end if;\nend;\n")))}m.isMDXComponent=!0}}]);