"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[369],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),d=i,m=c["".concat(o,".").concat(d)]||c[d]||h[d]||r;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=c;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,s[1]=l;for(var p=2;p<r;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4879:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return h}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),s=["components"],l={id:"int04",title:"Part 4: Testing",sidebar_label:"Part 4: Testing"},o=void 0,p={unversionedId:"int04",id:"int04",title:"Part 4: Testing",description:"\x3c!---",source:"@site/../CQL_Guide/int04.md",sourceDirName:".",slug:"/int04",permalink:"/cql-guide/int04",draft:!1,tags:[],version:"current",lastUpdatedBy:"Raoul Foaleng",lastUpdatedAt:1668753799,formattedLastUpdatedAt:"11/18/2022",frontMatter:{id:"int04",title:"Part 4: Testing",sidebar_label:"Part 4: Testing"},sidebar:"someSidebar",previous:{title:"Part 3: C Code Generation",permalink:"/cql-guide/int03"},next:{title:"Part 5: CQL Runtime",permalink:"/cql-guide/int05"}},u={},h=[{value:"Preface",id:"preface",level:3},{value:"Testing",id:"testing",level:2},{value:"Parse Tests",id:"parse-tests",level:3},{value:"Sematic Tests",id:"sematic-tests",level:3},{value:"Code Generation Tests",id:"code-generation-tests",level:3},{value:"Run Tests",id:"run-tests",level:3},{value:"Schema Upgrade Testing",id:"schema-upgrade-testing",level:3},{value:"&quot;Previous Schema&quot; Validation",id:"previous-schema-validation",level:4},{value:"Packing List",id:"packing-list",level:4},{value:"<code>upgrade_validate.sql</code>",id:"upgrade_validatesql",level:4},{value:"Prosecution of the Upgrade Test",id:"prosecution-of-the-upgrade-test",level:4},{value:"Testing the <code>#line</code> directives produced by CQL",id:"testing-the-line-directives-produced-by-cql",level:3},{value:"Summary",id:"summary",level:3}],c={toc:h};function d(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h3",{id:"preface"},"Preface"),(0,r.kt)("p",null,"Part 4 continues with a discussion of the essentials testing frameworks for the CQL compiler.\nAs in the previous sections, the goal here is not to go over every detail but rather to give\na sense of how testing happens in general -- the core strategies and implementation choices --\nso that when reading the tests you will have an idea how it all hangs together. To accomplish\nthis, various key tools will be explained in detail as well as selected examples of their use."),(0,r.kt)("h2",{id:"testing"},"Testing"),(0,r.kt)("p",null,"There are several types of tests in the system, all of which are launched by the ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sh"),"\nscript which builds the compiler and does a full test pass, there are well over 3000 tests\nas of this writing.  Broadly these are in these few categories:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"parse tests")," : these are in ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sql")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the test script verifies that the compiler can parse this file with no errors"),(0,r.kt)("li",{parentName:"ul"},"the parse pass echoes what it read in normalized form, this is compared against a reference copy and any differences are noted"),(0,r.kt)("li",{parentName:"ul"},"each difference can be accepted or rejected; rejecting a difference stops the script"),(0,r.kt)("li",{parentName:"ul"},"verification here is very light and in fact much of parsing is actually tested in the next pass"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"semantic tests")," : these are in ",(0,r.kt)("inlineCode",{parentName:"p"},"sem_test.sql")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the file has no parse errors but it has MANY semantic errors, nearly every such error in fact"),(0,r.kt)("li",{parentName:"ul"},"semantic analysis is run with the ",(0,r.kt)("inlineCode",{parentName:"li"},"--test")," flag which produces AST fragments and echoed CQL"),(0,r.kt)("li",{parentName:"ul"},"the test file includes patterns which either must appear, or must not appear, in the output to pass the test"),(0,r.kt)("li",{parentName:"ul"},"the AST includes full type information, so virtually anything about the semantic results can be, and is, verified"),(0,r.kt)("li",{parentName:"ul"},"many tests are designed to exercise the parser as well, ensuring that the correct AST was built and then analyzed",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. operator precedence can be verified here"),(0,r.kt)("li",{parentName:"ul"},"the AST echoing logic can also be verified here, e.g. placement of parenthesis in the echoed output"))),(0,r.kt)("li",{parentName:"ul"},"any semantic rewrites can be verified here because the rewritten form is emitted in the test output, not the original input"),(0,r.kt)("li",{parentName:"ul"},"all other operations that happen during the semantic pass (e.g. constant evaluation) are also tested here"),(0,r.kt)("li",{parentName:"ul"},"the full semantic output is also normalized (e.g. removing line numbers) and is compared against a reference copy, any differences are noted"),(0,r.kt)("li",{parentName:"ul"},"each difference can be accepted or rejected; rejecting a difference stops the script"),(0,r.kt)("li",{parentName:"ul"},'there are additional files to test different modes like "previous schema" validation (q.v.) as well as dev mode and the schema migrator, the files in this family are: ',(0,r.kt)("inlineCode",{parentName:"li"},"sem_test.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sem_test_dev.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sem_test_migrate.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"sem_test_prev.sql")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"code gen tests")," : the basic test in this family is ",(0,r.kt)("inlineCode",{parentName:"p"},"cg_test.sql")," which has the C codegen tests"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"these test files do pattern matching just like the semantic case except the codegen output is checked rather than the AST"),(0,r.kt)("li",{parentName:"ul"},"the test output is normalized and checked against a reference, just like the semantic tests"),(0,r.kt)("li",{parentName:"ul"},"there is generally no need to check for errors in test output because all errors are detected during semantic analysis"),(0,r.kt)("li",{parentName:"ul"},"there are MANY tests in this family, at least one for each of the various generators:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cg_test.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_assembly_query.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_base_fragment.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_base_java_fragment.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_c_type_getters.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_extension_fragment.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_extension_java_fragment.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_generate_copy.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_generated_from.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_json_schema.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_no_result_set.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_out_object.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_out_union.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_prev_invalid.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_query_plan.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_schema_upgrade.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_single_proc_not_nullable.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_single_proc_nullable.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_suppressed.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_test_helpers.sql"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"cg_test_with_object.sql"),","))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"run tests")," : the main run test creatively named ",(0,r.kt)("inlineCode",{parentName:"p"},"run_test.sql")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this test code is compiled and excuted"),(0,r.kt)("li",{parentName:"ul"},"the test contains expectations like any other unit test"),(0,r.kt)("li",{parentName:"ul"},"it has CQL parts and C parts, the C parts test the C API to the procedures, plus do initial setup"),(0,r.kt)("li",{parentName:"ul"},"these test include uses of all CQL features and all of the CQL runtime features"),(0,r.kt)("li",{parentName:"ul"},'the schema upgrader tests are arguably "run tests" as well in that they run the code but they have a much different verification strategy'))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"unit test")," : the compiler supports the ",(0,r.kt)("inlineCode",{parentName:"p"},"--run_unit_tests")," flag"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this causes the compile to self-test certain of its helper functions that are otherwise difficult to test"),(0,r.kt)("li",{parentName:"ul"},"mostly this is buffers that need to be growable to but in practice only grow with huge input files"),(0,r.kt)("li",{parentName:"ul"},"other exotic cases that would be hard to reliability hit in some other fashion are covered by this code")))),(0,r.kt)("p",null,"Test coverage is maintained at 100% line coverage (sometimes there are a few\nhours when it drops to 99.9% or something like that but this never lasts).\nBranch coverage is not especially targetted but is nonethless quite high. To\nsee the true branch coverage you have to build the compiler with the asserts\n(Contract and Invariant) off.  Last time it was measured, it was well over 80%."),(0,r.kt)("p",null,"To start the tests you should run ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sh"),", this launches ",(0,r.kt)("inlineCode",{parentName:"p"},"common/test_common.sh")," to do the work.\nThis structure allows anyone to make their own harness that launches the common test passes and adds\ntheir own extra tests, or passes in additional flags.  ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sh")," itself uses ",(0,r.kt)("inlineCode",{parentName:"p"},"make")," to\nbuild the compiler."),(0,r.kt)("p",null,"As mentioned above, ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sh")," normally allows the user to accept or reject differences in output, but\nthis is automatically disabled in non-terminal environments, and manually disabled if the script is\nrun with ",(0,r.kt)("inlineCode",{parentName:"p"},"--non_interactive"),". ",(0,r.kt)("inlineCode",{parentName:"p"},"ok.sh")," can be run to copy all of the outputs from the most recent test\nrun over the previous references."),(0,r.kt)("p",null,"To get the coverage report, use ",(0,r.kt)("inlineCode",{parentName:"p"},"cov.sh")," which in turn launches ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sh")," with suitable flags\nand then assembles the coverage report using ",(0,r.kt)("inlineCode",{parentName:"p"},"gcovr"),"."),(0,r.kt)("h3",{id:"parse-tests"},"Parse Tests"),(0,r.kt)("p",null,"Looking at ",(0,r.kt)("inlineCode",{parentName:"p"},"test/test_common.sh")," we find the source for the most basic test.  This is entirely\nunremarkable stuff."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'basic_test() {\n  echo \'--------------------------------- STAGE 2 -- BASIC PARSING TEST\'\n  echo running "${TEST_DIR}/test.sql"\n  if ! ${CQL} --dev --in "${TEST_DIR}/test.sql" >"${OUT_DIR}/test.out"\n  then\n   echo basic parsing test failed\n   failed\n  fi\n  echo "  computing diffs (empty if none)"\n  on_diff_exit test.out\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'it\'s "STAGE 2" because "STAGE 1" was the build'),(0,r.kt)("li",{parentName:"ul"},"all it tries to do is run the compiler over ",(0,r.kt)("inlineCode",{parentName:"li"},"test/test.sql")),(0,r.kt)("li",{parentName:"ul"},"if there are errors the test fails"),(0,r.kt)("li",{parentName:"ul"},"if there are any differences between ",(0,r.kt)("inlineCode",{parentName:"li"},"test.out")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"test.out.ref")," the test fails")),(0,r.kt)("p",null,"That's it."),(0,r.kt)("h3",{id:"sematic-tests"},"Sematic Tests"),(0,r.kt)("p",null,"The semantic tests are not much different but this is where the pattern matching comes in."),(0,r.kt)("p",null,"First let's look at the shell script:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'semantic_test() {\n  echo \'--------------------------------- STAGE 4 -- SEMANTIC ANALYSIS TEST\'\n  echo running semantic analysis test\n  if ! sem_check --sem --ast --dev --in "${TEST_DIR}/sem_test.sql" >"${OUT_DIR}/sem_test.out" 2>"${OUT_DIR}/sem_test.err"\n  then\n     echo "CQL semantic analysis returned unexpected error code"\n     cat "${OUT_DIR}/sem_test.err"\n     failed\n  fi\n\n  echo validating output trees\n  if ! "${OUT_DIR}/cql-verify" "${TEST_DIR}/sem_test.sql" "${OUT_DIR}/sem_test.out"\n  then\n    echo failed verification\n    failed\n  fi\n\n  echo running dev semantic analysis test\n  ... same thing again for sem_test_dev.sql\n\n  echo "  computing diffs (empty if none)"\n  on_diff_exit sem_test.out\n  on_diff_exit sem_test.err\n  ... same thing again for sem_test_dev.out and .err\n}\n')),(0,r.kt)("p",null,"There are basically 3 steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"run the compiler over ",(0,r.kt)("inlineCode",{parentName:"li"},"test/sem_test.sql"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"fail if this generates no errors (yes you read that right, see below)"))),(0,r.kt)("li",{parentName:"ul"},"do the pattern matching on the output using ",(0,r.kt)("inlineCode",{parentName:"li"},"cql-verify")," to ensure the patterns match (discussed below)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"fail if the output is not consistent with the patterns"))),(0,r.kt)("li",{parentName:"ul"},"compare the reference output for the AST and the errors",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"fail if there are any differences")))),(0,r.kt)("p",null,"In the first step the compiler MUST produce an error code, let's look at ",(0,r.kt)("inlineCode",{parentName:"p"},"sem_check")," to see why:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"sem_check() {\n  ${CQL} \"$@\"\n  if [ \"$?\" -ne \"1\" ]\n  then\n     echo 'All semantic analysis checks have errors in the test'\n     echo 'the normal return code is \"1\" -- any other return code is bad news'\n     echo 'A return code of zero indicates we reported success in the face of errors'\n     echo 'A return code other than 1 indicates an unexpected fatal error of some type'\n     return 1\n  fi\n}\n")),(0,r.kt)("p",null,"In short ",(0,r.kt)("inlineCode",{parentName:"p"},"sem_test.sql")," is FULL of semantic errors, that's part of the test.  If the compiler\nreports success something is ",(0,r.kt)("em",{parentName:"p"},"seriously")," wrong."),(0,r.kt)("p",null,"In the next phase we're going to do some pattern matching, let's look at a couple of examples\nto illustrate how this works.  The program ",(0,r.kt)("inlineCode",{parentName:"p"},"cql-verify")," actually does all this matching and\nthat program is itself written in (mostly) CQL which is cute.\nIt can be found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"tester")," directory."),(0,r.kt)("p",null,"Here's a very simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- TEST: we'll be using printf in lots of places in the tests as an external proc\n-- + {declare_proc_no_check_stmt}: ok\n-- - Error\nDECLARE PROCEDURE printf NO CHECK;\n")),(0,r.kt)("p",null,"The code under test is of course ",(0,r.kt)("inlineCode",{parentName:"p"},"DECLARE PROCEDURE printf NO CHECK"),".  The patterns happen\nimmediately before this code.  Let's look at each line:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-- TEST: etc.")," : this is just a comment, it means nothing and serves no purpose other than documentation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-- + {declare_proc_no_check_stmt}: ok")," : the comment stats with ",(0,r.kt)("inlineCode",{parentName:"li"},'" + "'),", this is a trigger",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the test output from the statement under test must include indicated text"),(0,r.kt)("li",{parentName:"ul"},"this happens to be the text for the AST of ",(0,r.kt)("inlineCode",{parentName:"li"},"declare_proc_no_check_stmt")," after semantic success"),(0,r.kt)("li",{parentName:"ul"},"there is no type info hence the ",(0,r.kt)("inlineCode",{parentName:"li"},"ok")," designation (recall ",(0,r.kt)("inlineCode",{parentName:"li"},"SEM_TYPE_OK"),")"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-- Error")," : the comment starts with ",(0,r.kt)("inlineCode",{parentName:"li"},'" - "'),", this is a trigger",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the test output from the statement under test must NOT include indicated text"),(0,r.kt)("li",{parentName:"ul"},"in this case that means no reported erros")))),(0,r.kt)("p",null,"Easy enough.  Now does this happen?"),(0,r.kt)("p",null,"The test output includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},'text like "The statement ending at line XXXX" where XXXX is appropriate line number'),(0,r.kt)("li",{parentName:"ul"},"an echo of the statement that was analyzed (after any rewrites)"),(0,r.kt)("li",{parentName:"ul"},"the AST of that statement including semantic type info that was computed")),(0,r.kt)("p",null,"Using the value of XXXX the tester searches the test file in this case ",(0,r.kt)("inlineCode",{parentName:"p"},"sem_test.sql"),", it\nextracts the test patterns that happen AFTER the previous XXXX value for the previous statement\nand up to the indicated line number.  This is The Price Is Right algorithm where you\nread up to the designated lines without going over."),(0,r.kt)("p",null,"Each pattern is matched, or not matched, using the SQL ",(0,r.kt)("inlineCode",{parentName:"p"},"LIKE")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"NOT LIKE")," operator.  In case\nof errors the tester writes out the actual output and the expected patterns having all this information\nhandy."),(0,r.kt)("p",null,'The line numbers are all changed to literally "XXXX" after this pass so that the difference in\nlater passes is not a cascade of of trivial line number changes in otherwise identical output.'),(0,r.kt)("p",null,"Let's look at another example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- TEST: create a table using type discrimation: kinds\n-- + {create_table_stmt}: with_kind: { id: integer<some_key>, cost: real<dollars>, value: real<dollars> }\n-- + {col_def}: id: integer<some_key>\n-- + {col_def}: cost: real<dollars>\n-- + {col_def}: value: real<dollars>\n-- - Error\ncreate table with_kind(\n  id integer<some_key>,\n  cost real<dollars>,\n  value real<dollars>\n);\n")),(0,r.kt)("p",null,"This reads pretty easily now:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{create_table_stmt}")," : the struct type of the table must be an exact match for what is expected"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{col_def}")," : there are 3 different ",(0,r.kt)("inlineCode",{parentName:"li"},"{col_def}")," nodes, one for each column"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"- Error")," : there are no reported errors")),(0,r.kt)("p",null,"So there are no errors reported nor are there any in the AST.  At least the part of the AST that was\nchecked.  The AST actually had other stuff too but it's normal to just test the \"essential\" stuff.\nThere are many tests that try many variations and we don't want to check every fact in every case\nof every test."),(0,r.kt)("p",null,"If you want to see the whole AST output for this, it's easy enough.  It's sitting in ",(0,r.kt)("inlineCode",{parentName:"p"},"sem_test.out.ref")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"The statement ending at line XXXX\n\nCREATE TABLE with_kind(\n  id INTEGER<some_key>,\n  cost REAL<dollars>,\n  value REAL<dollars>\n);\n\n  {create_table_stmt}: with_kind: { id: integer<some_key>, cost: real<dollars>, value: real<dollars> }\n  | {create_table_name_flags}\n  | | {table_flags_attrs}\n  | | | {int 0}\n  | | {name with_kind}\n  | {col_key_list}\n    | {col_def}: id: integer<some_key>\n    | | {col_def_type_attrs}: ok\n    |   | {col_def_name_type}\n    |     | {name id}\n    |     | {type_int}: integer<some_key>\n    |       | {name some_key}\n    | {col_key_list}\n      | {col_def}: cost: real<dollars>\n      | | {col_def_type_attrs}: ok\n      |   | {col_def_name_type}\n      |     | {name cost}\n      |     | {type_real}: real<dollars>\n      |       | {name dollars}\n      | {col_key_list}\n        | {col_def}: value: real<dollars>\n          | {col_def_type_attrs}: ok\n            | {col_def_name_type}\n              | {name value}\n              | {type_real}: real<dollars>\n                | {name dollars}\n")),(0,r.kt)("p",null,"As you can see there was potentially a lot more than could have been verified but those view key lines were\nselected because their correctness really implies the rest.  In fact just the ",(0,r.kt)("inlineCode",{parentName:"p"},"{create_table_stmt}")," line\nreally was enough to know that everthing was fine."),(0,r.kt)("p",null,"Let's look at one more example, this time on that is checking for errors.  Many tests check for\nerrors because correctly reporting errors is the primary job of ",(0,r.kt)("inlineCode",{parentName:"p"},"sem.c"),".  It's fair to say that\nthere are more tests for error cases than there are for correct cases because there are a lot\nmore ways to write code incorrectly than correctly.  Here's the test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-SQL"},"-- TEST: join with bogus ON expression type\n-- + Error % expected numeric expression 'ON'\n-- +1 Error\n-- + {select_stmt}: err\n-- + {on}: err\nselect * from foo\ninner join bar as T2 on 'v'\nwhere 'w'\nhaving 'x'\nlimit 'y';\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"+ Error % expected numeric expression 'ON'")," : there must be a reported Error message with the indicated error text"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"+1 Error")," : this indicates that there must be ",(0,r.kt)("em",{parentName:"li"},"exactly"),' 1 match for the pattern "Error" (i.e. exactly one error)',(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"note that there are several problems with the test statement but error processing is supposed to stop after the first"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-- + {on}: err")," : verifies that the ON clause was marked as being in error"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"-- + {select_stmt}: err")," : verifies that the error correctly propogated up to the top level statement")),(0,r.kt)("p",null,"Note that the patterns can be in any order and every pattern is matched against the whole input so for instance:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-- + {on}: err\n-- + {on}: err\n")),(0,r.kt)("p",null,"The above does not imply that there are two such ",(0,r.kt)("inlineCode",{parentName:"p"},"{on}")," nodes.  The second line will match the same text as the first.\nTo to enforce that there were exactly two matches you use:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"-- +2 {on}: err\n")),(0,r.kt)("p",null,'There is no syntax for "at least two matches" though one could easily be added.  So far it hasn\'t been especially\nnecessary.'),(0,r.kt)("p",null,'As we\'ll see this simple pattern is used in many other tests.  All that is required for it work is output with\nlines of the form "The statement ending at line XXXX"'),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"sem_test_dev.sql")," test file is a set of tests that are run with the ",(0,r.kt)("inlineCode",{parentName:"p"},"--dev")," flag passed to CQL.  This\nis the mode where certain statements that are prohibited in production code are verified.  This file is\nvery small indeed and the exact prohibitions are left as an exercise to the reader."),(0,r.kt)("h3",{id:"code-generation-tests"},"Code Generation Tests"),(0,r.kt)("p",null,'The test logic for the "codegen" family of tests (',(0,r.kt)("inlineCode",{parentName:"p"},"cg_test*.sql"),") is virtually identical to the semantic\ntest family. The same testing utililty is used, and it works the same way, looking for the same marker.\nThe only difference in this stage is that the test output is generated code, not an AST. The codegen tests\nare a great way to lock down important code fragments in the output.  Note that the codegen tests do not actually\nexecute any generated code.  That's the next category."),(0,r.kt)("p",null,"Here's an sample test:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- TEST: unused temp in unary not emitted\n-- - cql_int32 _tmp_int_0 = 0;\n-- - cql_int32 _tmp_int_1 = 0;\n-- + o = i.value;\n-- + o = - 1;\ncreate proc unused_temp(i integer, out o integer not null)\nbegin\n  set o := coalesce(i, -1);\nend;\n")),(0,r.kt)("p",null,"This test is verifying one of the optimizations that we talked about in\n",(0,r.kt)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/int03#result-variables"},"Part 3"),".\nIn many cases temporary variables for results (such as function calls) can be elided."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"- cql_int32 _tmp_int_0 = 0;")," : verifies that this temporary is NOT created"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"- cql_int32 _tmp_int_1 = 0;")," : likewise"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"+ o = i.value;")," : the first alternative in coalesce directly assigns to ",(0,r.kt)("inlineCode",{parentName:"li"},"o")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"+ o = - 1;")," : as does the second")),(0,r.kt)("p",null,"It might be helpful to look at the full output, which as always is in a ",(0,r.kt)("inlineCode",{parentName:"p"},".ref")," file.\nIn this case ",(0,r.kt)("inlineCode",{parentName:"p"},"cg_test.c.ref"),".  Here is the full output with the line number\nnormalized:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'// The statement ending at line XXXX\n\n/*\nCREATE PROC unused_temp (i INTEGER, OUT o INTEGER NOT NULL)\nBEGIN\n  SET o := coalesce(i, -1);\nEND;\n*/\n\n#define _PROC_ "unused_temp"\n// export: DECLARE PROC unused_temp (i INTEGER, OUT o INTEGER NOT NULL);\nvoid unused_temp(cql_nullable_int32 i, cql_int32 *_Nonnull o) {\n  cql_contract_argument_notnull((void *)o, 2);\n\n  *o = 0; // set out arg to non-garbage\n  do {\n    if (!i.is_null) {\n      *o = i.value;\n      break;\n    }\n    *o = - 1;\n  } while (0);\n\n}\n#undef _PROC_\n')),(0,r.kt)("p",null,"As we can see, the test has picked out the bits that it wanted to verify. The ",(0,r.kt)("inlineCode",{parentName:"p"},"coalesce"),"\nfunction is verified elsewhere -- in this test we're making sure that this pattern doesn't cause\nextra temporaries."),(0,r.kt)("p",null,"Let's take a quick look at the part of ",(0,r.kt)("inlineCode",{parentName:"p"},"test_common.sh")," that runs this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'code_gen_c_test() {\n  echo \'--------------------------------- STAGE 5 -- C CODE GEN TEST\'\n  echo running codegen test\n  if ! ${CQL} --test --cg "${OUT_DIR}/cg_test_c.h" "${OUT_DIR}/cg_test_c.c" \\\n    "${OUT_DIR}/cg_test_exports.out" --in "${TEST_DIR}/cg_test.sql" \\\n    --global_proc cql_startup --generate_exports 2>"${OUT_DIR}/cg_test_c.err"\n  then\n    echo "ERROR:"\n    cat "${OUT_DIR}/cg_test_c.err"\n    failed\n  fi\n\n  echo validating codegen\n  if ! "${OUT_DIR}/cql-verify" "${TEST_DIR}/cg_test.sql" "${OUT_DIR}/cg_test_c.c"\n  then\n    echo "ERROR: failed verification"\n    failed\n  fi\n\n  echo testing for successful compilation of generated C\n  rm -f out/cg_test_c.o\n  if ! do_make out/cg_test_c.o\n  then\n    echo "ERROR: failed to compile the C code from the code gen test"\n    failed\n  fi\n\n  ...\n\n  echo "  computing diffs (empty if none)"\n  on_diff_exit cg_test_c.c\n  on_diff_exit cg_test_c.h\n\n  ... other tests\n}\n')),(0,r.kt)("p",null,"Briefly reviewing this, we see the following important steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{CQL} --test --cg etc.")," : run the compiler on the test input",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the test fails if there are any errors"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cql-verify")," : performs the pattern matching",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the output has the same statement markers as in the semantic case"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"do_make")," : use ",(0,r.kt)("inlineCode",{parentName:"li"},"make")," to build the generated code ensuring it compiles cleanly",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"if the C compiler returns any failure, the test fails"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"on_diff_exit")," : compares the test output to the reference output",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"any difference fails the test")))),(0,r.kt)("p",null,"This is all remarkably similar to the semantic tests. All the code generators\nare tested in the same way."),(0,r.kt)("h3",{id:"run-tests"},"Run Tests"),(0,r.kt)("p",null,'The last category of tests actually does execution.  The main "run test" happens\nat "stage 13", because there are ',(0,r.kt)("em",{parentName:"p"},"many")," codegen tests for the various\noutput formats and these all pass before before we try to execute anything.\nThis is not so bad because the tests are quite quick with a full test pass taking\nless than 90s on my laptop."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'run_test() {\n  echo \'--------------------------------- STAGE 13 -- RUN CODE TEST\'\n  echo running codegen test with execution\n  if ! cc -E -x c -w "${TEST_DIR}/run_test.sql" \\\n    >"${OUT_DIR}/run_test_cpp.out"\n  then\n    echo preprocessing failed.\n    failed\n  elif ! ${CQL} --nolines \\\n    --cg "${OUT_DIR}/run_test.h" "${OUT_DIR}/run_test.c" \\\n    --in "${OUT_DIR}/run_test_cpp.out" \\\n    --global_proc cql_startup --rt c\n  then\n    echo codegen failed.\n    failed\n  elif ! (echo "  compiling code"; do_make run_test )\n  then\n    echo build failed\n    failed\n  elif ! (echo "  executing tests"; "./${OUT_DIR}/a.out")\n  then\n    echo tests failed\n    failed\n  fi\n  ...\n')),(0,r.kt)("p",null,"The main structure is mostly what one would expect:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cc -E -x c")," : this is used to pre-process the run test file so that we can use C pre-processor features to define tests",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"there are quite a few helpful macros as we'll see"),(0,r.kt)("li",{parentName:"ul"},"if pre-processing fails, the test fails"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"{CQL} --nolines --cg ...")," : this is used to create the ",(0,r.kt)("inlineCode",{parentName:"li"},".h")," and ",(0,r.kt)("inlineCode",{parentName:"li"},".c")," file for the compiland",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"--nolines")," is used to suppress the ",(0,r.kt)("inlineCode",{parentName:"li"},"#")," directives that would associate the generated code with the .sql file"),(0,r.kt)("li",{parentName:"ul"},"compilation failures cause the test to fail"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"do_make")," : as before this causes ",(0,r.kt)("inlineCode",{parentName:"li"},"make")," to build the compiland (",(0,r.kt)("inlineCode",{parentName:"li"},"run_test"),")",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this build target includes the necessary bootstrap code to open a database and start the tests"),(0,r.kt)("li",{parentName:"ul"},"any failures cause the test to fail"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"a.out")," : the tests execute",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the tests return a failure status code if anything goes wrong"),(0,r.kt)("li",{parentName:"ul"},"any failure causes the test to fail")))),(0,r.kt)("p",null,"The test file ",(0,r.kt)("inlineCode",{parentName:"p"},"run_test.sql")," includes test macros from ",(0,r.kt)("inlineCode",{parentName:"p"},"cqltest.h")," -- all of these are very\nsimple.  The main ones are ",(0,r.kt)("inlineCode",{parentName:"p"},"BEGIN_SUITE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"END_SUITE"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"BEGIN_TEST")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"END_TEST")," for\nstructure; and ",(0,r.kt)("inlineCode",{parentName:"p"},"EXPECT")," to verify a boolean expression."),(0,r.kt)("p",null,"Here's a simple test case with several expectations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"BEGIN_TEST(arithmetic)\n  EXPECT_SQL_TOO((1 + 2) * 3 == 9);\n  EXPECT_SQL_TOO(1 + 2 * 3 == 7);\n  EXPECT_SQL_TOO(6 / 3 == 2);\n  EXPECT_SQL_TOO(7 - 5 == 2);\n  EXPECT_SQL_TOO(6 % 5 == 1);\n  EXPECT_SQL_TOO(5 / 2.5 == 2);\n  EXPECT_SQL_TOO(-(1+3) == -4);\n  EXPECT_SQL_TOO(-1+3 == 2);\n  EXPECT_SQL_TOO(1+-3 == -2);\n  EXPECT_SQL_TOO(longs.neg == -1);\n  EXPECT_SQL_TOO(-longs.neg == 1);\n  EXPECT_SQL_TOO(- -longs.neg == -1);\nEND_TEST(arithmetic)\n")),(0,r.kt)("p",null,"We should also reveal ",(0,r.kt)("inlineCode",{parentName:"p"},"EXPECT_SQL_TOO"),", discussed below:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"-- use this for both normal eval and SQLite eval\n#define EXPECT_SQL_TOO(x) EXPECT(x); EXPECT((select x))\n")),(0,r.kt)("p",null,"Now back to the test:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXPECT(x)")," : verifies that ",(0,r.kt)("inlineCode",{parentName:"li"},"x")," is true (i.e. a non-zero numeric)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"not used directly in this example"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"EXPECT_SQL_TOO")," : as the definition shows,",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"x")," must be true (as above)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"(select x)")," must also be true,",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},'i.e. when SQLite is asked to evaluate the expression the result is also a "pass"'))),(0,r.kt)("li",{parentName:"ul"},"this is used to verify consistency of order of operations and other evaluations that must be the same in both forms"),(0,r.kt)("li",{parentName:"ul"},"note that when ",(0,r.kt)("inlineCode",{parentName:"li"},"(select ...)")," is used, CQL plays no part in evaluating the expression, the text of the expression goes to SQLite and any variables are bound as described in Part 3.")))),(0,r.kt)("p",null,"The run test exercises many features, but the testing strategy is always the same:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"exercise some code pattern"),(0,r.kt)("li",{parentName:"ul"},"use ",(0,r.kt)("inlineCode",{parentName:"li"},"EXPECT")," to validate the results are correct"),(0,r.kt)("li",{parentName:"ul"},"the expressions in the ",(0,r.kt)("inlineCode",{parentName:"li"},"EXPECT")," are usually crafted carefully to show that a certain mistake is not being made",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"e.g. expressions where the result would be different if there are bugs in order of operations"),(0,r.kt)("li",{parentName:"ul"},"e.g. expressions that would crash with divide by zero if code that isn't supposed to run actually ran")))),(0,r.kt)("h3",{id:"schema-upgrade-testing"},"Schema Upgrade Testing"),(0,r.kt)("p",null,"The schema upgrade tester is quite a bit different than the others and relies heavily on execution\nof the upgraders.  Before we get into that there is a preliminary topic:"),(0,r.kt)("h4",{id:"previous-schema-validation"},'"Previous Schema" Validation'),(0,r.kt)("p",null,"In order to ensure that it is possible to create an upgrader, CQL provides features to validate\nthe current schema against the previous schema ensuring that nothing has been done that would\nmake an upgrader impossible. This is more fully discussed in\n",(0,r.kt)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch11"},"Chapter 11")," of the Guide."),(0,r.kt)("p",null,'"Previous Schema" validation is a form of semantic check and so its testing happens as\ndescribed above. Importantly, as with the other back-end passes the schema upgrader does\nnot have to concern itself with error cases as they are already ruled out.  The upgrader\nitself will be the subject of Part 5.'),(0,r.kt)("h4",{id:"packing-list"},"Packing List"),(0,r.kt)("p",null,"The test assets for upgrade tests are found in the ",(0,r.kt)("inlineCode",{parentName:"p"},"upgrade")," directory and consist of"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV0.sql")," : baseline version of the test schema"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV1.sql")," : v1 of the test schema"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV2.sql")," : v2 of the test schema"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV3.sql")," : v3 of the test schema"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"downgrade_test.c")," : a test that simulates attemping to go backwards in schema versions"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_test.c")," : the C harness that launches the upgraders and fires the tests"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_test.sh")," : the shell script that makes all this happen"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_validate.sql")," : some simple code that sanity checks the recorded schema version against tables in it",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"used to ensure that the schema we are on is the schema we think we are on, not to validate all facets of it"),(0,r.kt)("li",{parentName:"ul"},"also renders the contents of ",(0,r.kt)("inlineCode",{parentName:"li"},"sqlite_master")," in a canonical form")))),(0,r.kt)("p",null,"We haven't yet discussed the internals of schema upgrade, so for purposes of this part we're only going\nto discuss how the testing proceeds.  The upgrade will be considered \"magic\" for now."),(0,r.kt)("p",null,"In addition to these assets, we also have reference files:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_schema_v0.out.ref")," : expected content of v0"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_schema_v1.out.ref")," : expected content of v1"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_schema_v2.out.ref")," : expected content of v2"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_schema_v3.out.ref")," : expected content of v3")),(0,r.kt)("h4",{id:"upgrade_validatesql"},(0,r.kt)("inlineCode",{parentName:"h4"},"upgrade_validate.sql")),(0,r.kt)("p",null,"This file has a single procedure ",(0,r.kt)("inlineCode",{parentName:"p"},"validate_transition")," which does the two jobs:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"emits the canonicalized version of ",(0,r.kt)("inlineCode",{parentName:"li"},"sqlite_master")," to the output",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this is needed because ",(0,r.kt)("inlineCode",{parentName:"li"},"sqlite_master")," text can vary between Sqlite versions"))),(0,r.kt)("li",{parentName:"ul"},"checks for basic things that should be present in a given version")),(0,r.kt)("p",null,"The output of the validator looks like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"reference results for version 0\n\n----- g1 -----\n\ntype: table\ntbl_name: g1\nCREATE TABLE g1(\n  id INTEGER PRIMARY KEY,\n  name TEXT)\n\n----- sqlite_autoindex_test_cql_schema_facets_1 -----\n\ntype: index\ntbl_name: test_cql_schema_facets\n\n----- test_cql_schema_facets -----\n\ntype: table\ntbl_name: test_cql_schema_facets\nCREATE TABLE test_cql_schema_facets(\n  facet TEXT NOT NULL PRIMARY KEY,\n  version LONG_INT NOT NULL)\n")),(0,r.kt)("p",null,"The formatting rules are very simple and so the output is pretty readable."),(0,r.kt)("p",null,"The verifications are very simple."),(0,r.kt)("p",null,"First this happens:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},'let version := cast(test_cql_get_facet_version("cql_schema_version") as integer);\n')),(0,r.kt)("p",null,"The printing happens, then this simple validation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"  let recreate_sql := (\n    select sql from sqlite_master\n    where name = 'test_this_table_will_become_create'\n    if nothing null);\n\n...\n switch version\n  when 0 then\n    if recreate_sql is null or recreate_sql not like '%xyzzy INTEGER%' then\n      call printf(\"ERROR! test_this_table_will_become_create should have a column named xyzzy in v%d\\n\", version);\n      throw;\n    end if;\n  ...\n  else\n    call printf(\"ERROR! expected schema version v%d\\n\", version);\n    throw;\n  end;\n")),(0,r.kt)("p",null,"In short, the version number must be one of the valid versions and each version is expecting\nthat particular table to be in some condition it can recognize."),(0,r.kt)("p",null,"The real validation is done by noting any changes in the reference output plus a series of invariants."),(0,r.kt)("h4",{id:"prosecution-of-the-upgrade-test"},"Prosecution of the Upgrade Test"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Launch ")),(0,r.kt)("p",null,"We kick things off as follows:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"test.sh")," calls ",(0,r.kt)("inlineCode",{parentName:"li"},"upgrade/upgrade_test.sh"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this test doesn't usually run standalone (but it can)")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Build Stage ")),(0,r.kt)("p",null,"This creates the various binaries we will need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade_validate.sql")," is compiled down to C",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this code works for all schema versions, it's generic"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV[0-3].sql")," are compiled into C (this takes two steps)",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"first, the CQL upgrader is generated from the schema"),(0,r.kt)("li",{parentName:"ul"},"second, the CQL upgrader is compiled to C"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"make")," is used to lower all of the C into executables ",(0,r.kt)("inlineCode",{parentName:"li"},"upgrade[0-3]")," plus ",(0,r.kt)("inlineCode",{parentName:"li"},"downgrade_test"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"the shared validation code is linked into all 4 upgraders"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"downgrade_test.c")," is linked with the code for ",(0,r.kt)("inlineCode",{parentName:"li"},"upgrade1"))))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Basic Upgrades ")),(0,r.kt)("p",null,"Here we test going from scratch to each of the 4 target versions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"upgrade[0-3]")," are each run in turn with no initial database",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"i.e. their target database is deleted before each run"))),(0,r.kt)("li",{parentName:"ul"},"the validation output is compared against the reference output",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"any differences fail the test")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Previous Schema Validation ")),(0,r.kt)("p",null,"This sanity checks that the chain of schema we have built should work\nwhen upgrading from one version to the next:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"try each schema with this predecessor:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV1.sql")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV0.sql")," as the previous"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV2.sql")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV1.sql")," as the previous"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV3.sql")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"SchemaPersistentV2.sql")," as the previous"))),(0,r.kt)("li",{parentName:"ul"},"if any of these produce errors something is structurally wrong with the test or else previous schema validation is broken")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Two-Step Upgrades ")),(0,r.kt)("p",null,"Now we verify that we can go from any version to any other version with a stop in between to persist."),(0,r.kt)("p",null,"An example should make this clearer:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We start from scratch and go to v2",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this should produce the v2 reference schema output as before"))),(0,r.kt)("li",{parentName:"ul"},"We run the v4 upgrader on this v2 schema",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this should produce the v4 reference schema output as before"),(0,r.kt)("li",{parentName:"ul"},"i.e. if we go from nothing to v2 to v4 we get the same as if we just go to v4 directly")))),(0,r.kt)("p",null,"There are quite a few combinations like this, the test output lists them all:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Upgrade from nothing to v0, then to v0 -- must match direct update to v0\nUpgrade from nothing to v0, then to v1 -- must match direct update to v1\nUpgrade from nothing to v1, then to v1 -- must match direct update to v1\nUpgrade from nothing to v0, then to v2 -- must match direct update to v2\nUpgrade from nothing to v1, then to v2 -- must match direct update to v2\nUpgrade from nothing to v2, then to v2 -- must match direct update to v2\nUpgrade from nothing to v0, then to v3 -- must match direct update to v3\nUpgrade from nothing to v1, then to v3 -- must match direct update to v3\nUpgrade from nothing to v2, then to v3 -- must match direct update to v3\nUpgrade from nothing to v3, then to v3 -- must match direct update to v3\n")),(0,r.kt)("p",null,"Note that one of the combinations tested is starting on ",(0,r.kt)("inlineCode",{parentName:"p"},"Vn"),' and "upgrading"\nfrom there to ',(0,r.kt)("inlineCode",{parentName:"p"},"Vn"),". This should do nothing."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"}," Testing downgrade ")),(0,r.kt)("p",null,'Here we make sure that any attempt to "go backwards" results in an error.'),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"the ",(0,r.kt)("inlineCode",{parentName:"li"},"v3")," schema created by the previous test is used as input to the downgrade test"),(0,r.kt)("li",{parentName:"ul"},"the downgrade test was linked with the ",(0,r.kt)("inlineCode",{parentName:"li"},"v2")," upgrader"),(0,r.kt)("li",{parentName:"ul"},"when executed the ",(0,r.kt)("inlineCode",{parentName:"li"},"v2")," upgrader should report the error",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"this test's verifier checks for a correct error report"))),(0,r.kt)("li",{parentName:"ul"},"the test test fails if the error is no correctly reported")),(0,r.kt)("p",null,"The combination of testing reference outputs plus testing these many invariants\nat various stages results in a powerful integration test.  The actual schema\nfor the varios versions includes all the supported transitions such as\ncreating and deleting tables and columns, and recreating views, indicies, and triggers."),(0,r.kt)("p",null,"All of the possible transitions are more fully discussed in\n",(0,r.kt)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch10"},"Chapter 10")," of the Guide which pairs nicely\nwith the previous schema validions discussed in\n",(0,r.kt)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch11"},"Chapter 11"),"."),(0,r.kt)("h3",{id:"testing-the-line-directives-produced-by-cql"},"Testing the ",(0,r.kt)("inlineCode",{parentName:"h3"},"#line")," directives produced by CQL"),(0,r.kt)("p",null,"[An additional section should be added for the code that verifies the source line number mappings\neven though this is a pretty exotic case.]"),(0,r.kt)("h3",{id:"summary"},"Summary"),(0,r.kt)("p",null,"While there are a few more isolated verifications that happen in ",(0,r.kt)("inlineCode",{parentName:"p"},"test.sh")," and of course\nthere is the plumbing necessary to let ",(0,r.kt)("inlineCode",{parentName:"p"},"cov.sh")," use the test script to create coverage reports,\nthe above forms make up the vast majority of the test patterns."),(0,r.kt)("p",null,"Generally, the test files are designed to hold as many tests as can reasonably fit with\nthe gating factor being cases where different flags are necessary.  There are two different\nstages were many different tiny input files are used to create trivial failures like missing\ncommand line arguments and such.  But those cases are all just looking for simple error\ntext and a failure code, so they should be self-evident.  With so many options, many\nsuch baby tests are needed."))}d.isMDXComponent=!0}}]);