(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{156:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return p}));var a=n(0),i=n.n(a);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},m=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,r=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=b(n),m=a,p=d["".concat(r,".").concat(m)]||d[m]||u[m]||l;return n?i.a.createElement(p,s(s({ref:t},c),{},{components:n})):i.a.createElement(p,s({ref:t},c))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,r=new Array(l);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:a,r[1]=s;for(var c=2;c<l;c++)r[c]=n[c];return i.a.createElement.apply(null,r)}return i.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return d}));var a=n(2),i=n(6),l=(n(0),n(156)),r=["components"],s={id:"int08",title:"Part 8: Test Helpers",sidebar_label:"Part 8: Test Helpers"},o={unversionedId:"int08",id:"int08",isDocsHomePage:!1,title:"Part 8: Test Helpers",description:"\x3c!---",source:"@site/../CQL_Guide/int08.md",slug:"/int08",permalink:"/cql-guide/int08",version:"current",lastUpdatedBy:"Rico Mariani",lastUpdatedAt:1644436860,sidebar_label:"Part 8: Test Helpers",sidebar:"someSidebar",previous:{title:"Part 7: JSON Generation",permalink:"/cql-guide/int07"}},c=[{value:"Preface",id:"preface",children:[]},{value:"Test Helpers",id:"test-helpers",children:[{value:"Initialization",id:"initialization",children:[]},{value:"Dummy Table, Dummy Insert, Dummy Select, Dummy Result Set",id:"dummy-table-dummy-insert-dummy-select-dummy-result-set",children:[]},{value:"Dummy Test",id:"dummy-test",children:[]},{value:"Recap",id:"recap",children:[]}]}],b={rightToc:c};function d(e){var t=e.components,n=Object(i.a)(e,r);return Object(l.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(l.b)("h3",{id:"preface"},"Preface"),Object(l.b)("p",null,"Part 8 continues with a discussion of the Test Helper  generation code.\nAs in the previous sections, the goal here is not to go over every detail but rather to give\na sense of how helpers are created in general -- the core strategies and implementation choices --\nso that when reading the source you will have an idea how it all hangs together."),Object(l.b)("h2",{id:"test-helpers"},"Test Helpers"),Object(l.b)("p",null,"The testability features are described in ",Object(l.b)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch12"},"Chapter 12")," of the Guide\nSo, we won't be discussing all the details of what can be created.  Instead we're going to go over\nthe theory of how the generator works. This generator is somewhat different than others in that\nit only concerns itself with procedures and only those that have been suitably annotated --\nthere are large parts of the tree that are of no interest to the test helper logic, including,\nimportantly the body of procedures.  Only the signature matters.  As we'll see there is a fairly\nlarge family of generators that are like this."),Object(l.b)("p",null,"We'll have one section for every kind of output, but really only the ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_test")," helper is\nworthy of detailed discussion the others, as we'll see, are very simple."),Object(l.b)("h3",{id:"initialization"},"Initialization"),Object(l.b)("p",null,"The generator is wired like the others with a suitable main, this one is pretty simple:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},'// Main entry point for test_helpers\ncql_noexport void cg_test_helpers_main(ast_node *head) {\n  Contract(options.file_names_count == 1);\n  cql_exit_on_semantic_errors(head);\n  exit_on_validating_schema();\n  cg_test_helpers_reset_globals();\n\n  CHARBUF_OPEN(output_buf);\n\n  cg_th_output = &output_buf;\n\n  bprintf(cg_th_output, "%s", rt->source_prefix);\n  cg_test_helpers_stmt_list(head);\n  cql_write_file(options.file_names[0], cg_th_output->ptr);\n\n  CHARBUF_CLOSE(output_buf);\n  cg_test_helpers_reset_globals();\n}\n')),Object(l.b)("p",null,"The text output will be ultimately put into ",Object(l.b)("inlineCode",{parentName:"p"},"output_buf")," defined here and ",Object(l.b)("inlineCode",{parentName:"p"},"helper_flags")," will track which kinds of helpers\nwe saw.  This helps us to emit the right sections of output as we'll see."),Object(l.b)("p",null,"The code iterates the AST looking at the top level statement list only and in particular looking for ",Object(l.b)("inlineCode",{parentName:"p"},"CREATE PROC"),"\nstatements."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},'// Iterate through statement list\nstatic void cg_test_helpers_stmt_list(ast_node *head) {\n  Contract(is_ast_stmt_list(head));\n  init_all_trigger_per_table();\n  init_all_indexes_per_table();\n  CHARBUF_OPEN(procs_buf);\n  CHARBUF_OPEN(decls_buf);\n  cg_th_procs = &procs_buf;\n  cg_th_decls = &decls_buf;\n\n  for (ast_node *ast = head; ast; ast = ast->right) {\n    EXTRACT_STMT_AND_MISC_ATTRS(stmt, misc_attrs, ast);\n\n    if (is_ast_create_proc_stmt(stmt)) {\n      EXTRACT_STRING(proc_name, stmt->left);\n      cg_test_helpers_create_proc_stmt(stmt, misc_attrs);\n    }\n  }\n\n  bprintf(cg_th_output, "%s", decls_buf.ptr);\n  bprintf(cg_th_output, "\\n");\n  bprintf(cg_th_output, "%s", procs_buf.ptr);\n\n  CHARBUF_CLOSE(decls_buf);\n  CHARBUF_CLOSE(procs_buf);\n  symtab_delete(all_tables_with_triggers);\n  all_tables_with_triggers = NULL;\n  symtab_delete(all_tables_with_indexes);\n  all_tables_with_indexes = NULL;\n}\n')),Object(l.b)("p",null,"There are some preliminaries:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"we make a symbol table that maps from tables names to the list of triggers on that table by walking all the triggers"),Object(l.b)("li",{parentName:"ul"},"we make a symbol table that maps from tables names to the list of indices on that table by walking all the indices"),Object(l.b)("li",{parentName:"ul"},"we'll need two buffers one for declarations (that must go first) and one for procedure bodies"),Object(l.b)("li",{parentName:"ul"},"each ",Object(l.b)("inlineCode",{parentName:"li"},"CREATE PROC")," statement potentially contributes to both sections"),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"cg_test_helpers_create_proc_stmt")," checks for the helper attributes and sets up the dispatch to emit the test helpers")),Object(l.b)("p",null,"To do this we have to walk any misc attributes on the procedure we're looking for things of the form ",Object(l.b)("inlineCode",{parentName:"p"},"@attribute(cql:autotest=xxx)")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"static void cg_test_helpers_create_proc_stmt(ast_node *stmt, ast_node *misc_attrs) {\n  Contract(is_ast_create_proc_stmt(stmt));\n\n  if (misc_attrs) {\n    helper_flags = 0;\n    dummy_test_infos = symtab_new();\n\n    find_misc_attrs(misc_attrs, test_helpers_find_ast_misc_attr_callback, stmt);\n\n    symtab_delete(dummy_test_infos);\n    dummy_test_infos = NULL;\n  }\n}\n")),Object(l.b)("p",null,Object(l.b)("inlineCode",{parentName:"p"},"find_misc_attrs")," calls ",Object(l.b)("inlineCode",{parentName:"p"},"test_helpers_find_ast_misc_attr_callback"),".  We're going to keep track of\nwhich kinds of helpers we have found to help us with the output.  This is where ",Object(l.b)("inlineCode",{parentName:"p"},"helper_flags"),"\ncomes in. The flags are:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"#define DUMMY_TABLE           1 // dummy_table attribute flag\n#define DUMMY_INSERT          2 // dummy_insert attribute flag\n#define DUMMY_SELECT          4 // dummy_select attribute flag\n#define DUMMY_RESULT_SET      8 // dummy_result_set attribute flag\n#define DUMMY_TEST         0x10 // dummy_test attribute flag\n")),Object(l.b)("p",null,"And now we're ready for actual dispatch:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},'// This is invoked for every misc attribute on every create proc statement\n// in this translation unit.  We\'re looking for attributes of the form cql:autotest=(...)\n// and we ignore anything else.\nstatic void test_helpers_find_ast_misc_attr_callback(\n  CSTR _Nullable misc_attr_prefix,\n  CSTR _Nonnull misc_attr_name,\n  ast_node *_Nullable ast_misc_attr_value_list,\n  void *_Nullable context)\n{\n  ast_node *stmt = (ast_node *)context;\n  Contract(is_ast_create_proc_stmt(stmt));\n\n  if (misc_attr_prefix &&\n      misc_attr_name &&\n      !Strcasecmp(misc_attr_prefix, "cql") &&\n      !Strcasecmp(misc_attr_name, "autotest")) {\n    ...\n  }\n}\n')),Object(l.b)("p",null,"The main dispatch looks like this:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"// In principle, any option can be combined with any other but some only make sense for procs with\n// a result.\n\nEXTRACT_STRING(autotest_attr_name, misc_attr_value);\nif (is_autotest_dummy_test(autotest_attr_name)) {\n  cg_test_helpers_dummy_test(stmt);\n}\n\n// these options are only for procs that return a result set\nif (has_result_set(stmt) || has_out_stmt_result(stmt) || has_out_union_stmt_result(stmt)) {\n  if (is_autotest_dummy_table(autotest_attr_name)) {\n    helper_flags |= DUMMY_TABLE;\n    cg_test_helpers_dummy_table(proc_name);\n  }\n  else if (is_autotest_dummy_insert(autotest_attr_name)) {\n    helper_flags |= DUMMY_INSERT;\n    cg_test_helpers_dummy_insert(proc_name);\n  }\n  else if (is_autotest_dummy_select(autotest_attr_name)) {\n    helper_flags |= DUMMY_SELECT;\n    cg_test_helpers_dummy_select(proc_name);\n  }\n  else if (is_autotest_dummy_result_set(autotest_attr_name)) {\n    helper_flags |= DUMMY_RESULT_SET;\n    cg_test_helpers_dummy_result_set(proc_name);\n  }\n}\n")),Object(l.b)("p",null,"Most of these options are very simple indeed.   ",Object(l.b)("inlineCode",{parentName:"p"},"cg_test_helpers_dummy_test")," is the trickiest\nby far and we'll save it for last, let's dispense with the easy stuff."),Object(l.b)("h3",{id:"dummy-table-dummy-insert-dummy-select-dummy-result-set"},"Dummy Table, Dummy Insert, Dummy Select, Dummy Result Set"),Object(l.b)("p",null,"All of these are a very simple template.  The language includes just the right features\nto emit these procedures as nearly constant strings. The ",Object(l.b)("inlineCode",{parentName:"p"},"LIKE")," construct was literally\ndesigned to make these patterns super simple.  You can see all the patterns\nin ",Object(l.b)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch12"},"Chapter 12"),' but let\'s look at the code for\nthe first one.  This is "dummy table".'),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},'// Emit an open proc which creates a temp table in the form of the original proc\n// Emit a close proc which drops the temp table\nstatic void cg_test_helpers_dummy_table(CSTR name) {\n  bprintf(cg_th_procs, "\\n");\n  bprintf(cg_th_procs, "CREATE PROC open_%s()\\n", name);\n  bprintf(cg_th_procs, "BEGIN\\n");\n  bprintf(cg_th_procs, "  CREATE TEMP TABLE test_%s(LIKE %s);\\n", name, name);\n  bprintf(cg_th_procs, "END;\\n");\n\n  bprintf(cg_th_procs, "\\n");\n  bprintf(cg_th_procs, "CREATE PROC close_%s()\\n", name);\n  bprintf(cg_th_procs, "BEGIN\\n");\n  bprintf(cg_th_procs, "  DROP TABLE test_%s;\\n", name);\n  bprintf(cg_th_procs, "END;\\n");\n}\n')),Object(l.b)("p",null,"The purpose of this is to create helper functions that can create a temporary\ntable with the same columns in it as the procedure you are trying to mock.\nYou can then select rows out of that table (with ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_select"),") or insert\nrows into the table (with ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_insert"),").  Or you can make a single\nrow result set (often enough) with ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_result_set"),"."),Object(l.b)("p",null,"As we can see we simply prepend ",Object(l.b)("inlineCode",{parentName:"p"},"open_")," to the procedure name and use\nthat to create a test helper that make the temporary table.  The table's\ncolumns are defined to be ",Object(l.b)("inlineCode",{parentName:"p"},"LIKE")," the result shape of the procedure under\ntest.  Recall this helper is only available to procedures that return a result set.\nThe temporary table gets a ",Object(l.b)("inlineCode",{parentName:"p"},"test_")," prefix.  Assuming the procedure with the\nannotation is ",Object(l.b)("inlineCode",{parentName:"p"},"foo")," then this code is universal:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-sql"},"CREATE TEMP TABLE test_foo(LIKE foo);\n")),Object(l.b)("p",null,"Is universal, no matter the result shape of ",Object(l.b)("inlineCode",{parentName:"p"},"foo")," you get a table with those columns."),Object(l.b)("p",null,"For this to work we need to emit a declaration of ",Object(l.b)("inlineCode",{parentName:"p"},"foo")," before this code.  However,\nsince we have the full definition of ",Object(l.b)("inlineCode",{parentName:"p"},"foo")," handy that is no problem.  We remember\nthat we'll need it by setting a flag in ",Object(l.b)("inlineCode",{parentName:"p"},"helper_flags"),"."),Object(l.b)("p",null,"The code for ",Object(l.b)("inlineCode",{parentName:"p"},"close_foo")," is even simpler if that's possible.  The great thing is\nall need to know the columns of ",Object(l.b)("inlineCode",{parentName:"p"},"foo")," has been removed from the test helper.  The\nCQL compiler handles this as a matter of course and it is generally useful.\nSee ",Object(l.b)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch05#reshaping-data-cursor-like-forms"},"Chapter 5"),"\nfor more examples."),Object(l.b)("p",null,"All the others are equally simple and use similar tricks.  These were the first\ntest helpers.  They're actually not that popular because they are so easy to create\nyourself anyway."),Object(l.b)("h3",{id:"dummy-test"},"Dummy Test"),Object(l.b)("p",null,"The dummy test code emitter is non-trivial.  Let's quickly review the things it has to\ndo and then we can go over how each of these is accomplished.  Assuming we have an procedure\n",Object(l.b)("inlineCode",{parentName:"p"},"your_proc")," that has been annotated like this:"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-SQL"},"@attribute(cql:autotest=(dummy_test))\ncreate proc your_proc(..args...)\nbegin\n  -- assorted references to tables and views\nend;\n")),Object(l.b)("p",null,"Dummy test will produce the following:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_create_tables"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure that creates all the tables and views that ",Object(l.b)("inlineCode",{parentName:"li"},"your_proc")," needs"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_drop_tables"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure that drops those same tables and views"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_create_indexes"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure that creates your indices, in a test you may or may not want to create the indices"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_drop_indexes"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure the drops those same indices"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_create_triggers"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure that creates your trigger, in a test you may or may not want to create the triggers"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_drop_triggers"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure the drops those same triggers"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_read_table1"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"for each table or view in the ",Object(l.b)("inlineCode",{parentName:"li"},"create_tables")," a procedure that selects all the data out of that object is created in case you need it"))),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_populate_tables"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"a procedure that loads all the tables from ",Object(l.b)("inlineCode",{parentName:"li"},"create_tables")," with sample data"),Object(l.b)("li",{parentName:"ul"},"FK relationships are obeyed"),Object(l.b)("li",{parentName:"ul"},"user data may be specified in an attribute and that data will be used in preference to auto-generated data")))),Object(l.b)("p",null,"These are more fully discussed in ",Object(l.b)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch12#generalized-dummy-test-pattern"},"Chapter 12"),"."),Object(l.b)("h4",{id:"building-the-trigger-and-index-mappings"},"Building the Trigger and Index mappings"),Object(l.b)("p",null,"In order to know which indices and triggers we might need we have to be able to map from the tables/views in ",Object(l.b)("inlineCode",{parentName:"p"},"your_proc")," to the indices.\nTo set up for this a general purpose reverse mapping is created.  We'll look at the triggers version. The indices version is nearly identical."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"// Walk through all triggers and create a dictionnary of triggers per tables.\nstatic void init_all_trigger_per_table() {\n  Contract(all_tables_with_triggers == NULL);\n  all_tables_with_triggers = symtab_new();\n\n  for (list_item *item = all_triggers_list; item; item = item->next) {\n    EXTRACT_NOTNULL(create_trigger_stmt, item->ast);\n    EXTRACT_NOTNULL(trigger_body_vers, create_trigger_stmt->right);\n    EXTRACT_NOTNULL(trigger_def, trigger_body_vers->left);\n    EXTRACT_NOTNULL(trigger_condition, trigger_def->right);\n    EXTRACT_NOTNULL(trigger_op_target, trigger_condition->right);\n    EXTRACT_NOTNULL(trigger_target_action, trigger_op_target->right);\n    EXTRACT_ANY_NOTNULL(table_name_ast, trigger_target_action->left);\n    EXTRACT_STRING(table_name, table_name_ast);\n\n    if (create_trigger_stmt->sem->delete_version > 0) {\n      // dummy_test should not emit deleted trigger\n      continue;\n    }\n\n    symtab_append_bytes(all_tables_with_triggers, table_name, &create_trigger_stmt, sizeof(create_trigger_stmt));\n  }\n}\n")),Object(l.b)("p",null,"The steps are pretty simple:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"we make a symbol table that will map from the table name to an array of statements"),Object(l.b)("li",{parentName:"ul"},"there is a convenient ",Object(l.b)("inlineCode",{parentName:"li"},"all_triggers")," list that has all the triggers"),Object(l.b)("li",{parentName:"ul"},"from each trigger we ",Object(l.b)("inlineCode",{parentName:"li"},"EXTRACT")," the table or view name (named ",Object(l.b)("inlineCode",{parentName:"li"},"table_name")," even if it's a view)"),Object(l.b)("li",{parentName:"ul"},"we append the trigger statement pointer to the end of such statements for the table"),Object(l.b)("li",{parentName:"ul"},"any triggers marked with ",Object(l.b)("inlineCode",{parentName:"li"},"@delete")," are not included for obvious reasons")),Object(l.b)("p",null,"At the end of this looking up the table name will give you a list of trigger statement AST pointers.  From there\nof course you can get everything you need."),Object(l.b)("p",null,"The index version is basically the same, the details of the ",Object(l.b)("inlineCode",{parentName:"p"},"EXTRACT")," ops to go from index to table name are different\nand of course we start from the ",Object(l.b)("inlineCode",{parentName:"p"},"all_indices_list")),Object(l.b)("h4",{id:"computing-the-dependencies-of-a-procedure"},"Computing The Dependencies of a Procedure"),Object(l.b)("p",null,"Sticking with our particular example, in order to determine that tables/views that ",Object(l.b)("inlineCode",{parentName:"p"},"your_proc")," might need,\nthe generator has to walk its entire body looking for things that are tables.  This is handled by the\n",Object(l.b)("inlineCode",{parentName:"p"},"find_all_table_nodes")," function."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"static void find_all_table_nodes(dummy_test_info *info, ast_node *node) {\n  table_callbacks callbacks = {\n    .callback_any_table = found_table_or_view,\n    .callback_any_view = found_table_or_view,\n    .callback_context = info,\n    .notify_table_or_view_drops = true,\n    .notify_fk = true,\n    .notify_triggers = true,\n  };\n\n  info->callbacks  = &callbacks;\n  find_table_refs(&callbacks, node);\n\n  // stitch the views to the tables to make one list, views first\n  for (list_item *item = info->found_views; item; item = item->next) {\n     if (!item->next) {\n       item->next = info->found_tables;\n       info->found_tables = info->found_views;\n       break;\n     }\n  }\n  // this shouldn't be used after it's been linked in\n  info->found_views = NULL;\n}\n")),Object(l.b)("p",null,"This code uses the general dependency walker in ",Object(l.b)("inlineCode",{parentName:"p"},"cg_common.c")," to visit all tables and views. It is a recursive\nwalk and the general steps for prosecution go something like this:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"starting from ",Object(l.b)("inlineCode",{parentName:"li"},"your_proc")," the entire body of the procedure is visited"),Object(l.b)("li",{parentName:"ul"},"references to tables or views in update, delete, insert, select etc. statements are identified"),Object(l.b)("li",{parentName:"ul"},"each such table/view is added to the found tables list (at most once)"),Object(l.b)("li",{parentName:"ul"},"for views, the recursion proceeds to the body of the view as though the body had been inline in the procedure"),Object(l.b)("li",{parentName:"ul"},"for tables, the recursion proceeds to the body of the table to discover any FK relationships that need to be followed"),Object(l.b)("li",{parentName:"ul"},"if any found item has triggers, the trigger body is walked, any tables/views mentioned there become additional found items"),Object(l.b)("li",{parentName:"ul"},"any given table/view and hence trigger is only visited once")),Object(l.b)("p",null,'The net of all this, the "found items", is a list of all the tables and views that the procedure uses, directly\nor indirectly.  As discussed in ',Object(l.b)("a",{parentName:"p",href:"https://cgsql.dev/cql-guide/ch12#generalized-dummy-test-pattern"},"Chapter 12"),"\nthis walk does not include tables and views used by procedures that ",Object(l.b)("inlineCode",{parentName:"p"},"your_proc")," calls."),Object(l.b)("p",null,"To get the dependencies in the correct order, the tables have been walked following the foreign key chain and all\nviews go after all tables.  The views are stitched together.  The business of diving into views/tables/triggers and\nmaintainence of the found items is done by the callback function ",Object(l.b)("inlineCode",{parentName:"p"},"found_table_or_view"),".  The actual source\nis more descriptive comments than code but the code is included here as it is brief."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"// comments elided for brevity, the why of all this is described in the code\nstatic void found_table_or_view(\n  CSTR _Nonnull table_or_view_name,\n  ast_node *_Nonnull table_or_view,\n  void *_Nullable context)\n{\n  Contract(table_or_view);\n\n  dummy_test_info *info = (dummy_test_info *)context;\n\n  bool deleted = table_or_view->sem->delete_version > 0;\n  if (!deleted) {\n    continue_find_table_node(info->callbacks, table_or_view);\n\n    if (is_ast_create_view_stmt(table_or_view)) {\n      add_item_to_list(&info->found_views, table_or_view);\n    }\n    else {\n      add_item_to_list(&info->found_tables, table_or_view);\n    }\n\n    find_all_triggers_node(info, table_or_view_name);\n  }\n}\n")),Object(l.b)("p",null,"The general purpose walker notifies exactly once on each visited table/view and ",Object(l.b)("inlineCode",{parentName:"p"},"continue_find_table_node")," is used to\ndive into the bodies of views/tables that would otherwise not be searched.  Likewise ",Object(l.b)("inlineCode",{parentName:"p"},"find_all_triggers_node"),"\ndives into the body of any triggers that are on the found item."),Object(l.b)("h4",{id:"emitting-indices-and-triggers"},"Emitting Indices and Triggers"),Object(l.b)("p",null,'With the "found tables" computed (creatively stored in a field called ',Object(l.b)("inlineCode",{parentName:"p"},"found_tables"),') it\'s very easy to loop over these\nand generate the necessary indices for each found table (keeping in mind the "found table" can be a view).'),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"create index statement")," is emitted by the usual ",Object(l.b)("inlineCode",{parentName:"p"},"gen_statement_with_callbacks")," form that echos the AST."),Object(l.b)("p",null,"The ",Object(l.b)("inlineCode",{parentName:"p"},"drop index")," can be trivially created by name."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},'// Emit create and drop index statement for all indexes on a table.\nstatic void cg_emit_index_stmt(\n  CSTR table_name,\n  charbuf *gen_create_indexes,\n  charbuf *gen_drop_indexes,\n  gen_sql_callbacks *callback)\n{\n  symtab_entry *indexes_entry = symtab_find(all_tables_with_indexes, table_name);\n  bytebuf *buf = indexes_entry ? (bytebuf *)indexes_entry->val : NULL;\n  ast_node **indexes_ast = buf ? (ast_node **)buf->ptr : NULL;\n  int32_t count = buf ? buf->used / sizeof(*indexes_ast) : 0;\n  gen_set_output_buffer(gen_create_indexes);\n\n  for (int32_t i = 0; i < count; i++) {\n    ast_node *index_ast = indexes_ast[i];\n    EXTRACT_NOTNULL(create_index_stmt, index_ast);\n    EXTRACT_NOTNULL(create_index_on_list, create_index_stmt->left);\n    EXTRACT_ANY_NOTNULL(index_name_ast, create_index_on_list->left);\n    EXTRACT_STRING(index_name, index_name_ast);\n\n    gen_statement_with_callbacks(index_ast, callback);\n    bprintf(gen_create_indexes, ";\\n");\n    bprintf(gen_drop_indexes, "DROP INDEX IF EXISTS %s;\\n", index_name);\n  }\n}\n')),Object(l.b)("p",null,"Triggers are done in exactly the same way except that instead of looping over found tables we can\nactually generate them as they are discovered inside of ",Object(l.b)("inlineCode",{parentName:"p"},"find_all_triggers_node"),".  Recal that we\nhad to visit the triggers when computing the found tables anyway.  We did not have to visit the indices\nhence the difference."),Object(l.b)("p",null,"These walks allow us to produce: ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_create_indexes"),", ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_drop_indexes"),", ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_create_triggers"),", ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_drop_triggers")),Object(l.b)("h4",{id:"emitting-tables-and-views"},"Emitting Tables and Views"),Object(l.b)("p",null,"Starting from the found tables, again it is very easy to generate the code to create and drop the tables and views.  The only trick here is that the\ntables depend on one another so order is important.  The tables are discovered with the deepest dependency first, new found items are added to the head\nof the found tables but it's a post-order walk so that means that the deepest tables/views are at the front of the list.  This means the list\nis naturally in the order that it needs to be to delete the tables (parent tables at the end).  So the algorithm goes like this:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"emit the drop tables/views in the found order"),Object(l.b)("li",{parentName:"ul"},"reverse the list"),Object(l.b)("li",{parentName:"ul"},"emit the create tables/views in the reverse order"),Object(l.b)("li",{parentName:"ul"},"for each table/view emit the reader `test",Object(l.b)("em",{parentName:"li"},"your_proc_read"),"[item]"),Object(l.b)("li",{parentName:"ul"},"for tables we emit an insertion fragment into ",Object(l.b)("inlineCode",{parentName:"li"},"test_your_proc_populate_tables")," using ",Object(l.b)("inlineCode",{parentName:"li"},"cg_dummy_test_populate"),Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"population is discussed in the following sections")))),Object(l.b)("p",null,"As in the other cases ",Object(l.b)("inlineCode",{parentName:"p"},"gen_statement_with_callbacks")," is used to create the DDL statements:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CREATE TABLE")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CREATE VIEW")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"CREATE VIRTUAL TABLE"))),Object(l.b)("p",null,"The delete side is easily created with ad hoc ",Object(l.b)("inlineCode",{parentName:"p"},"DROP TABLE")," or ",Object(l.b)("inlineCode",{parentName:"p"},"DROP VIEW")," statements."),Object(l.b)("p",null,"The reading procedure is always of the form ",Object(l.b)("inlineCode",{parentName:"p"},"SELECT * FROM foo"),' so that too is trivial to generate with a fixed template.  The "echoing" system\nonce again is doing a lot of the heavy lifting.'),Object(l.b)("p",null,"These walks give us ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_create_tables"),", ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_drop_tables"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_read_[item]")," and drive the population process"),Object(l.b)("h4",{id:"gathering-ad-hoc-data-to-be-inserted"},"Gathering Ad Hoc Data To Be Inserted"),Object(l.b)("p",null,"Before we get into the mechanics of the population code, we have to visit one more area.  It's possible to include data in the the\n",Object(l.b)("inlineCode",{parentName:"p"},"dummy_test")," annotaiton itself.  This is data that you want to have populated.  This data will be included in the overall data populator.\nIf there is enough of it (at least 2 rows per candidate table) then it might be all the data you get.  Now the data format here is\nnot designed to be fully general, after all it's not that hard to just write ",Object(l.b)("inlineCode",{parentName:"p"},"INSERT ... VALUES")," for all your tables anyway.  The goal\nis to provide something that will help you not have to remember all the FK relationships and maybe let you economically specify some leaf\ndata you need and get the rest for free.  It's also possible to manually create dummy data that just won't work, again, scrubbing all\nthis is way beyond the ability of a simple test helper.  When the code runs you'll get SQLite errors which can be readily addressed."),Object(l.b)("p",null,'So keeping in mind this sort of "entry level data support" as the goal, we can take a look at how the system works -- it\'s all\nin the function ',Object(l.b)("inlineCode",{parentName:"p"},"collect_dummy_test_info")," which includes this helpful comment on structure."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"// the data attribute looks kind of like this:\n// @attribute(cql:autotest = (\n//   .. other auto test attributes\n//   (dummy_test,\n//     (table_name1, (col1, col2), (col1_val1, col2_val1), (col1_val2, col2_val2) ),\n//     (table_name2, (col1, col2), (col1_val1, col2_val1), (col1_val2, col2_val2) ),\n//     ...\n//   )\n//   .. other auto test attributes\n// ))\n//\n// we're concerned with the dummy_test entries here, they have a very specific format\n// i.e. first the table then the column names, and then a list of matching columns and values\n")),Object(l.b)("p",null,"So we're going to walk a list of attributes each one begins with a table name, then a list of columns, and then a list of values."),Object(l.b)("p",null,"All of the data is in the symbol table ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_test_infos")," which is indexed by table name.  For each table name we find\nwe ensure there is a symbol table at that slot.  So ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_test_infos")," is a symbol table of symbol tables.  It's actually\ngoing to be something like ",Object(l.b)("inlineCode",{parentName:"p"},"value_list = dummy_test_infos['table']['column']")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"  // collect table name from dummy_test info\n  ast_node *table_list = dummy_attr->left;\n  EXTRACT_STRING(table_name, table_list->left);\n  symtab *col_syms = symtab_ensure_symtab(dummy_test_infos, table_name);\n")),Object(l.b)("p",null,"Next we're going to find the column names, they are the next entry in the list so we go ",Object(l.b)("inlineCode",{parentName:"p"},"right")," to get the ",Object(l.b)("inlineCode",{parentName:"p"},"column_name_list")),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"// collect column names from dummy_test info\nast_node *column_name_list = table_list->right;\nfor (ast_node *list = column_name_list->left; list; list = list->right) {\n  EXTRACT_STRING(column_name, list->left);\n  sem_t col_type = find_column_type(table_name, column_name);\n\n  bytebuf *column_values = symtab_ensure_bytebuf(col_syms, column_name);\n\n  // store the column meta data, create space to hold values in databuf\n  bytebuf_append_var(&col_data_buf, column_values);\n  bytebuf_append_var(&col_type_buf, col_type);\n  bytebuf_append_var(&col_name_buf, column_name);\n}\n")),Object(l.b)("p",null,"The primary purpose of this part of the loop is then to add the column names to ",Object(l.b)("inlineCode",{parentName:"p"},"col_syms")," so that they are linked to the dummy info for this table.\nThe line ",Object(l.b)("inlineCode",{parentName:"p"},"bytebuf *column_values = symtab_ensure_bytebuf(col_syms, column_name);")," does this.  And this also creates the byte buffer that will hold\nthe eventual values."),Object(l.b)("p",null,"We also keep a side set of buffers that has the column name, type, and the values in the ",Object(l.b)("inlineCode",{parentName:"p"},"col_name"),", ",Object(l.b)("inlineCode",{parentName:"p"},"col_type"),", and ",Object(l.b)("inlineCode",{parentName:"p"},"col_data")," buffers respectively.\nThese are used to handle the foreign key work shortly and they allow us to not have to look up all the names over and over."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre"},"// collect column value from dummy_test info. We can have multiple rows of column value\nfor (ast_node *values_ast = column_name_list->right;\n     values_ast;\n     values_ast = values_ast->right) {\n\n  int32_t column_index = 0;\n\n  // collect one row of column value\n  for (ast_node *list = values_ast->left; list; list = list->right) {\n    ast_node *misc_attr_value = list->left;\n    Contract(col_data_buf.used);\n    bytebuf *column_values = ((bytebuf **) col_data_buf.ptr)[column_index];\n    sem_t column_type = ((sem_t *) col_type_buf.ptr)[column_index];\n    CSTR column_name = ((CSTR *) col_name_buf.ptr)[column_index];\n\n    bytebuf_append_var(column_values, misc_attr_value);\n    column_index++;\n\n    ...foreign key stuff goes here...\n  }\n  .. some cleanup\n}\n")),Object(l.b)("p",null,"The most important part is ",Object(l.b)("inlineCode",{parentName:"p"},"bytebuf_append_var(column_values, misc_attr_value);")," this is where the\nattribute value is added to the list of values that are on the column."),Object(l.b)("p",null,"Finally, the \"foreign key stuff\".  What we need to do here is check the column name in the table to see if it's part of a foreign\nkey and if it is we recursively add the current data value to the referenced column in the reference table.  That way\nif you add an initalizer to a leaf table you don't also have to add it to all the parent tables.  If it wasn't for this\nfeature the manual data wouldn't be very useful at all, hand written ",Object(l.b)("inlineCode",{parentName:"p"},"INSERT")," statements would be just as good."),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-C"},"// If a column value is added to dummy_test info for a foreign key column then\n// we need to make sure that same column value is also added as a value in the\n// the referenced table's dummy_test info.\n// e.g.\n//   create table A(id integer primary key);\n//   create table B(id integer primary key references A(id));\n//\n// If there is sample data provided for B.id then we must also ensure that\n// the value provided for B.id is also add as a sample row in A with the same\n// value for id.\nif (is_foreign_key(column_type)) {\n  add_value_to_referenced_table(table_name, column_name, column_type, misc_attr_value);\n}\n")),Object(l.b)("p",null,"When this is a done all of the initializers will have been added to the appropriate column of the appropriate table.\nAgain the overall structure is something like: ",Object(l.b)("inlineCode",{parentName:"p"},"value_list = dummy_test_infos['table']['column']")),Object(l.b)("h4",{id:"emitting-the-table-population-fragments"},"Emitting the Table Population Fragments"),Object(l.b)("p",null,"With any custom initalizers in the ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_test_infos")," structure we can do the population fragment for any given table."),Object(l.b)("p",null,"The general algorithm here goes like this:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"the total number of rows we will generate will be the number of column values in the initializers or else ",Object(l.b)("inlineCode",{parentName:"li"},"DUMMY_TEST_INSERT_ROWS"),", whichever is larger"),Object(l.b)("li",{parentName:"ul"},"the insert statement generated will include ",Object(l.b)("inlineCode",{parentName:"li"},"dummy_seed([value_seed])")," where value_seed starts at 123 and goes up 1 for every row generated",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"dummy_seed will create values for any missing columns using the seed so any combination of included columns is ok, we'll always get a complete insert"))),Object(l.b)("li",{parentName:"ul"},"foreign key columns use a provided intializer from the parent table if there is one, or else they use 1, 2, 3 etc.",Object(l.b)("ul",{parentName:"li"},Object(l.b)("li",{parentName:"ul"},"likewise if a column is referenceable by some other table it uses the known sequence 1, 2, 3 etc. for its value rather than the varying seed"),Object(l.b)("li",{parentName:"ul"},"in this way child tables can know that partent tables will have a value they can use since both tables will have at least ",Object(l.b)("inlineCode",{parentName:"li"},"DUMMY_TEST_INSERT_ROWS")," and any rows that were not manually initialized will match"),Object(l.b)("li",{parentName:"ul"},"note that foreign key columns always get this treatment, whether they were mentioned or not"))),Object(l.b)("li",{parentName:"ul"},"to mix things up the ",Object(l.b)("inlineCode",{parentName:"li"},"dummy_nullables")," and ",Object(l.b)("inlineCode",{parentName:"li"},"dummy_defaults")," are added on every other row which makes missing values be NULL and/or the default value if one is present")),Object(l.b)("p",null,"This is enough to generate a set of insert statements for the table in question and since the fragments are generated in the table creation order the resulting insert statements will have the parent tables first so the foreign keys of later tables will be correct."),Object(l.b)("p",null,"This can go wrong if the manual initializations use keys that conflict with the default generation or if the manual intializations have PK conflicts or other such things.  No attempt is made to sort that out.  The run time errors should be clear and these are, after all, only test helpers.  It's very easy to avoid these hazards\nand you get a pretty clear error message if you don't so that seems good enough."),Object(l.b)("p",null,"These fragments are ultimately combined to make the body of the procedure ",Object(l.b)("inlineCode",{parentName:"p"},"test_your_proc_populate_tables"),"."),Object(l.b)("h3",{id:"recap"},"Recap"),Object(l.b)("p",null,"The test helpers in ",Object(l.b)("inlineCode",{parentName:"p"},"cg_test_helpers.c")," are very simple nearly-constant templates with the exception of ",Object(l.b)("inlineCode",{parentName:"p"},"dummy_test")," which includes:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"table and view creation"),Object(l.b)("li",{parentName:"ul"},"index creation"),Object(l.b)("li",{parentName:"ul"},"trigger creation"),Object(l.b)("li",{parentName:"ul"},"data population")),Object(l.b)("p",null,"Topics covered included:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},"how the candidate procedures are discovered"),Object(l.b)("li",{parentName:"ul"},"how the attributes are scanned for test directives"),Object(l.b)("li",{parentName:"ul"},"how each dummy test type is dispatched"),Object(l.b)("li",{parentName:"ul"},"how ",Object(l.b)("inlineCode",{parentName:"li"},"dummy_test")," handles data initialization"),Object(l.b)("li",{parentName:"ul"},"how ",Object(l.b)("inlineCode",{parentName:"li"},"dummy_test")," does its dependency analysis")),Object(l.b)("p",null,"As with the other parts, no attempt was made to cover every function in detail.  That is\nbest done by reading the source code. But there is overall structure here and an understanding\nof the basic principles is helpful before diving into the source code."))}d.isMDXComponent=!0}}]);